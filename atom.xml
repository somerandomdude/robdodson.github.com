<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Much creepier in person]]></title>
  <link href="http://robdodson.github.com/atom.xml" rel="self"/>
  <link href="http://robdodson.github.com/"/>
  <updated>2012-04-28T09:47:33-07:00</updated>
  <id>http://robdodson.github.com/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with Ruby Dates]]></title>
    <link href="http://robdodson.github.com/blog/2012/04/28/playing-with-ruby-dates/"/>
    <updated>2012-04-28T07:20:00-07:00</updated>
    <id>http://robdodson.github.com/blog/2012/04/28/playing-with-ruby-dates</id>
    <content type="html"><![CDATA[<p>One of <a href="https://vimeo.com/40633070">my previous projects</a> involved a ton of work using Flash&#8217;s built in Date object. We ended up rolling our own Calendar library which was both tedious and time consuming to debug. Now that I&#8217;m digging into Ruby for my newest project, I wanted to see what features the language has to offer. So far I&#8217;m <em>really</em> impressed and that&#8217;s after only a few hours of exploration. I&#8217;ll detail some of the tricks I&#8217;ve learned along the way so hopefully other newcomers can benefit.</p>

<h3>Ruby Date Object Basics</h3>

<p>We can start off by firing up IRB and requiring the <code>date</code> class. Let&#8217;s do a really simple example first and just generate today.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'date'
</span><span class='line'>
</span><span class='line'>today = Date.today
</span><span class='line'> =&gt; #&lt;Date: 2012-04-28 ((2456046j,0s,0n),+0s,2299161j)&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now lets try a bit of Ruby&#8217;s sugar to generate tomorrow&#8217;s date.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tomorrow = today + 1
</span><span class='line'> =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt; </span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward, right? Since there is usually more than one way to do something in Ruby we could have achieved the same results using any of the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today.succ
</span><span class='line'> =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt;
</span><span class='line'>
</span><span class='line'>today.next
</span><span class='line'> =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt; 
</span><span class='line'>
</span><span class='line'>today.next_day
</span><span class='line'> =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt; </span></code></pre></td></tr></table></div></figure>


<p>As <a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">someone on StackOverflow pointed out</a>: <code>Date</code> objects are also <code>Comparable</code>, so you can construct a <code>Range</code>. If you wanted to collect every day from the previous week into an array you could do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>last_week = today - 7
</span><span class='line'>every_day_last_week = (last_week..today).to_a</span></code></pre></td></tr></table></div></figure>


<p>or&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today.downto(today - 7).to_a</span></code></pre></td></tr></table></div></figure>


<p>There are also some cute booleans tossed into the mix for figuring out the day of the week.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today.friday?
</span><span class='line'> =&gt; false
</span><span class='line'>
</span><span class='line'>today.saturday?
</span><span class='line'> =&gt; true</span></code></pre></td></tr></table></div></figure>


<h3>How to Use Chronic</h3>

<p><a href="https://github.com/mojombo/chronic/">Chronic</a> is a Ruby natural language date/time parser written by <a href="http://tom.preston-werner.com/">Tom Preston-Werner</a> (<a href="https://twitter.com/#!/mojombo">@mojombo</a>) which takes surprisingly human readable text and converts it to dates.</p>

<p>Covering everything that Chronic supports could take a while so definitely go check out the docs. Below is just a quick example to demonstrate how cool it is.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'chronic'
</span><span class='line'>
</span><span class='line'>Chronic.parse('yesterday')
</span><span class='line'> =&gt; 2012-04-27 12:00:00 -0700
</span><span class='line'>
</span><span class='line'>Chronic.parse('yesterday').to_date
</span><span class='line'> =&gt; #&lt;Date: 2012-04-27 ((2456045j,0s,0n),+0s,2299161j)&gt; 
</span><span class='line'>
</span><span class='line'>Chronic.parse('last monday')
</span><span class='line'> =&gt; 2012-04-23 12:00:00 -0700 
</span><span class='line'>
</span><span class='line'>Chronic.parse('3 months ago this friday at 3:45pm')
</span><span class='line'> =&gt; 2012-02-04 15:45:00 -0800</span></code></pre></td></tr></table></div></figure>


<h3>How to Use Active Support for Dates</h3>

<p>Active Support is a library extracted from Rails which adds a ton of sugar to the Ruby language. As the author&#8217;s describe it:</p>

<blockquote><p>Active Support is a collection of various utility classes and standard library extensions that were found useful for Rails. All these additions have hence been collected in this bundle as way to gather all that sugar that makes Ruby sweeter.</p></blockquote>

<p>It&#8217;s broken into several pieces so you can choose to load only the parts that you&#8217;ll actually be using. <em>I&#8217;m going to write an upcoming article on Active Support. For now we&#8217;ll just require it all.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'active_support/all'
</span><span class='line'>
</span><span class='line'>t = Date.today
</span><span class='line'> =&gt; Sat, 28 Apr 2012
</span><span class='line'>
</span><span class='line'>t.class
</span><span class='line'> =&gt; Date </span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice that Active Support has changed the way our date&#8217;s to_s is formatted so it&#8217;s more human readable. It also added shortcuts for creating Dates on either side of today.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yesterday = Date.yesterday
</span><span class='line'> =&gt; Fri, 27 Apr 2012 
</span><span class='line'> 
</span><span class='line'>tomorrow = Date.tomorrow
</span><span class='line'> =&gt; Sun, 29 Apr 2012</span></code></pre></td></tr></table></div></figure>


<p>Included as well are some nice new convenience booleans: <code>past?</code>, <code>today?</code>, and <code>future?</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tomorrow.future?
</span><span class='line'> =&gt; true</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;ve ever had to write a Calendar class that can support weeks, especially those that straddle two different months, you&#8217;ll appreciate the simplicity of the helper methods that Active Support adds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today = Date.today
</span><span class='line'> =&gt; Sat, 28 Apr 2012
</span><span class='line'>
</span><span class='line'>today.beginning_of_week
</span><span class='line'> =&gt; Mon, 23 Apr 2012
</span><span class='line'>
</span><span class='line'>today.next_week
</span><span class='line'> =&gt; Mon, 30 Apr 2012
</span><span class='line'>
</span><span class='line'># You can also choose to make the week start on an arbitrary day, like Sunday
</span><span class='line'>today.beginning_of_week(:sunday)
</span><span class='line'> =&gt; Sun, 22 Apr 2012</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We aren&#8217;t limited to weeks though. Active Support adds methods for days, months and years. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today.years_ago(10)
</span><span class='line'> =&gt; Sun, 28 Apr 2002</span></code></pre></td></tr></table></div></figure>


<p><code>FixNum</code> is also extended to support additional Date related methods which make certain operations much more readable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>today + 1.year
</span><span class='line'> =&gt; Sun, 28 Apr 2013</span></code></pre></td></tr></table></div></figure>


<p>These extensions are referred to as <code>durations</code> <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">in the documentation</a>.
Which brings us back to one of our first examples of finding the date 7 days ago. With Active Support it&#8217;s as easy as&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>7.days.ago
</span><span class='line'> =&gt; 2012-04-21 08:44:02 -0700</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool! Active Support adds <em>A LOT</em> more than just Date helpers and I&#8217;ll try to cover it more in some future articles. Definitely <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">check out the documentation</a> (you can <a href="http://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-date">skip to the Date section</a> since it&#8217;s pretty immense)</p>

<p><small>Source:<br />
<a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby</a>
<a href="http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm">http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm</a>
<a href="http://guides.rubyonrails.org/active_support_core_extensions.html">http://guides.rubyonrails.org/active_support_core_extensions.html</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup PostgreSQL for Rails and Heroku]]></title>
    <link href="http://robdodson.github.com/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku/"/>
    <updated>2012-04-27T07:33:00-07:00</updated>
    <id>http://robdodson.github.com/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku</id>
    <content type="html"><![CDATA[<h3>Install PostgreSQL Locally</h3>

<p>Ryan Bates has already put together a wonderful Railscast on this topic so feel free to <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">jump over there</a> to view it. My main goal in writing this post was to distill down what he said, point out a small gotcha along the way and offer some additional tools.</p>

<p>There are a few different options for installing PostgreSQL. The first one, which Ryan outlines, is to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> and simply do a <code>brew install postgresql</code>. Some folks might not be comfortable with that process so I wanted to also recommend the new <a href="http://postgresapp.com/">PostgreSQL.app</a> from the team at <a href="http://www.heroku.com/">Heroku</a>. If you&#8217;re more used to tools like <a href="http://www.mamp.info/en/index.html">MAMP</a> then the PostgreSQL.app might be a bit more your style.</p>

<p>If you go the Homebrew route make sure you type in <code>initdb /usr/local/var/postgres</code> after the install finishes to init your first database. The installer will also mention some commands you can use to have PostgreSQL auto-start whenever you turn on your computer. I wasn&#8217;t a big fan of this approach so instead I created two aliases in my .bash_profile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
</span><span class='line'>alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'</span></code></pre></td></tr></table></div></figure>


<p>With these I can just type <code>pg-start</code> to fire up Postgres and <code>pg-stop</code> when I want to shut it down.</p>

<h3>Change Rails Database to PostgreSQL</h3>

<p>The next thing you&#8217;ll want to do is either convert an existing project to PostgreSQL or create a new rails project and set PostgreSQL as the database.</p>

<p>Creating a new rails project for Postgres is as easy as <code>rails new blog -d postgresql</code>. After running this command you&#8217;ll also need to call <code>rake db:create:all</code> to create a new database.</p>

<p>To convert an existing project you&#8217;ll want to update your Gemfile to include the <code>pg</code> gem. A basic Gemfile might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.2.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;0.13.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span>   <span class="s1">&#39;~&gt; 3.2.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.0.3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll also need to update your config/database.yml to look for Postgres instead of SQLite or MySQL.</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">insert your dev database name</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">insert your user name</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">insert your test database name</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">insert your user name</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we haven&#8217;t created any Postgres user accounts both Homebrew and PostgreSQL.app will simply use our current username as the login. The password can remain blank. After this is done you&#8217;ll also need to call <code>rake db:create:all</code> to create the new database.</p>

<h3>Connect a Rails Project to a PostgreSQL Database on Heroku</h3>

<p>If your project isn&#8217;t already under version control then now would be a good time to set that up.</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">git init</span>
</span><span class='line'><span class="l-Scalar-Plain">git add .</span>
</span><span class='line'><span class="l-Scalar-Plain">git commit -m &#39;Initial commit!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we&#8217;ll create a free Heroku instance</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">heroku create --stack cedar</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that&#8217;s done we&#8217;ll simply push our project up there.</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">git push heroku master</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might see some deprecation warnings about vendor plugins. For now you can (probably) safely ignore those.</p>

<p>Here&#8217;s one little gotcha that I seemed to run into. If you try to access your site on Heroku using the <code>heroku open</code> command you might get an error page. You have to make sure to also call <code>heroku run rake db:create:all</code> otherwise your production database will not be in place and your app will fail to connect to it. Speaking of production databases, you should also note that Heroku will overwrite whatever you put into your config/database.yml so you don&#8217;t have to worry about figuring out all the connection details for their shared services&#8230;it&#8217;ll all just work. Sweet!</p>

<h3>PostgreSQL GUI</h3>

<p>One last tip re: your new Postgres setup. If you&#8217;re just starting out like me then your command line fu is probably not as strong as you&#8217;d like it to be. Personally I really like having a nice GUI to visualize the tables in my database. For MySQL I usually use the awesome (and free) <a href="http://www.sequelpro.com/">SequelPro</a>. For PostgreSQL you can use <a href="http://inductionapp.com/">Induction</a>. It doesn&#8217;t seem like they have a downloadable binary on their website (weird?) but you can grab one out of <a href="https://github.com/Induction/Induction/downloads">the Github repo&#8217;s downloads page</a>. Connecting to your Postgres instance can be a little tricky, you have to make sure to use the PostgreSQL adapter, localhost as the hostname, your computer&#8217;s username as the user and the password can remain blank. You also <em>HAVE</em> to give it a database name (even though it says it&#8217;s optional) or it will throw a <code>FATAL:  database [your username] does not exist</code>. Here&#8217;s a screenshot of what mine looks like:</p>

<p><img class="center" src="http://robdodson.github.com/images/induction_screen.png" title="'Induction Login Screen'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SXSW Day 1]]></title>
    <link href="http://robdodson.github.com/blog/2012/03/09/sxsw-day-1/"/>
    <updated>2012-03-09T18:21:00-08:00</updated>
    <id>http://robdodson.github.com/blog/2012/03/09/sxsw-day-1</id>
    <content type="html"><![CDATA[<h3>Wake Up! It&#8217;s a beautifu—&#8230; It&#8217;s a day in Austin!</h3>

<p>Today is the first day of SXSW Interactive and also my first full day here in lovely Austin, Texas. The weather has been pretty gnarly with consistent downpours and that trend looks to continue. One upshot of the nasty weather is that participants are forced to congregate in little groups while waiting on shuttles and everyone can take a moment to chat up their fellow festival goers.</p>

<p>The first thing on the todo list was to pickup my badge and brave the registration gauntlet which wrapped well around the front of the Austin Convention Center. For such a giant line it actually moved quite fast but I realized later on that even though I showed up at close to 10:30 I was still one of the early birds. By mid afternoon it had almost doubled in size. With badge in hand and 3 <strong>ridiculously heavy gift bags</strong> I set out to get my bearings and figure out the festival layout.</p>

<h3>Hello, Rob&#8230; Pepsi is calling.</h3>

<p>One of the first and coolest things I saw on the trade room floor was the PepsiCo Lounge featuring a ton of Samsung&#8217;s new &#8220;Smart Window&#8221; displays. If you haven&#8217;t heard of the Smart Windows checkout <a href="http://www.wired.com/gadgetlab/2012/01/samsung-transparent-lcd/">this great video feature</a> by my SXSWi roomie Christina Bonnington (<a href="https://twitter.com/#!/redgirlsays">@redgirlsays</a>) from <a href="http://www.wired.com/gadgetlab/">Wired&#8217;s Gadget Lab blog</a>. The Pepsi lounge is demoing the touchscreens on a pair of vending machines which run video loops of refreshing Pepsi products and also allow the user to &#8220;gift&#8221; a soda to their friends by filling out a short form with an onscreen keyboard. Pepsi is also running an art project asking participants to &#8220;Imagine the Future of Digital,&#8221; the centerpiece of which is a full size phone booth constructed almost entirely of Smart Window touchscreens. As the participants enter the booth a series of animations play that making it appear to the outside audience that the booth is filling up with Pepsi. Not only is this a <em>crazy</em> effect to see in person but it also serves the dual function of giving the participant privacy and providing a solid background for the interior touch graphics to display upon. The experience tasks the user with following an in-phone narrator as he guides you through various tasks like giving an elevator pitch into the receiver and touching the walls to indicate aspects of your personality.</p>

<p>The project was produced in Unity3D which I found somewhat surprising given the high amount of video and lack of any real 3D animations. Unfortunately the presenter couldn&#8217;t give me any more technical detail than that but it does get at something I&#8217;ve noticed recently, having just produced a touch screen myself, and that&#8217;s the lack of really good tools for doing these kinds of projects. The current players are openFrameworks, Processing, Flash + Scaleform and (I suppose) add Unity to that list as well. While these are all great tools in their own right none of them are specifically designed for the world of touch, and as such they all have major failings when compared to the standard-bearer, Apple&#8217;s Cocoa Touch Framework. Still the Pepsi team has done a brilliant job and I would expect to see a lot more of these transparent screens in the near future. It was so jaw dropping (and I&#8217;m a pretty jaded nerd) I can&#8217;t help but imagine the slew of creative directors vibrating in their shoes at the site of these things.</p>

<h3>NERD RAGE</h3>

<p>Next up was the job fair (booooooooring) and then on to the ScreenBurn arcade. I guess I was a little let down by the arcade as I was expecting more of a&#8230;well&#8230;arcade. And while it <em>is</em> a total spectacle of nerdy goodness, it&#8217;s actually more of a trade room floor where various developers are pimping their wares. I did see some indie devs with interesting projects but much of the work looked under-polished or just plain retarded. Guess what people? Augmented Reality was cool like three years ago and there&#8217;s no fucking way I&#8217;m going to walk through the streets of San Francisco holding my iPad in front of my face so I can collect stupid points for your poorly gamified Groupon clone. That seems like a good way to step in front of a Muni bus (and oh the lolz that would be had..). I got a drink at the bar and plopped down in a chair to watch the Tekken vs Street Fighter competition featuring actual professional gamers. What was more astonishing though were the professional gaming <em>commentators!</em> I can&#8217;t believe that&#8217;s an actual job that an actual person can have and pay their actual rent! Mind = blown. To their credit they made the whole thing <strong>much</strong> less creepy as it would otherwise have been a room full of nerds all silently watching a stage full of nerds play Street Fighter. At least I think they made it less creepy. I was hitting the Jack Daniel&#8217;s pretty hard at that point because it was too wet outside to leave.</p>

<h3>Leaving Flatland</h3>

<p>I finally ended up at the Radisson to hear the Leaving Flatland WebGL talk by Nicolas Garcia Belmonte (<a href="http://twitter.com/philogb">@philogb</a>) and Luz Caballero (<a href="http://twitter.com/gerbille">@gerbille</a>). A super interesting, albeit brief, explanation of the very basics of WebGL, libraries and shaders. Nicolas is the author of <a href="http://www.senchalabs.org/philogl/">PhiloGL</a> which he demoed during the presentation as an alternative to Three.js. Having never heard of PhiloGL before I was really impressed with the demos he showed and quite enjoy the module system which allows you to include only the aspects of the framework that you actually need for your project. Hopefully in a future blog post I can take it for a spin.</p>

<p>During the QA round an engineer from the Chrome team got up to briefly touch upon the issues that Google has had with brining WebGL to the Webkit mobile browser. Currently the only browsers supporting WebGL on phones are from Opera and Mozilla. He mentioned that Sony has recently open sourced a WebGL implementation that they might be able to use but that&#8217;s still a ways away. Like most things regarding WebGL, it&#8217;s in the works but not ready for prime time yet.</p>

<h3>And now we drink!</h3>

<p>It&#8217;s been a long day of shuttles, hiking, more shuttles and taxis. At this point I&#8217;m totally exhausted and just sitting in a Starbucks to recoup. My backpack has more swag than I know what to do with and at some point people started putting stickers on it so now it&#8217;s also a billboard. In the spirit of SXSW the next logical thing would be to go party but right now I&#8217;m about ready to pass out. I&#8217;ll have to drink some more tea and see how I feel I guess. For now, I&#8217;m signing off, see you tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Basic RVM Tutorial for Rails 3]]></title>
    <link href="http://robdodson.github.com/blog/2011/09/23/how-to-use-rvm-for-rails3/"/>
    <updated>2011-09-23T07:33:00-07:00</updated>
    <id>http://robdodson.github.com/blog/2011/09/23/how-to-use-rvm-for-rails3</id>
    <content type="html"><![CDATA[<h3>What is RVM?</h3>

<p><a href="https://rvm.io//">RVM</a> is a great Ruby and gem management tool that should probably be the first thing you install if you’re learning Rails (or Ruby for that matter). The main benefit of RVM is that it helps to keep your rubies and your gems organized into discrete folders which can easily be thrown away and recreated. If you’ve ever had a gem explode on you, then you know how great a feature like this is. I’ll cover the basics of using RVM in this post to quickly get you up and running. This tutorial is written for the OSX terminal, if you&#8217;re on Windows&#8230;um&#8230;kill yourself.</p>

<h3>How to Install RVM</h3>

<p>First download and run the RVM installation script. Thankfully the authors have made this nice and easy for you. Just copy and paste the following into your command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure>


<p>Next you’re going to want to make sure that RVM gets loaded into your shell sessions. The easiest way to do this is to open up your .bash_profile file located in your user&#8217;s home directory (that&#8217;s what the ~ stands for in your terminal) and add the following to the bottom:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session.</span></code></pre></td></tr></table></div></figure>


<p>Then quit your terminal window and open it up again. You should be able to type: <code>rvm -v</code> to verify that RVM is loaded and ready for use. If instead it just returns the prompt then you&#8217;ve probably missed a step along the way. Check out the <a href="https://rvm.io/rvm/install/">RVM installation page</a> and double check that you&#8217;ve done everything correctly.</p>

<h3>A Guided Tour of RVM&#8217;s Inner Workings</h3>

<p>To get us started lets look around inside the .rvm directory. Try the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.rvm
</span><span class='line'>ls</span></code></pre></td></tr></table></div></figure>


<p>When you list out the contents of rvm you’ll see several folders but the ones we’re most interested in are gems and rubies. The gems folder is going to hold all of our gems after we create a <em>gemset</em>. The rubies folder holds different versions of ruby for us to play with. The really cool thing about RVM is that it lets you swap versions of ruby and different gemsets around so you can test out new packages without blowing stuff up. Made a mistake and installed the wrong gems? Just blow away the gemset and start over, no need to track everything down and uninstall it. RVM also lets you ensure that you have the same gems running for your dev, test and production environments :)</p>

<p>Now that you have RVM installed, the next thing you’ll want to do is to install the latest version of Ruby. If you haven’t previously installed Ruby and you’re on OSX then typing <code>ruby -v</code> into the command line should produce something like this:</p>

<p><code>ruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]</code></p>

<p>We’re going to leave the default version of Ruby installed on our machine, and instead install a new version using RVM. The current latest version of Ruby is 1.9.3, so try typing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3</span></code></pre></td></tr></table></div></figure>


<p>It will take a little while to run but if all goes well we should have a brand new working copy of Ruby.</p>

<p>Now try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3
</span><span class='line'>ruby -v
</span><span class='line'># ruby 1.9.3p125 (2012-02-16 revision 34643) [x86_64-darwin11.2.0]
</span><span class='line'>which ruby
</span><span class='line'># /Users/Rob/.rvm/rubies/ruby-1.9.3-p125/bin/ruby</span></code></pre></td></tr></table></div></figure>


<p>We can see that not only are we running the latest version of ruby, but instead of being stashed in some random system folder somewhere, it’s being kept inside of a directory in RVM. To make sure that every time we open terminal we are using this new version of ruby we’ll simply say:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3 --default</span></code></pre></td></tr></table></div></figure>


<p>That will tell RVM to use this version as its default Ruby any time we open a terminal session.</p>

<h3>What are RVM Gemsets?</h3>

<p>I have to admit that when I first started using Ruby I found the concept of gems really confusing. In Flash or JavaScript if you want to use some code you just download the folder from github and include it in your project. Ruby does something similar with gems except it tries to automate the process for you and often times this can lead to busted projects. Because some gems rely on other gems it isn’t unheard of to have two gems in conflict which means your project won’t run and if you’re new to ruby or rails this can be just enough to make you call it quits. Here is where RVM really shines because it makes it OK to screw up your gems by sequestering them into their own little packages which you can recreate and destroy at will.</p>

<p>Lets get started by typing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm gemset create my-new-gemset</span></code></pre></td></tr></table></div></figure>


<p>You should get a confirmation that a new gemset was created as well as a path to the new gemset. Let’s go take a look at that path.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Make sure to use the path RVM provided you.
</span><span class='line'>cd /Users/RobDodson/.rvm/gems/ruby-1.9.3-p125@my-new-gemset
</span><span class='line'>ls</span></code></pre></td></tr></table></div></figure>


<p>Right now the folder is empty because we haven’t told RVM to install any gems into this gemset. Let’s change that by first assigning our current instance of ruby to this set.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm 1.9.3@my-new-gemset --default</span></code></pre></td></tr></table></div></figure>


<p>The @ character tells RVM that we want to assign this gemset to our current ruby instance. The default flag is just there since I tend to forget to make my gemsets defaults and RVM will reset to whatever the prior default was the last time the flag was set. Let’s verify that things worked by typing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm current</span></code></pre></td></tr></table></div></figure>


<p>Which should output: <code>ruby-1.9.3-p125@my-new-gemset</code>. Similarly you could type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm gemset list</span></code></pre></td></tr></table></div></figure>


<p>To see a list of all your gemsets with a hash rocket next to the one currently in use.</p>

<h3>How to Install Gems with RVM</h3>

<p>Ok, so lets install some gems then. We’ll start by installing the Nokogiri gem, just as a test. But before we do this let me give you a little warning. In a lot of documentation you&#8217;ll see people installing gems with the <code>sudo</code> keyword at the beginning of the commmand. If you&#8217;re not using RVM then doing it this way makes sense. However if you ARE using RVM then <em>you should never install a gem with <code>sudo</code>!</em> In short, RVM does command line wizardry and installing gems with <code>sudo</code> will place them outside of the .rvm directory. You&#8217;ll think you&#8217;ve installed a gem properly but really it&#8217;ll be somewhere in the system folder. To install a gem using RVM we simply leave off the <code>sudo</code> keyword. Let&#8217;s try one by typing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install nokogiri</span></code></pre></td></tr></table></div></figure>


<p>After the installation has finished we should be able to see our new gem. If you’re still inside of the gems directory from earlier you can do a <code>cd gems</code>
otherwise you’ll need to dig into it with a path that looks like this</p>

<p><code>cd /Users/RobDodson/.rvm/gems/ruby-1.9.3-p125@my-new-gemset/gems</code></p>

<p>Now if you type <code>ls</code> you should see your version of nokogiri. Let’s pause for a moment and consider what just happened. If you use Ruby Gems without RVM then everything will be installed in the system folder. If we wanted to have 2 different versions of nokogiri we would need to make sure that there wasn’t any kind of conflict in our gems directory. Since we’re using RVM to manage our gems, we’re able to tell Ruby Gems to put one version of nokogiri in the ‘my-new-gemset’ directory and another version in the ‘some-other-gemset’ directory. This is a great feature, especially when you want to try out an upgrade or a different version of a particular library. Rather than having to uninstall your working gem, you can just create a new gemset. If things blow up then you can throw it away and revert back to the previous gemset.</p>

<p>Lets make another gemset and this time install a new instance of Rails.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm create gemset my-new-rails-setup
</span><span class='line'>rvm 1.9.3@my-new-rails-setup
</span><span class='line'>gem install rails</span></code></pre></td></tr></table></div></figure>


<p>Now lets go into the folder for that gemset. Again the path should look similar to this:</p>

<p><code>cd /Users/RobDodson/.rvm/gems/ruby-1.9.3-p125@my-new-rails-setup/gems</code></p>

<p>Type <code>ls</code> this time and you’ll see <em>WAY</em> more gems. Imagine that we wanted to test our application on a different version of Rails. Managing all those gems in one directory would be a huge pain but thankfully RVM is taking care of that for us. If we decide that this version of rails is not for us we can just delte the gemset with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm gemset delete my-new-rails-setup</span></code></pre></td></tr></table></div></figure>


<p>And recreate it however we want :D</p>

<p>That wraps it up for today. If you have any questions you can post a comment or hit me up on twitter <a href="http://twitter.com/robdodson">@rob_dodson</a>.</p>
]]></content>
  </entry>
  
</feed>
