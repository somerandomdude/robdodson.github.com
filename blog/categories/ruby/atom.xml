<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-05T22:17:30-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Simple Scraper with Nokogiri in Ruby]]></title>
    <link href="http://robdodson.me/blog/2012/05/05/building-a-simple-scraper-with-nokogiri-in-ruby/"/>
    <updated>2012-05-05T21:08:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/05/building-a-simple-scraper-with-nokogiri-in-ruby</id>
    <content type="html"><![CDATA[<p>Since I've been talking so much about <a href="http://d3js.org/">D3.js</a> lately I thought it might be fun to start a little project which combines D3 and Ruby. The idea is to build a very simple page scraper that counts how often certain words are used in each post. I've also decided to start adding a little block of metadata at the end of each post so I can graph that over time as well.</p>

<p>So how do we get started? Well first we'll need to build a page scraper of some kind. This program will have to consume the contents of an HTML page, find the node that contains our blog post and count up how often each word reoccurs. For right now that should be more than enough to get us started. We'll look at grabbing the metadata and drawing graphs in future posts. I should point out that this idea was inspired by the wonderful site <a href="http://smarterware.org/5359/taking-on-the-750-words-march-challenge">750words.com</a> which creates <a href="http://smarterware.org/5359/taking-on-the-750-words-march-challenge">a beautiful exploration section</a> any time you write a new journal entry. Definitely check out that site, it's amazing.</p>

<h3>Hello Noko</h3>

<p>I decided early on that I wanted the scraper to use <a href="http://nokogiri.org/">Nokogiri</a> because I've heard so much about it. As the authors describe it:</p>

<blockquote><p>Nokogiri (鋸) is an HTML, XML, SAX, and Reader parser. Among Nokogiri’s many features is the ability to search documents via XPath or CSS3 selectors.</p></blockquote>

<p>Using CSS selectors means that working with Nokogiri is a lot like working with jQuery. Here's a quick demonstration:</p>

<p>```ruby
require 'open-uri'
require 'nokogiri'</p>

<p>doc = Nokogiri::HTML(open('https://www.google.com/search?q=unicorns'))</p>

<p>doc.css('h3.r a').each do |link|
  puts link.content
end
<code>``
Easy enough, right? Taking it a step further let's iterate over each element on the page and place them into a</code>Hash`.</p>

<p>```ruby
require 'open-uri'
require 'nokogiri'</p>

<p>@counts = Hash.new(0)</p>

<p>def words_from_string(string)
  string.downcase.scan(/[\w']+/)
end</p>

<p>def count_frequency(word_list)
  for word in word_list</p>

<pre><code>@counts[word] += 1
</code></pre>

<p>  end
  @counts
end</p>

<p>doc = Nokogiri::HTML(open('http://robdodson.me'))</p>

<h3>#</h3>

<h1>Search for nodes by css</h1>

<p>entries = doc.css('div.entry-content')
puts "Parsing #{entries.length} entries"
entries.each do |entry|
  words = words_from_string(entry.content)
  count_frequency(words)
end</p>

<p>sorted  = @counts.sort_by { |word, count| count }
puts sorted.map { |word, count| "#{word}: #{count}"}
```</p>

<p>The output from this script should look (kind of) like this:</p>

<p><code>text
...
ruby: 66
rvm: 66
our: 68
can: 71
3: 75
if: 77
for: 82
your: 88
2: 88
is: 91
this: 91
s: 94
we: 95
that: 106
i: 118
in: 119
it: 125
1: 128
and: 149
of: 170
a: 231
you: 233
to: 342
the: 382
</code>
It looks like our regex could use a bit of work so it doesn't grab singular letters like 's' or numbers, but it's definitely a good start. Tomorrow we'll put everything into a <code>Module</code> and back it with tests.</p>

<ul>
  <li>Time: 9:16 pm</li>
  <li>Mood: Relaxed, Tired</li>
  <li>Sleep: 6.5</li>
  <li>Hunger: 5</li>
  <li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Objects and Dot Syntax]]></title>
    <link href="http://robdodson.me/blog/2012/05/01/ruby-objects-and-dot-syntax/"/>
    <updated>2012-05-01T07:37:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/01/ruby-objects-and-dot-syntax</id>
    <content type="html"><![CDATA[<p>Coming from JavaScript I'm very accustomed to doing something like this:</p>

<p>``` javascript Javascript
var person = { name: 'Rob', city: 'San Francisco' }</p>

<p>console.log( person.city );   // 'San Francisco'</p>

<p>```</p>

<p>Using dot syntax to access a <code>Hash</code> is second nature to me. That's why I was surprised when I ran into the following error yesterday while writing some Ruby.</p>

<p>``` ruby Ruby
person = {name: 'Rob', city: 'San Francisco'}
 => {:name=>"Rob", :city=>"San Francisco"}</p>

<p>puts person.city</p>

<p>NoMethodError: undefined method `city' for {:name=>"Rob", :city=>"San Francisco"}:Hash
```</p>

<p>"Hmm, weird," I thought. I know I've seen dot syntax used in Ruby before..what gives?</p>

<h3>Dot Syntax and the Ruby Hash Object</h3>

<p>As it turns out Ruby does not support dot syntax for the <code>Hash</code> object. If I had wanted to access the <code>city</code> property from my previous example I should have done it using the symbol key like so:</p>

<p><code>ruby
person[:city]
 =&gt; "San Francisco"
</code></p>

<p>There are a few data structures that are very similar to <code>Hashes</code> and seeing those used in the wild perhaps threw me off. So I figured I'd write a post about the do's and dont's of dot syntax and how different object types react to it.</p>

<h4>Class</h4>

<p>The first and most obvious one is the <code>Class</code> object. Really I'm talking about instances of a <code>Class</code> here, for example an instance of class <code>Person</code> might have a <code>city</code> attribute. Here's what that would look like.</p>

<p>```ruby Person: Long Version
class Person
  def initialize(name, city)</p>

<pre><code>@name = name
@city = city
</code></pre>

<p>  end</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>  def city</p>

<pre><code>@city
</code></pre>

<p>  end
end</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #&lt;Person:0x007ff15412a8c0 @name="Rob", @city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
Since I've defined methods for both</code>name<code>and</code>city<code>, using dot syntax to access those properties basically means we're calling those methods. The methods just return the instance variables, acting as getters. You can shorten this by using</code>attr_reader<code>or</code>attr_accessor`.</p>

<p>```ruby Person: Short Version
class Person
  attr_accessor :name, :city
  def initialize(name, city)</p>

<pre><code>@name = name
@city = city
</code></pre>

<p>  end
end</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #&lt;Person:0x007ff15412a8c0 @name="Rob", @city="San Francisco"></p>

<p>person.city
 => "San Francisco"
```</p>

<h4>Struct</h4>

<p>The <code>Struct</code> object is another commonly used element which allows dot access to its attributes. Quoting from <a href="http://www.ruby-doc.org/core-1.9.3/Struct.html">the documentation</a>:</p>

<blockquote><p>A Struct is a convenient way to bundle a number of attributes together, using accessor methods, without having to write an explicit class.</p></blockquote>

<p>Examples speak louder than words so here's our <code>Person</code> again.</p>

<p>```ruby Person Struct
Person = Struct.new(:name, :city)
 => Person</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #<struct Person name="Rob", city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
As I understand it a</code>Struct<code>is basically sealed after you've given it an initial definition. This means that you can't keep tacking on properties like you can with a</code>Hash`</p>

<p>```ruby</p>

<h1>Continuing from above...</h1>

<p>person.age = 28
NoMethodError: undefined method `age=' for #<struct Person name="Rob", city="San Francisco"></p>

<p>person[:age] = 28
NameError: no member 'age' in struct
```</p>

<h4>OpenStruct</h4>

<p>Finally we come to the <code>OpenStruct</code> which has both dynamic attributes and dot syntax. <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">The documentation describes it like so</a>:</p>

<blockquote><p>An OpenStruct is a data structure, similar to a Hash, that allows the definition of arbitrary attributes with their accompanying values.</p></blockquote>

<p>And again here is our <code>Person</code> from before. Note that <code>OpenStruct</code> needs you to <code>require</code> it.
```ruby Person OpenStruct
require 'ostruct'</p>

<p>person = OpenStruct.new
 => #<OpenStruct></p>

<p>person.name = 'Rob'
 => "Rob"</p>

<p>person.city = 'San Francisco'
 => "San Francisco"</p>

<p>person.city
 => "San Francisco"
```</p>

<p>If you noticed, we didn't need to define the attributes of our <code>Person</code> before creating an instance of it. This means we could keep adding attributes indefinitely. Want your person to respond to <code>age</code>? Just tack it on.</p>

<p>```ruby
person.age = 28
 => 28</p>

<p>person.age
 => 28
```</p>

<p>For the sake of brevity you can pass in a <code>Hash</code> and <code>OpenStruct</code> will covert it for you.
```ruby
require 'ostruct'</p>

<p>person = OpenStruct.new(name: 'Rob', city: 'San Francisco')
 => #<OpenStruct name="Rob", city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
This all seems wonderful but there's one huge caveat which comes from the way</code>OpenStruct` finds all of these dynamic attributes. As <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">the documentation describes it</a>:</p>

<blockquote><p>An OpenStruct utilizes Ruby’s method lookup structure to and find and define the necessary methods for properties. This is accomplished through the method method_missing and define_method.</p>

<p>This should be a consideration if there is a concern about the performance of the objects that are created, as there is much more overhead in the setting of these properties compared to using a Hash or a Struct.</p></blockquote>

<p>Definitely keep that in mind if you're writing time sensitive code. In those situations you'll want to use a <code>Hash</code> or a <code>Struct</code> instead.</p>

<p><small>Source:<br />
<a href="http://www.ruby-doc.org/core-1.9.3/Class.html">http://www.ruby-doc.org/core-1.9.3/Class.html</a><br />
<a href="http://www.ruby-doc.org/core-1.9.3/Struct.html">http://www.ruby-doc.org/core-1.9.3/Struct.html</a><br />
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html</a><br />
<a href="http://stackoverflow.com/questions/9356704/unable-to-use-dot-syntax-for-ruby-hash">http://stackoverflow.com/questions/9356704/unable-to-use-dot-syntax-for-ruby-hash</a><br />
<a href="http://www.rubyist.net/~slagell/ruby/accessors.html">http://www.rubyist.net/~slagell/ruby/accessors.html</a>
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Tests in Sublime Text]]></title>
    <link href="http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text/"/>
    <updated>2012-04-29T09:26:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text</id>
    <content type="html"><![CDATA[<p>If you're lazy like me then you love to automate as much of your process as possible. Running tests from within your IDE is one of those tasks that screams for a keyboard shortcut. In full featured tools like RubyMine or Eclipse this is usually pretty straightforward. However many developers in the Ruby community seem to prefer more lightweight tools like TextMate, Vim and Sublime. Today we'll look at how to setup RubyTest in Sublime Text 2 so we can easily run tests with just a few hotkeys. The tests will be written in <a href="http://rspec.info/">Rspec</a> which should be familiar to most Rubyists.</p>

<h3>How to setup RubyTest in Sublime Text 2</h3>

<p>If you haven't installed the <a href="http://wbond.net/sublime_packages/package_control">Sublime Package Manager</a> go ahead and do that now. The package manager is a wonderful tool that lets us install and update plugins from within Sublime. After you have that installed you can hit <code>cmd-shift-p</code> to open up the Command Palette. Type the following <code>Install Package</code> and press Enter. This will bring up a list of available packages that we can install. You can also type <code>Discover Packages</code> which will take you to a page listing each plugin with a brief description.</p>

<p>Go ahead and type <code>RubyTest</code> and press Enter. You will see a progress indicator at the bottom of your editor. Once it's finished you should be able to click on <code>Tools &gt; RubyTest</code>.</p>

<h3>Running tests in Sublime Text 2</h3>

<p>I've put together <a href="https://github.com/robdodson/testing_demo">a sample project which you can download</a>. It has a Gemfile and a pair of contrived Rspec tests. Put it someplace where you can easily get to it using the command line. In order for RubyTest to work you have to open your projects from the CLI. This has to do with how certain load paths get setup and it's probably the cause of about 95% of RubyTest issues. Follow <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">these instructions</a> if you don't already have the <code>subl</code> command setup in your terminal.</p>

<p><code>cd</code> into the project folder and do a quick <code>bundle install</code>. When that's finished try to run
<code>
bundle exec rspec spec/
</code>
If you see test results then you know that rspec is good to go. Use <code>subl .</code> to open the project. You should see a list of files on your left hand sidebar. Navigate to the <code>spec/robot_spec.rb</code> file. If you're lucky you should be able to hit <code>cmd-shift-t</code> to run all of the tests within the spec. If succesful you'll see a console window that looks like this.</p>

<p><img class="center" src="/images/ruby_test_console.png" title="Ruby Test Console" ></p>

<p>Don't worry if it doesn't work the first time. Sublime and RubyTest are <em>very</em> finicky. Close Sublime and try to open it again from the command line.It might help to close any other Sublime projects you already have open or even quit the program entirely using <code>cmd-q</code>. You'll have to experiment a bit to get it all working.</p>

<p>Hopefully after all that you've got your tests showing up green. Now you can integrate RubyTest into your workflow and save all that alt-tabbing back and forth between the command line!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Ruby Dates]]></title>
    <link href="http://robdodson.me/blog/2012/04/28/playing-with-ruby-dates/"/>
    <updated>2012-04-28T07:20:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/28/playing-with-ruby-dates</id>
    <content type="html"><![CDATA[<p>One of <a href="https://vimeo.com/40633070">my previous projects</a> involved a ton of work using Flash's built in Date object. We ended up rolling our own Calendar library which was both tedious and time consuming to debug. Now that I'm digging into Ruby for my newest project, I wanted to see what features the language has to offer. So far I'm <em>really</em> impressed and that's after only a few hours of exploration. I'll detail some of the tricks I've learned along the way so hopefully other newcomers can benefit.</p>

<h3>Ruby Date Object Basics</h3>

<p>We can start off by firing up IRB and requiring the <code>date</code> class. Let's do a really simple example first and just generate today.</p>

<p>```
require 'date'</p>

<p>today = Date.today
 => #&lt;Date: 2012-04-28 ((2456046j,0s,0n),+0s,2299161j)>
```</p>

<p>Now lets try a bit of Ruby's sugar to generate tomorrow's date.</p>

<p><code>
tomorrow = today + 1
 =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt;
</code>
Pretty straightforward, right? Since there is usually more than one way to do something in Ruby we could have achieved the same results using any of the following.</p>

<p>```
today.succ
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)></p>

<p>today.next
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)></p>

<p>today.next_day
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)>
```</p>

<p>As <a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">someone on StackOverflow pointed out</a>: <code>Date</code> objects are also <code>Comparable</code>, so you can construct a <code>Range</code>. If you wanted to collect every day from the previous week into an array you could do the following:
<code>
last_week = today - 7
every_day_last_week = (last_week..today).to_a
</code></p>

<p>or...</p>

<p><code>
today.downto(today - 7).to_a
</code></p>

<p>There are also some cute booleans tossed into the mix for figuring out the day of the week.</p>

<p>```
today.friday?
 => false</p>

<p>today.saturday?
 => true
```</p>

<h3>How to Use Chronic</h3>

<p><a href="https://github.com/mojombo/chronic/">Chronic</a> is a Ruby natural language date/time parser written by <a href="http://tom.preston-werner.com/">Tom Preston-Werner</a> (<a href="https://twitter.com/#!/mojombo">@mojombo</a>) which takes surprisingly human readable text and converts it to dates.</p>

<p>Covering everything that Chronic supports could take a while so definitely go check out the docs. Below is just a quick example to demonstrate how cool it is.</p>

<p>```
require 'chronic'</p>

<p>Chronic.parse('yesterday')
 => 2012-04-27 12:00:00 -0700</p>

<p>Chronic.parse('yesterday').to_date
 => #&lt;Date: 2012-04-27 ((2456045j,0s,0n),+0s,2299161j)></p>

<p>Chronic.parse('last monday')
 => 2012-04-23 12:00:00 -0700</p>

<p>Chronic.parse('3 months ago this friday at 3:45pm')
 => 2012-02-04 15:45:00 -0800
```</p>

<h3>How to Use Active Support for Dates</h3>

<p>Active Support is a library extracted from Rails which adds a ton of sugar to the Ruby language. As the author's describe it:</p>

<blockquote><p>Active Support is a collection of various utility classes and standard library extensions that were found useful for Rails. All these additions have hence been collected in this bundle as a way to gather all that sugar that makes Ruby sweeter.</p></blockquote>

<p>It's broken into several pieces so you can choose to load only the parts that you'll actually be using. <em>I'm going to write an upcoming article on Active Support. For now we'll just require it all.</em></p>

<p>```
require 'active_support/all'</p>

<p>t = Date.today
 => Sat, 28 Apr 2012</p>

<p>t.class
 => Date
```</p>

<p>You'll notice that Active Support has changed the way our date's <code>to_s</code> is formatted so it's more human readable. It also added shortcuts for creating Dates on either side of today.</p>

<p>```
yesterday = Date.yesterday
 => Fri, 27 Apr 2012</p>

<p>tomorrow = Date.tomorrow
 => Sun, 29 Apr 2012
```</p>

<p>Included as well are some nice convenience booleans: <code>past?</code>, <code>today?</code>, and <code>future?</code>
<code>
tomorrow.future?
 =&gt; true
</code></p>

<p>If you've ever had to write a Calendar that can support weeks, especially those that straddle two different months, you'll appreciate the simplicity of the helpers Active Support adds.</p>

<p>```
today = Date.today
 => Sat, 28 Apr 2012</p>

<p>today.beginning_of_week
 => Mon, 23 Apr 2012</p>

<p>today.next_week
 => Mon, 30 Apr 2012</p>

<h1>You can also choose to make the week start on an arbitrary day, like Sunday</h1>

<p>today.beginning_of_week(:sunday)
 => Sun, 22 Apr 2012
```</p>

<p>We aren't limited to weeks though. Active Support adds methods for days, months and years. For example:</p>

<p><code>
today.years_ago(10)
 =&gt; Sun, 28 Apr 2002
</code></p>

<p>By extending <code>FixNum</code> to support additional Date methods certain operations become much more readable.</p>

<p><code>
today + 1.year
 =&gt; Sun, 28 Apr 2013
</code></p>

<p>These extensions are referred to as <code>durations</code> <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">in the documentation</a>.
Which brings us back to one of our first examples of finding the date 7 days ago. With Active Support it's as easy as...</p>

<p><code>
7.days.ago
 =&gt; 2012-04-21 08:44:02 -0700
</code></p>

<p>Pretty cool! Active Support adds <em>A LOT</em> more than just Date helpers and I'll try to cover it more in some future articles. Definitely <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">check out the documentation</a> (you can <a href="http://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-date">skip to the Date section</a> since it's pretty immense).</p>

<p><small>Source:<br />
<a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby</a>
<a href="http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm">http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm</a>
<a href="http://guides.rubyonrails.org/active_support_core_extensions.html">http://guides.rubyonrails.org/active_support_core_extensions.html</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup PostgreSQL for Rails and Heroku]]></title>
    <link href="http://robdodson.me/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku/"/>
    <updated>2012-04-27T07:33:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku</id>
    <content type="html"><![CDATA[<h3>Install PostgreSQL Locally</h3>

<p>Ryan Bates has already put together a wonderful Railscast on this topic so feel free to <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">jump over there</a> to view it. My main goal in writing this post was to distill down what he said, point out a small gotcha along the way and offer some additional tools.</p>

<p>There are a few different options for installing PostgreSQL. The first one, which Ryan outlines, is to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> and simply do a <code>brew install postgresql</code>. Some folks might not be comfortable with that process so I wanted to also recommend the new <a href="http://postgresapp.com/">PostgreSQL.app</a> from the team at <a href="http://www.heroku.com/">Heroku</a>. If you're more used to tools like <a href="http://www.mamp.info/en/index.html">MAMP</a> then the PostgreSQL.app might be a bit more your style.</p>

<p>If you go the Homebrew route make sure you type in <code>initdb /usr/local/var/postgres</code> after the install finishes to init your first database. The installer will also mention some commands you can use to have PostgreSQL auto-start whenever you turn on your computer. I wasn't a big fan of this approach so instead I created two aliases in my .bash_profile.</p>

<p><code>
alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
</code>
With these I can just type <code>pg-start</code> to fire up Postgres and <code>pg-stop</code> when I want to shut it down.</p>

<h3>Change Rails Database to PostgreSQL</h3>

<p>The next thing you'll want to do is either convert an existing project to PostgreSQL or create a new rails project and set PostgreSQL as the database.</p>

<p>Creating a new rails project for Postgres is as easy as <code>rails new blog -d postgresql</code>. After running this command you'll also need to call <code>rake db:create:all</code> to create a new database.</p>

<p>To convert an existing project you'll want to update your Gemfile to include the <code>pg</code> gem. A basic Gemfile might look something like this:</p>

<p>``` ruby
source 'https://rubygems.org'</p>

<p>gem 'rails', '3.2.3'
gem 'pg', '~>0.13.2'</p>

<p>group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier', '>= 1.0.3'
end</p>

<p>gem 'jquery-rails'</p>

<p>```
You'll also need to update your config/database.yml to look for Postgres instead of SQLite or MySQL.</p>

<p>``` yaml config/database.yml
development:
  adapter: postgresql
  encoding: unicode
  database: [insert your dev database name]
  pool: 5
  username: [insert your user name]
  password:</p>

<p>test:
  adapter: postgresql
  encoding: unicode
  database: [insert your test database name]
  pool: 5
  username: [insert your user name]
  password:
<code>``
Since we haven't created any Postgres user accounts both Homebrew and PostgreSQL.app will simply use our current username as the login. The password can remain blank. After this is done you'll also need to call</code>rake db:create:all` to create the new database.</p>

<h3>Connect a Rails Project to a PostgreSQL Database on Heroku</h3>

<p>If your project isn't already under version control then now would be a good time to set that up.</p>

<p><code>
git init
git add .
git commit -m 'Initial commit!'
</code>
Next we'll create a free Heroku instance
<code>
heroku create --stack cedar
</code>
After that's done we'll simply push our project up there.
<code>
git push heroku master
</code>
You might see some deprecation warnings about vendor plugins. For now you can (probably) safely ignore those.</p>

<p>Here's one little gotcha that I seemed to run into. If you try to access your site on Heroku using the <code>heroku open</code> command you might get an error page. You have to make sure to also call <code>heroku run rake db:create:all</code> otherwise your production database will not be in place and your app will fail to connect to it. Speaking of production databases, you should also note that Heroku will overwrite whatever you put into your config/database.yml so you don't have to worry about figuring out all the connection details for their shared services...it'll all just work. Sweet!</p>

<h3>PostgreSQL GUI</h3>

<p>One last tip re: your new Postgres setup. If you're just starting out like me then your command line fu is probably not as strong as you'd like it to be. Personally I really like having a nice GUI to visualize the tables in my database. For MySQL I usually use the awesome (and free) <a href="http://www.sequelpro.com/">SequelPro</a>. For PostgreSQL you can use <a href="http://inductionapp.com/">Induction</a>. It doesn't seem like they have a downloadable binary on their website (weird?) but you can grab one out of <a href="https://github.com/Induction/Induction/downloads">the Github repo's downloads page</a>. Connecting to your Postgres instance can be a little tricky, you have to make sure to use the PostgreSQL adapter, localhost as the hostname, your computer's username as the user and the password can remain blank. You also <em>HAVE</em> to give it a database name (even though it says it's optional) or it will throw a <code>FATAL:  database [your username] does not exist</code>. Here's a screenshot of what mine looks like:</p>

<p><img class="center" src="/images/induction_screen.png" title="'Induction Login Screen'" ></p>
]]></content>
  </entry>
  
</feed>
