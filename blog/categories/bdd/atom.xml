<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: BDD | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/bdd/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-30T10:57:52-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing AMD Backbone Modules]]></title>
    <link href="http://robdodson.me/blog/2012/05/29/testing-backbone-modules/"/>
    <updated>2012-05-29T08:03:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/29/testing-backbone-modules</id>
    <content type="html"><![CDATA[<p>Continuing from <a href="http://robdodson.me/blog/2012/05/28/mocking-requests-with-mocha-chai-and-sinon/">yesterday's post</a> I'm going to start to incorporate Backbone into my BDD setup. I'm going to use the <a href="https://github.com/tbranyen/backbone-boilerplate">Backbone Boilerplate</a> and <a href="https://github.com/backbone-boilerplate/grunt-bbb">grunt-bbb</a> to setup a new project. If you're new to the boilerplate or grunt-bbb <a href="http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate/">checkout my previous post on getting started.</a></p>

<h3>Shiny and new</h3>

<p>I've created a new directory called <code>amd-tests</code> and once I <code>cd</code> inside I run <code>bbb init</code> to template out a new project. By default the boilerplate uses Require.js and AMD modules and we have a little example one already created for us. It's called, well, Example :) We'll use this to create our model for testing since I know that everyone should be on the same page with this module.</p>

<p>I'm going to change our model's name from Example.Model to Example.Photo so our terminalogy won't get muddy. We'll give it some default properties for <code>src</code> and <code>caption</code>. Later on we'll test that a freshly created model has these same defaults. When we're done setting up our <code>/app/example.js</code> file should look like this. Keep in mind that the boilerplate adds a lot of stuff to get us started so you can ignore everything that isn't Example.Photo</p>

<p>``` js /app/example.js
define([
  "namespace",</p>

<p>  // Libs
  "use!backbone"</p>

<p>  // Modules</p>

<p>  // Plugins
],</p>

<p>function(namespace, Backbone) {</p>

<p>  // Create a new module
  var Example = namespace.module();</p>

<p>  // !!! Our awesome new model !!!
  Example.Photo = Backbone.Model.extend({</p>

<pre><code>defaults: {
  src: '/images/placeholder.jpg',
  caption: 'Waiting for content...'
}
</code></pre>

<p>  });</p>

<p>  Example.Collection = Backbone.Collection.extend({ /<em> ... </em>/ });
  Example.Router = Backbone.Router.extend({ /<em> ... </em>/ });</p>

<p>  // This will fetch the tutorial template and render it.
  Example.Views.Tutorial = Backbone.View.extend({</p>

<pre><code>template: "app/templates/example.html",

render: function(done) {
  var view = this;

  // Fetch the template, render it to the View element and call done.
  namespace.fetchTemplate(this.template, function(tmpl) {
    view.el.innerHTML = tmpl();

    // If a done function is passed, call it with the element
    if (_.isFunction(done)) {
      done(view.el);
    }
  });
}
</code></pre>

<p>  });</p>

<p>  // Required, return the module for AMD compliance
  return Example;</p>

<p>});
```
Now comes the rather tricky part. We need to create a test runner HTML file that can incorporate mocha, chai and sinon. It also has to load our Example module and maintain all of that module's dependencies. I spent a <em>ton</em> of time on IRC today sorting this out so here is my current best stab at things based on some <a href="https://gist.github.com/2655876">VERY generous gists</a> from <a href="https://github.com/kmiyashiro">Kelly Miyashiro.</a></p>

<p>Let's start with the index.html file that'll be our test runner:</p>

<p>``` html test/index.html
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/require.js"></script>
  <script src="mocha/mocha.js"></script>
  <script src="sinon/sinon.js"></script>
  <script src="config.js"></script>
</head>
<body>
  <script></p>

<pre><code>require([
  '../test/test.example'
], runMocha);
</code></pre>

<p>  </script>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>The first thing we do is add require.js, then mocha and sinon. Why no Chai? Good question. Kelly didn't do it so I didn't do it. If anyone wants to cite the pros and cons of this approach I'm all ears. Next we add our own config.js that is specific to our tests. We might have a config.js somewhere else that runs our main app but we'll also need this one to run our tests. Finally we have a script block sitting on top of our <code>#mocha</code> div. The script block loads in our specs (in this case I've only written one but you can do multiple specs here). A final argument to the require call is <code>runMocha</code>. Essentially this is the function that is executed <em>AFTER</em> the modules have finished loading. In our case runMocha is located inside the new config.js we've defined just for our tests. Let's take a look at it now.</p>

<p>``` js test/config.js
require.config({</p>

<pre><code>// Base URL relative to the test runner
// Paths are relative to this
baseUrl: '../app',
paths: {
    // Testing libs
    'chai'          : '../test/chai/chai',
    'common'        : '../test/common',
    'jquery'        : '../assets/js/libs/jquery',
    'underscore'    : '../assets/js/libs/underscore',
    'backbone'      : '../assets/js/libs/backbone',
    'use'           : '../assets/js/plugins/use'
},
use: {
    backbone: {
        deps: ['use!underscore', 'jquery'],
        attach: 'Backbone'
    },
    underscore: {
        attach: '_'
    },
    mocha: {
        attach: 'mocha'
    }
},
priority: [
    'jquery',
    'underscore',
    'common'
]
</code></pre>

<p>});</p>

<p>mocha.setup({</p>

<pre><code>ui: 'bdd',
ignoreLeaks: true
</code></pre>

<p>});</p>

<p>// Protect from barfs
console = window.console || function() {};</p>

<p>var runMocha = function() {</p>

<pre><code>mocha.run();
</code></pre>

<p>};
```</p>

<p>Lots of stuff here but nothing to get alarmed about. <a href="http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate/">If you've read my previous getting started post you'll know all about the config.js file.</a> Go back and read the previous post if none of this makes sense to you. The thing to take note of is the <code>priority</code> array and the <code>runMocha</code> function at the bottom of the page. I don't have much experience with the priority array and I didn't find much documentation on it but Kelly uses it <a href="https://gist.github.com/2655876">in the gists</a> to make sure that jQuery, chai and any chai plugins are properly setup on the page.</p>

<p>``` js test/common.js
// Include and setup all the stuff for testing
define(function(require) {</p>

<pre><code>window.$ = window.jQuery = require('jquery');
window.chai         = require('chai');
window.expect       = chai.expect;
</code></pre>

<p>});
```</p>

<p>Good practice? Bad practice? I'm not sure and I would love comments if anyone has a take on things. Underneath the priority array is a setup function which sends some configuration parameters to mocha. <code>ignoreLeaks</code> is useful because it's easy for mocha to see jQuery or any other global variable as a good reason to abort a test. IMO that's what JSLint/Hint is for, and bailing everytime you see a global is going to make testing 3rd party code especially difficult. My advice, leave it off. Finally we call <code>mocha.run()</code> via the <code>runMocha</code> function. Remember that this function is executed inside our test runner after all the specs are loaded, like so:</p>

<p>``` html test/index.html</p>

<script>
    require([
      '../test/test.example'
    ], runMocha);
  </script>


<p>```</p>

<p>Doing it this way guarantees that all the dependencies our module needs will be loaded before we start running our tests.</p>

<h3>Oh right, the tests!</h3>

<p>Wow! OK so hopefully you're still with me because after all of that we <em>still</em> need to generate some tests. Since it's getting late I'm just going to put together a really simple spec to make sure our default values are being set on the model.</p>

<p>I've created a file called <code>test.example.js</code> which will test our <code>Example</code> module.</p>

<p>``` js test/test.example.js
define(function(require) {
  var Example = require('modules/example');</p>

<p>  describe('Example', function() {</p>

<pre><code>describe('Photo', function() {
  var photo = new Example.Photo();
  it('should have proper defaults', function(done) {
      expect(photo.get('src')).to.equal('/images/placeholder.jpg');
      expect(photo.get('caption')).to.equal('Waiting for content...');
      done();
  });
});
</code></pre>

<p>  });
});
```</p>

<p>It isn't amazing but it gets us started testing our module. I'm explicitly calling <code>done()</code> at the end of our test because I saw mention on StackOverflow that you should do this when testing AMD modules in the browser with mocha otherwise you can get false passing tests. Not sure if it's absolutely necessary but I guess better safe than sorry!</p>

<p>At this point I'm exhausted and hopefully you have a decent head start on your tests. I know that this post jumps around a lot so please take a moment <a href="https://github.com/robdodson/backbone-boilerplate-mocha">to grab the repo I've posted which contains all the source code.</a> Again. Caveat. I'm learning along with you so there are lots of newbie mistakes being made, I'm sure. I really want to hear your feedback if you have any. Good luck!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here</a></p>

<ul>
<li>Time: 8:04 am</li>
<li>Mood: Awake, Antsy</li>
<li>Sleep: 6</li>
<li>Hunger: 3</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking Requests with Mocha, Chai and Sinon]]></title>
    <link href="http://robdodson.me/blog/2012/05/28/mocking-requests-with-mocha-chai-and-sinon/"/>
    <updated>2012-05-28T11:20:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/28/mocking-requests-with-mocha-chai-and-sinon</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/05/27/testing-backbone-boilerplate-with-mocha-and-chai/">After a bit of a rocky start yesterday</a> I've finally got Mocha and Chai running in the browser which is great. Today I'd like to test out some of the async functionality of Mocha. This seems to be the big selling point for most people so we'll kick the tires a bit.</p>

<h3>Basic Async Tests with Mocha and Chai</h3>

<p>I wrote a little Node service that we'll consume for testing purposes. This is my first <a href="http://nodejs.org/">Node</a> and <a href="http://expressjs.com/">Express</a> app so apologies if it's lamesauce. I used the <code>express</code> command to boilerplate a project called <code>pickles</code> with some very basic routes:</p>

<p>``` js
// Routes</p>

<p>var count = 100;</p>

<p>app.get('/', function(req, res) {
  res.send('Welcome to the Pickle Store!');
});</p>

<p>app.get('/pickles', function(req, res) {
  res.json({</p>

<pre><code>count: count,
message: 'oh boy, ' + count + ' pickles!'
</code></pre>

<p>  });
});</p>

<p>app.get('/pickles/add/:num', function(req, res) {
  count += parseInt(req.params.num);
  res.json({</p>

<pre><code>add: req.params.num,
message: 'you added ' + req.params.num + ' pickles to the pickle barrel!'
</code></pre>

<p>  });
});</p>

<p>app.listen(3000, function(){
  console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
});
```
We'll need to make sure our node service is running for our tests to work and all of our URLs will point at localhost:3000. Obviously you wouldn't want this for a production setting but it'll be fine for demonstration purposes.</p>

<p>Here is our really simple Mocha spec. We're actually creating a <code>pickelStore</code> object in the spec file itself so we can test against it.</p>

<p>``` js test.pickles.js
var expect = chai.expect;</p>

<p>var pickleStore = {
  pickles: function() {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>pickleStore.pickles();
</code></pre>

<p>  });
});
```</p>

<p>I just want to see if the ajax methods will run and hit our Node service but I'm running into the following issue in Chrome:</p>

<p><code>
XMLHttpRequest cannot load http://localhost:3000/pickles. Origin null is not allowed by Access-Control-Allow-Origin.
</code>
Bummer... :(</p>

<p>OK, what's going on here... To StackOverflow! <a href="http://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin/8456586#8456586">Aaaand we have our response.</a> After a bit of googling I came across <a href="http://www.stoimen.com/blog/2010/11/19/diving-into-node-js-very-first-app/">this post</a> which mentions adding <code>res.header('Access-Control-Allow-Origin', '*');</code> to my Node responses. That does the trick. I also found <a href="http://www.stoimen.com/blog/2010/11/19/diving-into-node-js-very-first-app/">this post</a> which describes setting up <a href="https://developer.mozilla.org/en/http_access_control">CORS</a> with Express.</p>

<p>OK hopefully we're done with Node for now. I don't want this to turn into a node tutorial... Let's see if we can get the tests to perform using Mocha. We'll need some way to mock and spy on the ajax because I don't want to test the data coming from the actual service. I've realized I want to <em>simulate</em> the service for client-side Mocha tests. In a future tutorial I'll test the service itself using the Node aspect of Mocha. Kind of silly to lead off this way but whatever, moving on!</p>

<h3>Enter Sinon.js</h3>

<p>I'm going to use <a href="http://sinonjs.org/">Sinon.js</a> to help me mock, stub, fake, spy and do whatever the heck else I need to make sure my client code is solid. After downloading the js file for Sinon you can just add it to our test/index.html under the line where we added mocha.</p>

<p>``` html
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/jquery.js"></script>
  <script src="chai/chai.js"></script>
  <script src="mocha/mocha.js"></script>
  <script src="sinon/sinon.js"></script>
  <script>mocha.setup('bdd');</script>
  <script src="test.pickles.js"></script>
  <script></p>

<pre><code>$(function() {
  mocha.run();
})
</code></pre>

<p>  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>Now we can use Sinon in our <code>test.pickles.js</code> file to get a handled on our ajax. Let's first test that an ajax call is made when we run the <code>pickles()</code> method of the <code>pickleStore</code> object. We'll make sure this first test fails, then we'll change the spec to make it pass.</p>

<p>``` js test.pickles.js
var expect = chai.expect;</p>

<p>var pickleStore = {
  pickles: function() {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy.
beforeEach(function() {
  sinon.spy($, 'ajax');
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.false; // see if the spy WASN'T called
  done(); // let Mocha know we're done async testing
});
</code></pre>

<p>  });
});
```
<img class="center" src="https://s3.amazonaws.com/robdodson/images/first_failing_ajax_test.png" title="'Our first failing test with Mocha, Chai and Sinon. Yay!'" ></p>

<p>Changing this line <code>expect($.ajax.calledOnce).to.be.false;</code> from <code>false</code> to <code>true</code> should make our test pass. Yay, first async test in the bag! Next let's try to fake a response from the server. But I'm realizing that the succesful server response should <em>do</em> something to my pickleStore object, otherwise why do I care about the data? So I'm going to update pickelStore with the following success callback on its pickles method:</p>

<p>``` js test.pickles.js
var pickleStore = {
  count: 0,
  status: '',
  pickles: function() {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    self.count = parseInt(data.count);
    self.status = data.status;
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>... .
```</p>

<p>Now we can test what happens after the server sends a succesful response. But how do we get that response and how do we force the success callback? For that we'll need to use Sinon's <code>stub.yieldsTo</code> method. It's mentioned in <a href="http://sinonjs.org/docs/#stubs">the docs on this page</a> if you scroll down. <code>yieldsTo</code> lets us direct the path of our spy so it will not only pretend to be jQuery's <code>ajax</code> method, but it will also force itself into the <code>success</code> callback with an optional hash of parameters which simulate our service response. Sweet! We'll have to revise the <code>beforeEach</code> in our spec though otherwise Sinon will complain that we're wrapping <code>ajax</code> twice. The updated spec should look like this. Again, take note that we're going to make it fail first by expecting a count of 99 pickles instead of 100.</p>

<p>``` js test.pickles.js
... .</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy. This spy will also come with
// some success data.
beforeEach(function() {
  sinon.stub($, 'ajax').yieldsTo('success', {
    count: '100',
    message: 'oh boy, 100 pickles!'
  });
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.true;
  done();
});

it('should update the count', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.count).to.equal(99);
  done();
});
</code></pre>

<p>  });
});
```</p>

<p>Failing as expected. Aaaaand we change the expected count to 100, voila! Passing tests again!</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/passing_yield_test.png" title="'Passing test with Sinon's yieldTo'" ></p>

<p>I'm adding the test for the status update as well so our final <code>#pickles</code> spec should look like this:</p>

<p>``` js test.pickles.js
describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy. This spy will also come with
// some success data.
beforeEach(function() {
  sinon.stub($, 'ajax').yieldsTo('success', {
    count: '100',
    message: 'oh boy, 100 pickles!'
  });
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.true;
  done();
});

it('should update the count', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.count).to.equal(100);
  done();
});

it('should update the status', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.status).to.equal('oh boy, 100 pickles!');
  done();
});
</code></pre>

<p>  });
});
```</p>

<p>Now let's test the <code>#add</code> method before calling it a day. This method is interesting because all it can really do is update our status message. However, once it's called the value returned by <code>pickles()</code> should have incremented by whatever amount was passed to <code>add()</code>. Let's start by updating our <code>pickleStore</code> so it properly updates the status message after we've called add.</p>

<p>``` js test.pickles.js
var pickleStore = {
  count: 0,
  status: '',
  pickles: function() {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    self.count = parseInt(data.count);
    self.status = data.message;
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    self.status = data.message; // &lt;-- update the status message!
  }
});
</code></pre>

<p>  }
};
```</p>

<p>Now that that's in there we'll write a failing spec.</p>

<p>``` js test.pickles.js
describe('#add', function() {</p>

<p>  var amount = 11;</p>

<p>  beforeEach(function() {</p>

<pre><code>sinon.stub($, 'ajax').yieldsTo('success', {
  add: amount,
  message: 'you added ' + amount + ' pickles to the pickle barrel!'
});
</code></pre>

<p>  });</p>

<p>  afterEach(function() {</p>

<pre><code>$.ajax.restore();
</code></pre>

<p>  });</p>

<p>  it('should update the status with the correct amount', function(done) {</p>

<pre><code>pickleStore.add(amount);
expect(pickleStore.status).to.equal('you added ' + 99 + ' pickles to the pickle barrel!');
done();
</code></pre>

<p>  });
});
```</p>

<p>This is not unlike our previous spec, in fact it does even less since we're not checking count.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/failing_add_test.png" title="'Another failing test.'" ></p>

<p>To make the test pass we change the 99 to <code>amount</code>. I originally wrote the add method thinking I would go back and check the total number of pickles but I've realized now that really that's more of a test for the service and not the front end. The front end shouldn't care if that arithmetic is happening properly, it should just consume data and update its UI. For tomorrow's post I'll try to get an AMD module in here so we can start playing with Backbone again. Thanks!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 11:21 am</li>
<li>Mood: Irritated, Antsy</li>
<li>Sleep: 8</li>
<li>Hunger: 5</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Mocha and Chai]]></title>
    <link href="http://robdodson.me/blog/2012/05/27/testing-backbone-boilerplate-with-mocha-and-chai/"/>
    <updated>2012-05-27T14:08:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/27/testing-backbone-boilerplate-with-mocha-and-chai</id>
    <content type="html"><![CDATA[<p>Since I was previously doing so much RSpec I want to try to bring some of that over to my JavaScript work. Lately I've been working with the Backbone Boilerplate which is a wonderful jump-start for folks who want to get up and running with AMD and Backbone. Today I'm going to see if I can get a working BDD setup going which will run some very basic tests. In a future post I'll use this new setup to do some BDD with Backbone Boilerplate.</p>

<h3>Setting up Mocha and Chai</h3>

<p>I chose Mocha over Jasmine because I've already worked with Jasmine so there wasn't much mystery there and also because I've heard really good things about Mocha. I think it's cool that if I choose to do a Node.js project Mocha will be able to test both my server and client code.</p>

<p>Unfortunately the documentation for both Mocha and Chai is rather terse when it comes to actually explaining how to get either library working for client side testing. I guess that's understandable since their primary focus is Node but after over an hour of poking around both sites I still don't have anything that functions...</p>

<p>Copying over both the mocha and chai directories into my project I've noticed that each one has a test/browser folder which is refered to in the documentation. Seems like this is how I run my specs. Mocha has a failing set of specs on its opts.html file but otherwise everything seems to pass. Chai has failures in its spec regarding its deep equals operations... Let's see if we can forge ahead and write a test in just mocha.</p>

<p>Here's my html runner setup:</p>

<p>``` html
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/jquery.js"></script>
  <script src="mocha/mocha.js"></script>
  <script>mocha.setup('bdd')</script>
  <script src="test.foobar.js"></script>
  <script></p>

<pre><code>$(function() {
  mocha.run();
})
</code></pre>

<p>  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>And here's my first failing test:</p>

<p>``` js
describe('Foobar', function() {
  describe('#sayHello()', function() {</p>

<pre><code>it('should return some text', function() {
  var foobar = {
    sayHello: function() {
      return 'Hello World!';
    }
  };

  assert(foobar.sayHello() === 'funky chicken');
})
</code></pre>

<p>  })
})
```</p>

<p>Using just the above I see the mocha runner fire up but then it immediately breaks saying that <code>assert</code> is not defined. Well...great. <a href="http://visionmedia.github.com/mocha/#browser-support">I'm basing my work on this example</a> but I realize now that I removed the line which included <code>expect.js</code>. Without expect.js we don't have anything to do exceptions for us because Mocha doesn't include any by default.</p>

<p><img class="center" src="/images/no_assert.png" title="'Assert is not defined" ></p>

<p>Looking at some other Mocha examples in the github repo I noticed that they explicitly define the <code>assert</code> method inside the runner. We'll do the same to get things working. Here's my updated runner which now functions as expected. Note the addition of <code>assert</code> after we call <code>mocha.setup('bdd')</code>.</p>

<p>``` js
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/jquery.js"></script>
  <script src="mocha/mocha.js"></script>
  <script>mocha.setup('bdd')</script>
  <script></p>

<pre><code>function assert(expr, msg) {
  if (!expr) throw new Error(msg || 'failed');
}
</code></pre>

<p>  </script>
  <script src="test.foobar.js"></script>
  <script></p>

<pre><code>$(function() {
  mocha.run();
})
</code></pre>

<p>  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>Since our <code>assert</code> method takes a <code>msg</code> param we can add that to our test so we get some useful feedback when it fails. Here's the updated spec.</p>

<p>``` js
describe('Foobar', function() {
  describe('#sayHello()', function() {</p>

<pre><code>it('should return some text', function() {
  var foobar = {
    sayHello: function() {
      return 'Hello World!';
    }
  };

  assert(foobar.sayHello() === 'funky chicken', 'Was expecting "Hello World!"');
})
</code></pre>

<p>  })
})
```</p>

<p>That should fail and give us the appropriate message. Changing 'funky chicken' to 'Hello World!' will make the test pass. Yay that only took a few hours...</p>

<p>OK, let's forge ahead and see if we can get chai working so we can use some nicer expectations than our weak <code>assert</code>. I'm including chai.js in place of our <code>assert</code> function.</p>

<p>```
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/jquery.js"></script>
  <script src="chai/chai.js"></script> <!-- added chai.js instead of assert -->
  <script src="mocha/mocha.js"></script>
  <script>mocha.setup('bdd')</script>
  <script src="test.foobar.js"></script>
  <script></p>

<pre><code>$(function() {
  mocha.run();
})
</code></pre>

<p>  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>Next we need to update our spec. Chai has 3 different styles of assertions: <code>assert</code>, <code>expect</code> and <code>should</code>. I'll show you how to use each in our foobar spec:</p>

<p>``` js
var assert = chai.assert,</p>

<pre><code>expect = chai.expect,
should = chai.should(); // Note that should has to be executed
</code></pre>

<p>var foobar = {
  sayHello: function() {</p>

<pre><code>return 'Hello World!';
</code></pre>

<p>  }
};</p>

<p>describe('Foobar', function() {
  describe('#sayHello()', function() {</p>

<pre><code>it('should work with assert', function() {
  assert.equal(foobar.sayHello(), 'funky chicken!');
})

it('should work with expect', function() {
  expect(foobar.sayHello()).to.equal('funky chicken!');
})

it('should work with should', function() {
  foobar.sayHello().should.equal('funky chicken!');
})
</code></pre>

<p>  })
})
```</p>

<p><img class="center" src="/images/failing_chai_tests.png" title="'Our failing Chai tests'" ></p>

<p>Changing all those funky chickens to 'Hello World!' should get the tests passing again and now we can use any syntax we like.</p>

<p><img class="center" src="/images/passing_chai_tests.png" title="'Finally some passing Chai tests!'" ></p>

<p>Now all is well and good except the tests that come with Chai are failing in a few places. It looks like some of Chai's methods are borked on my system.</p>

<p><img class="center" src="/images/broken_chai_tests.png" title="'Chai failing its own tests'" ></p>

<p>That does <em>not</em> fill me with confidence. I think there's a very high probability that being a newbie I'm doing something wrong so <a href="https://twitter.com/rob_dodson/status/206893206435151872/photo/1">I've tweeted to Jake Luer, the author of Chai, to figure out if perhaps I'm missing something or if the tools are actually broken.</a> In the meantime I'm not comfortable using a testing framework that's broken.</p>

<p>Sigh... well tomorrow I'll try to import some modules and if Jake hasn't gotten back to me by then I'll use Jasmine to do those tests. Till then!</p>

<ul>
<li>Update: Looks like I managed to clone Chai right as they were updating the repo. Pulling the latest fixed everything. See the comment thread below*</li>
</ul>


<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 2:09 pm</li>
<li>Mood: Awake, Caffeinated, Curious</li>
<li>Sleep: 7</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed with Tests Pt. 8]]></title>
    <link href="http://robdodson.me/blog/2012/05/16/object-oriented-scraper-backed-with-tests-pt-8/"/>
    <updated>2012-05-16T07:42:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/16/object-oriented-scraper-backed-with-tests-pt-8</id>
    <content type="html"><![CDATA[<p>Yesterday's I refactored my specs and crawler to support ignoring selections. While I started parsing the metadata I quickly realized that certain bits were rather specific and needed to have custom parsing methods. Today I'm going to write some format objects to help with all that.</p>

<p>Our metadata on the page looks like this:</p>

<p><code>
Time: 7:42 am
Mood: Awake, Alert, Focused
Sleep: 6
Hunger: 0
Coffee: 0
</code></p>

<p>Sleep, hunger and coffee are all floats, so one object could be just <code>FloatFormat</code>. Mood should produce an <code>Array</code> of objects so we could have a <code>CollectionFormat</code>. Finally time is going to combine the time listed in the metadata and the post date. We'll make a <code>DateTimeFormat</code> for that. These could all be methods of one big Format object as well but experience tells me that you need to be careful of monolithic actors that consume tons of different data types and spit out results. Those classes have a tendency to bloat very easily as project requirements change. I think it's better to produce classes which can be extended or abstracted as needs arise.</p>

<p>So we know <em>who</em> is going to format but we still don't know <em>how</em>. I think I'd like to build a manifest which matches the metadata category to a format. Maybe something like this?</p>

<p><code>ruby
{
  'Time'    =&gt; DateTimeFormat,
  'Mood'    =&gt; CollectionFormat,
  'Sleep'   =&gt; FloatFormat,
  'Hunger'  =&gt; FloatFormat,
  'Coffee'  =&gt; FloatFormat
}
</code></p>

<p>I could probably look at each item and "detect" what kind of format it needs but I'd rather be explicit. If, for instance, I want to add another format, it's a lot easier to just change my manifest file vs. hacking on some detection scheme. I think we can just produce this manifest file in YAML and load it in at runtime. One thing I don't like about this approach is that it specifically names our format classes. You could generalize it so that it just matches a category to the desired output data, for instance <code>'Coffee' =&gt; Float</code> but then you run into problems with flexibility. What if Coffee still needed to output a float but had to go through a different Format than Hunger or Sleep? With that in mind we'll stick to the plan already laid out.</p>

<p><code>yaml tentacles/lib/tentacles/formats.yml
time:     DateTimeFormat
mood:     CollectionFormat
sleep:    FloatFormat
hunger:   FloatFormat
coffee:   FloatFormat
</code></p>

<h3>The Format object</h3>

<p>I would love it if I could use the Format object as a module and just call a method on it from Crawler. It might look like this:</p>

<p>```ruby
def metadata_by_selector(selector)
  node = nodes_by_selector(selector).first
  metadata = {}
  node.children.each do |child|</p>

<pre><code>Tentacles::Format.insert(child, metadata)         
</code></pre>

<p>  end    <br/>
end
<code>``
The only problem is</code>Format` needs to load in and parse its formats.yml file before it's any good to us. There's some interesting talk of the <a href="http://www.subelsky.com/2008/05/using-rubys-autoload-method-to.html">Module#autoload method</a> but that's not quite what I need...</p>

<p>Seems like I can't find any good documentation on this so instead we'll make it an instance of the class. Also I'm lazy so I'm going to have that instance load its own formats.yml file. Normally I like to only have one entry point for configuration files but...whatever.</p>

<h3>How do I convert a string into a class name in Ruby?</h3>

<p>Well we know we can load our YAML file but all of our format classes are going to come in as strings. I did some digging to figure out how to convert the string into an actual class that can then be instantiated. If you just want to convert a String into a class you can use <code>Object.const_get('Foobar').new</code> but that's not going to work for us since our code is wrapped in a module. To convert a string into a module class we'll need to use the name of our module: <code>Tentacles.const_get('DateTimeFormat').new</code>.</p>

<p>With that in mind I want to spec out a simple test that passes in string of metadata and receives a printed notification that the right formatter has been created. We'll then refactor it to actually use the formatter on the string.</p>

<p>```ruby tentacles/spec/format_spec.rb
require_relative '../lib/tentacles/format'
require_relative '../lib/tentacles/date_time_format'</p>

<p>describe Tentacles::Format do
  describe "when asked to parse some metadata" do</p>

<pre><code>it "should create the right formatter" do
  @format = Tentacles::Format.new
  @format.parse('Time: 8:03 am').should be_an_instance_of(Tentacles::DateTimeFormat)
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby tentacles/lib/format.rb
require 'yaml'
require_relative 'date_time_format'</p>

<p>module Tentacles
  class Format</p>

<pre><code>def initialize
  @categories = YAML.load(File.open(File.dirname(__FILE__) + '/formats.yml'))
end

def parse(data)
  category = data.split(':')[0]
  category.downcase!
  Tentacles.const_get(@categories[category]).new
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby tentacles/lib/date_time_format.rb
module Tentacles
  class DateTimeFormat</p>

<pre><code>def initialize
  puts 'DateTimeFormat created!'
end
</code></pre>

<p>  end
end
```</p>

<p>Now let's take it a step further so we can convert an actual time into a DateTime object. Here's our updated spec:</p>

<p>```ruby
require_relative '../lib/tentacles/format'
require 'date'</p>

<p>describe Tentacles::Format do
  describe "when asked to parse some metadata" do</p>

<pre><code>it "should create the right formatter" do
  @format = Tentacles::Format.new
  @format.parse('Time: 8:03 am').should be_an_instance_of(Date)
end
</code></pre>

<p>  end
end
```</p>

<p>To pull this off we'll need the help of at least 2 new gems: <a href="http://rubygems.org/gems/chronic">Chronic</a> and <a href="http://rubygems.org/gems/activesupport">ActiveSupport</a>. Chronic is a natural language parser which can convert strings into useable timestamps. ActiveSupport is a library of extensions originally created for Rails which have been abstracted into a general purpose toolset. We're going to combine these two gems to turn the phrase "8:03 am" into a Ruby DateTime.</p>

<p>Gotta first update the Gemfile with our new dependencies and run <code>bundle install</code>.</p>

<p>```ruby
source 'https://rubygems.org'</p>

<p>gem 'rspec', '2.9.0'
gem 'nokogiri', '~>1.5.2'
gem 'awesome_print', '~>1.0.2'
gem 'fakeweb', '~>1.3.0'
gem 'chronic', '~> 0.6.7'
gem 'activesupport', '~> 3.2.3'
```</p>

<p>Next we bang out a quick parse method inside of DateTimeFormat. Our Tentacles::Format is going to delegate its parse call to whichever subordinate formatter it creates. Code speaks louder than words:</p>

<p>```ruby tentacles/lib/tentacles/format.rb
require 'yaml'
require_relative 'date_time_format'</p>

<p>module Tentacles
  class Format</p>

<pre><code>def initialize
  @categories = YAML.load(File.open(File.dirname(__FILE__) + '/formats.yml'))
end

# Create a formatter based on the content of the passed
# in data. Delegate the parse call to this new formatter
def parse(data)
  category, *content = data.split(':')
  category.downcase!
  formatter = Tentacles.const_get(@categories[category]).new
  formatter.parse(content)
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby tentacles/lib/tentacles/date_time_format.rb
require 'chronic'
require 'active_support/core_ext/string/conversions.rb'</p>

<p>module Tentacles
  class DateTimeFormat</p>

<pre><code>def initialize
  puts 'DateTimeFormat created!'
end

def parse(content)
  Chronic.parse(content.join(':')).to_datetime
end
</code></pre>

<p>  end
end
```</p>

<p>With all that in place our test should pass. Nice!!!!!! We're well on our way to processing the remaining metadata. Tomorrow I'll whip up our other formats and figure out how to pull the date out of a blog post so we can combine that with the time to get a proper DateTime.</p>

<ul>
<li>Time: 7:42 am</li>
<li>Mood: Awake, Alert, Focused</li>
<li>Sleep: 6</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed with Tests Pt. 7]]></title>
    <link href="http://robdodson.me/blog/2012/05/15/object-oriented-scraper-backed-with-tests-pt-7/"/>
    <updated>2012-05-15T21:33:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/15/object-oriented-scraper-backed-with-tests-pt-7</id>
    <content type="html"><![CDATA[<p>During my last post I realized that including my metadata in the blog post as only a ul meant that all the words were being scraped as part of the keyword frequency search. After thinking about it for a while I think I'm going to give the keyword search method an optional value which it can use to ignore or delete certain nodes.</p>

<p>Thankfully I have my tests in place to validate what our final output should look like. Which means I'm basically hacking away at Nokogiri to get things to pass. Here's what I finally settle on:</p>

<p>```ruby
def words_by_selector(selector, ignored_selector = nil)
  node = nodes_by_selector(selector).first
  if ignored_selector</p>

<pre><code>ignored = node.css(ignored_selector)
ignored.remove()
</code></pre>

<p>  end
  words = words_from_string(node.content)
  count_frequency(words)</p>

<p>  sorted = @counts.sort_by { |word, count| count }
  sorted.reverse!
  sorted.map { |word, count| "#{word}: #{count}"}
end
```</p>

<p>I think the code is pretty self explanatory. Moving on to the metadata we expect a Hash that looks like this:</p>

<p><code>
{
  datetime: 2012-05-13T08:03:00-07:00,
  mood: ['Happy', 'Drowsy', 'Peaceful'],
  sleep: 5.5,
  hunger: 3.0,
  coffee: 0.0
}
</code></p>

<p>As I'm playing back and forth with the metadata selector methods I'm realizing that writing non-brittle tests is extremely difficult!</p>

<p>I'm noticing that some of the metadata, when broken into Strings, don't parse very well. For instance:</p>

<p><code>Time: 8:03</code> splits up into <code>["Time", " 8", "03"]</code></p>

<p>We can use a splat operator to clean that up a bit for us:</p>

<p>```ruby
def metadata_by_selector(selector)
  node = nodes_by_selector(selector).first
  metadata = {}
  node.children.each do |child|</p>

<pre><code>key, *value = child.content.split(':')
puts "#{key}: #{value}"
</code></pre>

<p>  end    <br/>
end
```</p>

<p>The above should produce something like:</p>

<p><code>
Time: [" 8", "03 am"]
Mood: [" Happy, Drowsy, Peaceful"]
Sleep: [" 5.5"]
Hunger: [" 3"]
Coffee: [" 0"]
</code></p>

<p>Close... but still not perfect. I think the best thing to do would be to write some formatter objects or functions to handle the different kinds of metadata. We'll tackle that tomorrow.</p>

<ul>
<li>Time: 9:34pm</li>
<li>Mood: Fat, Tired, Drunk</li>
<li>Sleep: 6</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
</feed>
