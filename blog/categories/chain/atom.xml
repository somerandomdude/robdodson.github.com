<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chain | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/chain/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-08-08T09:45:19-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Design Patterns: Decorator]]></title>
    <link href="http://robdodson.me/blog/2012/08/08/javascript-design-patterns-decorator/"/>
    <updated>2012-08-08T09:32:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/08/08/javascript-design-patterns-decorator</id>
    <content type="html"><![CDATA[<p>This is where the Decorator article will go. Apologies for the temporary weirdness. I'm setting up Octopress on a new machine and sorting out all of its funky git branches. Stay tuned... ETA for this post is Thursday, Aug. 09</p>

<p>-- Rob</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Design Patterns: Strategy]]></title>
    <link href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns-strategy/"/>
    <updated>2012-08-03T15:12:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/08/03/javascript-design-patterns-strategy</id>
    <content type="html"><![CDATA[<p>The Strategy pattern is one of my personal favorites and you've probably seen or used it in some fashion without even knowing it. Its primary purpose is to help you separate the parts of an object which are subject to change from the rest of the static bits. Using Strategy objects versus subclasses can often result in much more flexible code since you're creating a suite of easily swappable algorithms.</p>

<h2>Formal Definition</h2>

<p>{% blockquote GoF, Design Patterns: Elements of Reusable Object-Oriented Software %}
Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
{% endblockquote %}</p>

<h3>Also Known As</h3>

<ul>
<li>Policy</li>
</ul>


<h2>Contrived Example Time!</h2>

<p>Let's say you're making a game and you have a Character class. This game has all sorts of different terrain types so your character can run through open fields, walk slowly through swamps or swim under the ocean. Since you don't know what kind of other terrains the game designer is going to think up you decide that it would be a bad idea to give each character <code>run</code>, <code>walk</code>, and <code>swim</code> methods. After all, what if suddenly the character needs to <code>fly</code> or <code>crawl</code>? What if they're wounded and they need to <code>limp</code>? This situation could potentially get out of hand very fast...</p>

<p>There's a good chance you've seen or written code like this before:</p>

<p>``` js
function move() {</p>

<pre><code>if (state === 'walking') {
    // do some walk animation
} else if (state === 'running') {
    // do some running animation
} else if (state === 'swimming') {
    // do some swimming animation
}
</code></pre>

<p>}
```</p>

<p>When you see a big conditional like that or a switch statement it's time to stop and wonder if there's a better way. For instance if we need to subclass our Character we're going to have to override that big conditional. What if we only want to replace the <code>swimming</code> bit? We'll have to copy and paste the code from the super class for <code>walking</code> and <code>running</code> and then write new code specifically for <code>swimming</code>. And of course if <code>walking</code> and <code>running</code> ever change we're totally screwed.</p>

<h3>We need a Strategy to deal with this</h3>

<p>Ok so we know that our character is going to be a real contortionist and need to run and jump and crab-walk all over the place. What if we took the code that made her run and we put it in its own object? How about we just define a Class for movements and we do this for all the different kinds of motion? Then when we need to move our Character we'll just tell it to defer to one of these Movement objects.</p>

<p>``` js
var Movement = function(func) {</p>

<pre><code>this.move = func;
</code></pre>

<p>};</p>

<p>Movement.prototype.execute = function() {</p>

<pre><code>this.move();
</code></pre>

<p>};</p>

<p>var running = new Movement(function() {</p>

<pre><code>console.log("Hey I'm running!");
</code></pre>

<p>});</p>

<p>var walking = new Movement(function() {</p>

<pre><code>console.log("Just walking along...");
</code></pre>

<p>});
```</p>

<p>Now when we want to tell our character to move in a different way we'll just update which Movement object its currently referencing.</p>

<p>``` js
function changeMovementType(movement) {</p>

<pre><code>this.movement = movement;
</code></pre>

<p>}</p>

<p>function move() {</p>

<pre><code>this.movement.execute();
</code></pre>

<p>}
```</p>

<p>In practice you might have something that looks like this:</p>

<p>``` js
var running = new Movement(function() {</p>

<pre><code>console.log("Hey I'm running!");
</code></pre>

<p>});</p>

<p>var walking = new Movement(function() {</p>

<pre><code>console.log("Just walking along...");
</code></pre>

<p>});</p>

<p>// Create a hero and walk through a peaceful forest...</p>

<p>var hero = new Character();
hero.changeMovementType(walking);
hero.move();</p>

<p>// ... OH NO MOTHERFUCKIN' DINOSAURS!!!</p>

<p>hero.changeMovementType(running);
hero.move();
```</p>

<p>Now it's easy for us to add as many different kinds of motion as our little game designer can dream up. Want to give the character gas-powered robotic legs? No problem!</p>

<p>``` js
var robotlegs = new Movement(function() {</p>

<pre><code>console.log("Cruisin for oil...Look out humans!");
</code></pre>

<p>});</p>

<p>hero.changeMovementType(robotlegs);
hero.move();
```</p>

<h2>When to use it</h2>

<p>When you have a part of your Class that's subject to change frequently or perhaps you have many related subclasses which only differ in behavior it's often a good time to consider using a Strategy pattern.</p>

<p>Another benefit of the Strategy pattern is that it can hide complex logic or data that the client doesn't need to know about.</p>

<h2>Real World Examples</h2>

<p>Let's say you're designing a website with all kinds of different, interesting button animations. Sometimes buttons should expand when rolled over, other times they should fade and maybe some will change colors. You could have several button classes or jQuery selections but you'd be repeating a ton of code just for the sake of a little animation algorithm. Let's see if we can write some strategy objects which solve this problem for us and give us a nice toolbox to work from.</p>

<p>``` js
var ButtonAnimation = function(context, animation) {</p>

<pre><code>this.context = context;
this.animation = func;
</code></pre>

<p>}
```</p>

<h3>Bocoup example</h3>

<h2>Related Patterns</h2>

<p>Flyweight: Strategy objects often make good flyweights.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Design Patterns]]></title>
    <link href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns/"/>
    <updated>2012-08-03T09:39:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/08/03/javascript-design-patterns</id>
    <content type="html"><![CDATA[<h2>Table of Contents</h2>

<h3>Creational</h3>

<ul>
<li>Abstract Factory</li>
<li>Builder</li>
<li>Factory Method</li>
<li>Object Pool</li>
<li>Prototype</li>
<li>Singleton</li>
</ul>


<h3>Structural</h3>

<ul>
<li>Adapter</li>
<li>Bridge</li>
<li>Composite</li>
<li>Decorator</li>
<li>Facade</li>
<li>Flyweight</li>
<li>Private Class Data</li>
<li>Proxy</li>
</ul>


<h3>Behavioral</h3>

<ul>
<li>Chain of Responsibility</li>
<li>Command</li>
<li>Interpreter</li>
<li>Iterator</li>
<li>Mediator</li>
<li>Memento</li>
<li>Null Object</li>
<li>Observer</li>
<li>State</li>
<li>Strategy</li>
<li>Template Method</li>
<li>Visitor</li>
<li>Monad Pattern / Promises</li>
</ul>


<p>I've been trying to think up <a href="http://robdodson.me/blog/2012/06/25/ending-my-first-chain/">a new chain</a> since coming back from Europe but nothing was enticing me. Then a few days ago I had a conversation with one of my friends in which we discussed using Promises in JavaScript. And later on we discussed Builders. I was doing my best to explain the two but really wished that I had a resource where I could just show some simple code examples. It occurred to me that I've always wanted to go through the <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1344014497&amp;sr=8-1&amp;keywords=design+patterns">Gang of Four book</a> and just write my own interpretation of each pattern. Since I'm currently working primarily in JavaScript I thought it might be an interesting challenge to convert their examples, often in strongly typed languages, to something as dynamic and loosey-goosey as JS.</p>

<p>I know there are a lot of people out there who <a href="http://www.codinghorror.com/blog/2005/09/head-first-design-patterns.html">aren't too</a> <a href="http://thinkrelevance.com/blog/2007/05/17/design-patterns-are-code-smells">keen on</a> design patterns but that's not to say that they shouldn't be used or studied. There's a lot of code out there that starts with <code>jQuery.click()</code> or <code>addEventListener</code> or <code>.on()</code> and all of them are implementations of the Observer pattern. Finding this reusable approach is the main point of patterns and along with it comes a shared vocabulary that can be passed on to other developers. Rather than saying "Let's defer the methods of our object that are subject to change to well encapsulated algorithms." We can just say "A Strategy pattern might be nice here."</p>

<p>Patterns should be used with caution as not everything fits so neatly into their paradigms. It's often said that a beginner never met a pattern he didn't like. In my experiences I've been burned by pattern overuse and at other times they have legitimately saved my ass. It's also true that many patterns don't really work or aren't appropriate for particular languages. For instance, the GoF book was written <em>primarily for languages which shared features of C++ and SmallTalk</em>. I totally agree with this sentiment but I feel like along the way we'll discover what does and doesn't make sense in a dynamic language like JS and hopefully we can toss in some new patterns of our own. Already to the list I've added Promises which I use quite frequently and find to be a wonderful alternative to JavaScript's oft seen pyramid of callbacks.
Again, this is all about learning and experimenting. In my opinion a good understanding of design patterns is a threshold that needs to be crossed at some point in your career. I'm committed to doing this every single day for the next few weeks so hopefully by the end of it we'll have a useful resource that others can benefit from. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ending My First Chain]]></title>
    <link href="http://robdodson.me/blog/2012/06/25/ending-my-first-chain/"/>
    <updated>2012-06-25T22:58:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/25/ending-my-first-chain</id>
    <content type="html"><![CDATA[<p>On April 28th, <a href="http://www.facebook.com/photo.php?fbid=964312982287&amp;set=a.616835240467.2181266.39601696&amp;type=1">I vowed to write a blog post a day until I had to go to Europe.</a> Of course the real threat was that if I failed to do so I would have to give 500 dollars to the Republican party, most likely to John Boehner. In my original post I said I would write till the 27th but I've moved that date up so I can spend tomorrow night packing and wrapping things up in the city before I head out on my trip. So tonight's post will mark the end of my first chain which means it's time for a little post-mortem.</p>

<h2>Why Did I Do It?</h2>

<p>Everything started because of a <a href="http://japhr.blogspot.com/2012/04/366-or-how-i-tricked-myself-into-being.html">blog post written by a fellow named Chris Strom.</a> Chris wrote every single day, for a year, and in that time he managed to self publish 3 books. I think many people would be happy to publish a book in like a couple years. At Chris' rate he was cranking one out nearly every 3-4 months. Amazing.</p>

<p>I started thinking... this whole writing thing has got to be like exercise. If you just will yourself to do it, it'll be hard at first but after a while <em>surely</em> it becomes a habit. And who doesn't want to be in the habit of exercising more?</p>

<p>Writing, self-reflection, discovery... these are <em>really</em> important. I get by in my career by reading the stuff that other people have been generous enough to put down on the page (or blog, as the case may be). If I have a problem I just type it into the little magical Google box and out pops an answer.</p>

<h1>That's fucking incredible!</h1>

<p>But that system doesn't exist unless some of us pay back into it. None of this information that we take for granted is being churned out by some machine. It's churned out by people! And do you know how hard it is to churn out meaningful, useful information with depth and substance and ethos?</p>

<h1>It's fucking hard!</h1>

<p>And because it's hard, like exercise, most of us don't do it. Well I say, fuck that! We can all be better at what we do, especially if it's going to be our life's work. For me that means setting aside some time to work a little extra and write about my successes and failures. It means willing myself to push beyond what I normally think I can do and hoping that if I stick with it, eventually pieces will fall into place, doors will unlock, and the heavens will rain cheeseburgers and High West rye whiskey.</p>

<h2>What Did I Learn?</h2>

<p>In the process of writing every day, for 60 days, I learned a ton. My posts were at times very scattershot, Ruby one day, D3.js the next, random Sublime tips after that, etc etc etc. I get frustrated and I need to switch gears. This is something I have to work on.</p>

<p>There was a part of me that didn't think I would be able to go all 60 days. I have been a total quitter more times than I'd like to admit and the older I get the more I realize what a massive disservice that is to one's self. Finishing isn't the most important thing, it's the <em>only</em> thing. It doesn't matter if you finish in a fucked up death race mobile covered in sinew and tree branches... just finish!</p>

<h2>What's Next?</h2>

<p>So what now?</p>

<p>Well I've got two ideas kicking around. One is to keep following in Chris' steps and to self publish a book. I was dead set on this until a very fateful evening when I watched <a href="http://buy.indiegamethemovie.com/">Indie Game: The Movie.</a> Now I can't get the idea of self-publishing a <em>very</em> tiny game out of my mind... Thankfully I have 3 weeks in Europe to think it over :D - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 10:58 pm</li>
<li>Mood: Tired, Relaxed</li>
<li>Sleep: 6</li>
<li>Hunger: 8</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Snippet Basics]]></title>
    <link href="http://robdodson.me/blog/2012/06/24/sublime-snippet-basics/"/>
    <updated>2012-06-24T22:48:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/24/sublime-snippet-basics</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/06/23/sublime-text-2-tips-and-shortcuts/">Yesterday I covered some tips and tricks</a> I've learned over the past few months of using Sublime. Something I didn't touch on is Sublime's Snippet architecture. Essentially a snippet is a little piece of code that gets executed when you type some characters and hit the <code>tab</code> key. For instance I have a snippet that spits out <code>console.log()</code> whenever I type <code>lg</code> and press <code>tab</code>. One clever feature of snippets is that they can be bound to a keyboard shortcut if the key binding calls the <code>insert_snippet</code> command and passes the path to the snippet file as an argument. For example:</p>

<p>```json
{</p>

<pre><code>"keys": ["super+shift+r"], 
"command": "insert_snippet", 
"args": { 
    "name": "Packages/XML/long-tag.sublime-snippet" 
} 
</code></pre>

<p>}
<code>``
That will tell Sublime that when I press</code>cmd+shift+r<code>it should act as if I triggered the long-tag snippet for XML files. Basically that will let me highlight some text, hit</code>cmd+shift+r` and then I can type some HTML or XML tags to wrap my text. Cool. So let's go about writing our own snippet to learn a bit more about this process.</p>

<h2>Getting Started</h2>

<p>The previously mentioned snippet is great for wrapping an item in HTML/XML tags but it totally breaks if we need to wrap our selection in anything not existing within brackets: <code>&lt;/&gt;</code>. Since I write a lot of Markdown I'm always wrapping text in some kind of markdown syntax, <code>*like this*</code>, but there's no easy way to do this. The aforementioned snippet is close so we're going to copy it and tweak it to do what we need.</p>

<p><a href="http://docs.sublimetext.info/en/latest/reference/snippets.html">The documentation on snippets for Sublime is short and full of good information. I suggest you read it before continuing on.</a></p>

<p>We're going to copy the file located at <code>/Library/Application\ Support/Sublime\ Text\ 2/Packages/XML</code> and move it into our <code>/Packages/User</code> directory. I chose to rename the file to <code>wrap-anything.sublime-snippet</code>. The original snippet looks like this:</p>

<p>```xml
<snippet></p>

<pre><code>&lt;content&gt;&lt;![CDATA[&lt;${1:p}&gt;${2:$SELECTION}&lt;/${1/([^ ]+).*/$1/}&gt;]]&gt;&lt;/content&gt;
&lt;tabTrigger&gt;&amp;lt;&lt;/tabTrigger&gt;
&lt;scope&gt;text.xml&lt;/scope&gt;
&lt;description&gt;Long Tag&lt;/description&gt;
</code></pre>

<p></snippet>
```</p>

<p><code>&lt;content&gt;</code> is where we put everything that's going to be spit out by our snippet when it's executed. Items are wrapped in a <code>CDATA</code> tag so they don't interfere with the rest of the XML.</p>

<p>The first part <code>&lt;${1:p}&gt;</code> outputs a <code>&lt;</code> followed by a variable, <code>$1</code> which has a default value of the letter "p" and it closes with a <code>&gt;</code>. If our snippet only contained this bit of code then when we ran it the output would be <code>&lt;p&gt;</code>.</p>

<p>The second part uses one of the environment variables <a href="http://docs.sublimetext.info/en/latest/reference/snippets.html">talked about in the snippet documentation.</a> <code>$SELECTION</code> will take whatever we've highlighted and make it part of the snippet output. You'll notice this variable is prefixed with a <code>2:</code> meaning it's our second variable and it's default output is going to be whatever was highlighted. The 2 also indicates that if the user hits <code>tab</code> this is the second place they'll go.</p>

<p>The third part contains a block of regex which, I think, just matches whatever the user types after the snippet has executed. My regex sucks so correct me if I'm wrong.</p>

<p><code>&lt;tabTrigger&gt;</code> indicates what character should be typed before hitting <code>tab</code> to fire off the snippet. In this case it's a <code>&lt;</code></p>

<p><code>&lt;scope&gt;</code> defines where the snippet should run I believe.. But I'm not entirely sure. The documentation just says "Scope selector to activate this snippet." I didn't see a text.xml file anywhere in the <code>Packages/XML/</code> folder and I know this snippet works in non-xml files so...yeah...<em>shrug</em></p>

<p><code>&lt;description&gt;</code> lets you describe the thing. duh.</p>

<p>OK let's make our own simplified snippet:</p>

<p>```xml
<snippet></p>

<pre><code>&lt;content&gt;&lt;![CDATA[${1:`}${2:$SELECTION}${1}]]&gt;&lt;/content&gt;
&lt;tabTrigger&gt;&lt;/tabTrigger&gt;
&lt;scope&gt;&lt;/scope&gt;
&lt;description&gt;Wrap any block of text&lt;/description&gt;
</code></pre>

<p></snippet>
```</p>

<p>Our snippet is less sophisticated than the previous one since we've excluded the regex. With the above snippet located in our <code>Packages/User/</code> folder we can tie it to a keyboard shortcut like so:</p>

<p><code>json
{ "keys": ["super+r"], "command": "insert_snippet", "args": { "name": "Packages/User/wrap-anything.sublime-snippet" } },
</code></p>

<p>Now when we hit <code>cmd+r</code> it will let us wrap our current selection in whatever we want :)</p>

<p>For good measure here's a really useful console.log snippet that's triggered by typing <code>lg</code> and then pressing <code>tab</code>.</p>

<p>```xml
<snippet></p>

<pre><code>&lt;content&gt;&lt;![CDATA[console.log(${1});]]&gt;&lt;/content&gt;
&lt;tabTrigger&gt;lg&lt;/tabTrigger&gt;
&lt;scope&gt;source.js&lt;/scope&gt;
&lt;description&gt;console.log()&lt;/description&gt;
</code></pre>

<p></snippet>
```</p>

<p>No need to bind this to a keyboard shortcut (unless you want to) because it defines a tab trigger. I know this wasn't super in-depth but hopefully it gives you a little bit of a start. <a href="http://docs.sublimetext.info/en/latest/reference/snippets.html">Read the documentation on snippets</a> and tighten up your regex! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 10:48 pm</li>
<li>Mood: Tired, Lazy</li>
<li>Sleep: 5</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
</feed>
