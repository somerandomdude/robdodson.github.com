<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chain | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/chain/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-23T23:27:52-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How do you switch between views in Backbone]]></title>
    <link href="http://robdodson.me/blog/2012/05/23/how-do-you-switch-between-views-in-backbone/"/>
    <updated>2012-05-23T07:56:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/23/how-do-you-switch-between-views-in-backbone</id>
    <content type="html"><![CDATA[<p>I'm going to try to approach some of my future articles as more of a question/answer setup so they don't turn into these sprawling tutorials. Today I want to focus on moving between views in Backbone.js. I'm starting with some very simple templates and three views: LeftView, MiddleView, RightView. To do this quickly we'll make it so each view is essentially a big button which, when clicked on, should animate to the middle of the screen.</p>

<p>Here's what one of my templates looks like:</p>

<p>``` html right.html</p>

<div id="right-container" class="container">
  Everyone knows I'm right.
</div>


<p>
```</p>

<p>One of the first thing I'm noticing is that all of my templates seem to be wrapped in an extra div. Since this extra div is block displayed I can't get my items to line up next to each other... Oh! T<a href="http://stackoverflow.com/questions/7894253/backbone-js-turning-off-wrap-by-div-in-render">he problem is because I haven't specified a tagName for my views.</a> I think I can actually do everything in the View declaration without needing a template.</p>

<p><code>js example.js
Example.Views.Right = Backbone.View.extend({
  tagName: 'div',
  id: 'right-container',
  className: 'container'
});
</code>
That should create our view for us with the proper tag, class and id attributes. My containers are just colored squares so I don't need to populate them with any content. If I did want to use this approach I could add more content like this:</p>

<p>```js example.js
Example.Views.Right = Backbone.View.extend({
  tagName: 'div',
  id: 'right-container',
  className: 'container',
  initialize: function() {</p>

<pre><code>this.el.innerHTML = "Hello World!";
</code></pre>

<p>  }
});
```</p>

<p>Here is our most basic <code>Router</code> showing how to add the views to stage. Since we aren't using a template we can just call the regular render function and append the returned element to the DOM.</p>

<p>``` js main.js
var Router = Backbone.Router.extend({
  routes: {</p>

<pre><code>"": "index"
</code></pre>

<p>  },</p>

<p>  index: function() {</p>

<pre><code>var leftView = new Example.Views.Left();
var middleView = new Example.Views.Middle();
var rightView = new Example.Views.Right();

// Attach the views to the DOM
$("#main").append(leftView.render().el);
$("#main").append(middleView.render().el);
$("#main").append(rightView.render().el);
</code></pre>

<p>  }
});
```</p>

<p>Here are my very simple styles:</p>

<p>``` css style.css
.container {
  width: 300px;
  height: 300px;
  display: inline-block;
  margin-right: 50px;
}</p>

<h1>left-container {</h1>

<p>  background: #F00;
}</p>

<h1>middle-container {</h1>

<p>  background: #0F0;
}</p>

<h1>right-container {</h1>

<p>  background: #00F;
}
```</p>

<p>We should now have a very simple horizontal layout.</p>

<p><img class="center" src="http://f.cl.ly/items/173L112z0g2t3S1h3k1E/Screen%20Shot%202012-05-23%20at%209.02.56%20AM.png" title="'Our Basic Backbone Layout'" ></p>

<h3>Composite Views</h3>

<p>Well I'd like to center my views in the middle of the screen but moving each item individually is going to be pretty challenging. I think the better idea would be to wrap my views in a containing view which can then be easily centered on screen.</p>

<p>Here's what that looks like:</p>

<p>``` js
Example.Views.Sections = Backbone.View.extend({
  tagName: 'div',
  id: 'sections',
  leftView: undefined,
  middleView: undefined,
  rightView: undefined,</p>

<p>  initialize: function() {</p>

<pre><code>this.leftView = new Example.Views.Left();
this.middleView = new Example.Views.Middle();
this.rightView = new Example.Views.Right();

this.$el.append(this.leftView.render().el);
this.$el.append(this.middleView.render().el);
this.$el.append(this.rightView.render().el);
</code></pre>

<p>  },</p>

<p>  // We should do this work with events instead of methods
  setInitialPosition: function() {</p>

<pre><code>this.$el.css({left: $(window).width() / 2 - this.$el.width() / 2 });
</code></pre>

<p>  }
});
```</p>

<p>Our Sections view is going to contain our 3 subordinate views. When it gets added to the DOM, <code>initialize</code> will run and create our subviews. I've also defined a method <code>setInitialPosition</code> which centers our view on screen. Tomorrow I'll replace this with an event handler that fires whenever our element is added to the DOM. For now I'm too lazy to look up the supported events :D</p>

<p>The sections view is absolutely positioned and it's width and height are explicitly defined in the css. In the short term here's how we've updated things:</p>

<p>``` css</p>

<h1>sections {</h1>

<p>  display: inline-block;
  position: absolute;
  width: 1000px;
  height: 300px;
  top: 50px;
  left: 0;
}</p>

<p>.container {
  width: 300px;
  height: 300px;
}</p>

<h1>left-container {</h1>

<p>  background: #F00;
  position: absolute;
  top: 0;
  left: 0;
}</p>

<h1>middle-container {</h1>

<p>  background: #0F0;
  position: absolute;
  top: 0;
  left: 350px;
}</p>

<h1>right-container {</h1>

<p>  background: #00F;
  position: absolute;
  top: 0;
  left: 700px;
}
```
I wanted to give each view a 50px margin on each side so in the short term all these values are hard coded. I'll think about how to make things more dynamic.</p>

<p>Let's listen to when the user clicks on a view. When we hear that we'll animate the whole sections container over so that view is centered on screen.</p>

<p>We'll need to add an events hash to our Sections view. Since all of our children implement the same <code>.container</code> class we may as well listen for a click on that.</p>

<p><code>js
events: {
  "click .container":    "onChildClicked"
}
</code></p>

<p>In our handler, <code>onChildClicked</code>, we'll figure out which child was actually clicked and then animate ourselves accordingly. Don't recoil in horror when you see this handler, it's 11:25pm and I'm too lazy to make it properly dynamic. For now there's magic numbers. Tomorrow we will clean that up :)</p>

<p>``` js
Example.Views.Sections = Backbone.View.extend({
  tagName: 'div',
  id: 'sections',</p>

<p>  leftView: undefined,
  middleView: undefined,
  rightView: undefined,</p>

<p>  events: {</p>

<pre><code>"click .container":    "onChildClicked"
</code></pre>

<p>  },</p>

<p>  initialize: function() {</p>

<pre><code>this.leftView = new Example.Views.Left();
this.middleView = new Example.Views.Middle();
this.rightView = new Example.Views.Right();

this.$el.append(this.leftView.render().el);
this.$el.append(this.middleView.render().el);
this.$el.append(this.rightView.render().el);
</code></pre>

<p>  },</p>

<p>  // We should do this work with events instead of methods
  setInitialPosition: function() {</p>

<pre><code>this.$el.css({left: $(window).width() / 2 - this.$el.width() / 2 });
</code></pre>

<p>  },</p>

<p>  onChildClicked: function($e) {</p>

<pre><code>var $target = $e.target;
switch($e.target.id) {
  // TODO: Clean out magic numbers
  case 'left-container':
    this.$el.animate({left: $(window).width() / 2 - 300 / 2});
    break;

  case 'middle-container':
    this.$el.animate({left: $(window).width() / 2 - this.$el.width() / 2 });
    break;

  case 'right-container':
    this.$el.animate({left: $(window).width() / 2 - this.$el.width() + 300 / 2});
    break;
}
</code></pre>

<p>  }
});
```</p>

<ul>
<li>Time: 7:57 am</li>
<li>Mood: Laggy, Pensive</li>
<li>Sleep: 5</li>
<li>Hunger: 0</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 Transitions with GFX]]></title>
    <link href="http://robdodson.me/blog/2012/05/22/css3-transitions-and-animations-with-sass/"/>
    <updated>2012-05-22T08:06:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/22/css3-transitions-and-animations-with-sass</id>
    <content type="html"><![CDATA[<p>CSS3 is a rather verbose tool especially when it comes to transitions and animations. I want to see if there's a way to clean a lot of that up with either a SASS mixin or a jQuery library like <a href="http://maccman.github.com/gfx/">gfx.</a></p>

<p>We'll try to do something simple at first to recreate an animation like the one we have below.</p>

<p><small>Rollover the grey area to activate it.</small></p>

<!-- CSS Styles: -->


<div>
  <style type="text/css">
    .container {
      width: 300px;
      height: 300px;
      position: relative;
      background-color: #CCC;
    }

    #example1 .container:hover .widget {
      background-color: red;
      left: 200px;
      top: 200px;
    }

    #example1 .widget {
      background-color: black;
      left: 10px;
      position: absolute;
      top: 10px;
      width: 20px;
      height: 20px;
      -webkit-transition: background-color 1s linear, left 1s, top 2s
    }
  </style>
</div>




<div id="example1">
  <div class="container">
      <div class="widget"></div>
  </div>​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
</div>


<p>The code to produce the above animation looks something like this:</p>

<p>``` css
.container {
  width: 300px;
  height: 300px;
  position: relative;
  background-color: #CCC;
}</p>

<p>.container:hover .widget {
  background-color: red;
  left: 200px;
  top: 200px;
}</p>

<p>.widget {
  background-color: black;
  left: 10px;
  position: absolute;
  top: 10px;
  width: 20px;
  height: 20px;
  -webkit-transition: background-color 1s linear, left 1s, top 2s
}
```
We definitely don't want all that logic in our CSS. Ideally we could trigger these kinds of things from JavaScript, which is where Gfx comes in.</p>

<p>Using Gfx we can get similar but not exactly the same result with the following snippet:</p>

<p>``` js
$("#widget")</p>

<pre><code>.gfx({ translateX: '200px' }, { duration: '1000', queue: false })
.gfx({ translateX: '200px', translateY: '200px' }, { duration: '2000' });
</code></pre>

<p>```</p>

<p>After tinking with Gfx for what seems like hours at this point I haven't figured out a way to pass two different times to simultaneous animations. From one animation to the next you have to specify the end points from the previous animations or else the styles will revert. That's why I'm passing <code>translateX: '200px'</code> in both places...although I'm not 100% if that's what I should be doing. I emailed the author of Gfx so we'll see what he says.</p>

<ul>
<li>Time: 8:07 am</li>
<li>Mood: Sedated, Upset-Stomach, Laggy</li>
<li>Sleep: 5.5</li>
<li>Hunger: 0</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring the Backbone Router and History API]]></title>
    <link href="http://robdodson.me/blog/2012/05/21/exploring-the-backbone-router-and-history-api/"/>
    <updated>2012-05-21T07:59:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/21/exploring-the-backbone-router-and-history-api</id>
    <content type="html"><![CDATA[<p>I want to talk a bit more about the Backbone Router because I think it's one of the first pieces of the framework that people run up against that deviates from the standard MVC setup. If you've used Rails before you're used to the idea of <code>routes</code> which pick apart a url and figure out which controller to run. CodeIgniter uses the same paradigm but I'm not sure if they also call them routes or use a different term. Contrary to this, in Backbone the Router is like a controller for the entire application. This makes it similar to Sinatra. Creating two different routes which replace the content of the page each time would look like this:</p>

<p>``` js
var Router = Backbone.Router.extend({
  routes: {</p>

<pre><code>"": "index",
"search": "search"
</code></pre>

<p>  },</p>

<p>  index: function() {</p>

<pre><code>var tutorial = new Example.Views.Tutorial();

// Attach the tutorial page to the DOM
tutorial.render(function(el) {
  $("#main").html(el);
});
</code></pre>

<p>  },</p>

<p>  search: function() {</p>

<pre><code>var search = new Example.Views.Search();

// Attach the search page to the DOM
search.render(function(el) {
  $("#main").html(el);
});
</code></pre>

<p>  }
});
```</p>

<p>If you're using the Backbone Boilerplate you won't need to tell the Router to update every time someone clicks a link. The Boilerplate implements the following block of code at the very bottom of main.js</p>

<p>``` js
// All navigation that is relative should be passed through the navigate
  // method, to be processed by the router.  If the link has a data-bypass
  // attribute, bypass the delegation completely.
  $(document).on("click", "a:not([data-bypass])", function(evt) {</p>

<pre><code>// Get the anchor href and protcol
var href = $(this).attr("href");
var protocol = this.protocol + "//";

// Ensure the protocol is not part of URL, meaning its relative.
if (href &amp;&amp; href.slice(0, protocol.length) !== protocol &amp;&amp;
    href.indexOf("javascript:") !== 0) {
  // Stop the default event to ensure the link will not cause a page
  // refresh.
  evt.preventDefault();

  // `Backbone.history.navigate` is sufficient for all Routers and will
  // trigger the correct events.  The Router's internal `navigate` method
  // calls this anyways.
  Backbone.history.navigate(href, true);
}
</code></pre>

<p>  });
```</p>

<p>In short this is an application wide handler for any relative anchor that doesn't have a <code>data-bypass</code> attribute. So something like <code>&lt;a href="search"&gt;Search&lt;/a&gt;</code> would get passed through here.
The last few bits prevent the link from completely refreshing the page—<code>evt.preventDefault()</code>—and pipe the href through the router. Actually the href gets piped through <code>Backbone.history.navigate</code> which <code>Router.navigate</code> proxies. When you call <code>Router.navigate('foobar')</code> you're supposed to pash a hash of <code>{trigger: true}</code> if you'd like the router to run the corresponding <code>foobar</code> method. If you dig into the source you can see that just passing true will also have the same effect and that's what's done here by the Boilerplate.</p>

<p>Originally I had written my View like this because I thought I had to use the Router explicitly.</p>

<p>``` js
// This will fetch the tutorial template and render it.
Example.Views.Tutorial = Backbone.View.extend({
  template: "app/templates/example.html",</p>

<p>  // Listen for when the user clicks our anchor tag
  events: {</p>

<pre><code>'click .search': 'search'
</code></pre>

<p>  },</p>

<p>  // Note: I'm stopping the event and explicitly telling the Router to
  // update the history and trigger the corresponding search method.
  search: function(e) {</p>

<pre><code>e.preventDefault();
namespace.app.router.navigate('search', {trigger: true});
</code></pre>

<p>  },</p>

<p>  ...</p>

<p><code>``
Notice that I've defined a</code>search<code>method which listens for a click on my anchor of class</code>.search`. This is inline with the vanilla Backbone.js documentation but since the Boilerplate has added that application wide handler for us, we don't need this function unless there's some additional work that search needs to do. By just letting that global handler do its thing our route will still be called and we can save a fair bit of boilerplate in our templates.</p>

<p>If you want to subvert the handler then you can just call <code>preventDefault</code> and <code>stopPropagation</code> on the click event like so:</p>

<p>``` js</p>

<p>Example.Views.Tutorial = Backbone.View.extend({</p>

<p>  template: "app/templates/example.html",</p>

<p>  events: {</p>

<pre><code>'click .search': 'search'
</code></pre>

<p>  },</p>

<p>  search: function(e) {</p>

<pre><code>e.preventDefault();
e.stopPropagation();
namespace.app.router.navigate('whatever');
</code></pre>

<p>  }</p>

<p>...</p>

<p>```</p>

<p>Something else to keep in mind is that the boilerplate comes with <code>History pushState</code> turned on by default.</p>

<p><code>js
// Trigger the initial route and enable HTML5 History API support
Backbone.history.start({ pushState: true });
</code></p>

<p>This lets you create routes that look like this: <code>mysite.com/search/foobar</code> instead of using a hash <code>mysite.com/#search/foobar</code>. The only problem is that for HTML5 History pushState to work your server has to keep resolving to index.html. The boilerplate tutorial says to use <code>node build/server</code> to run your project server, even though elsewhere it says to use <code>bbb server</code>. Neither works so I've <a href="https://github.com/backbone-boilerplate/grunt-bbb/issues/21">logged an issue on Github.</a> Very possible I'm doing it wrong but we'll see. For now I'm not use pushState so I changed the line in main.js to read <code>Backbone.history.start()</code> and instead I'm using the hash approach.</p>

<ul>
<li>Time: 7:59 am</li>
<li>Mood: Awake, Hurried, Focused</li>
<li>Sleep: 8</li>
<li>Hunger: 0</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some More Backbone.js Basics]]></title>
    <link href="http://robdodson.me/blog/2012/05/20/some-more-backbone-dot-js-basics/"/>
    <updated>2012-05-20T08:19:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/20/some-more-backbone-dot-js-basics</id>
    <content type="html"><![CDATA[<p>Here are some quick Backbone snippets to help visualize concepts. I'll move around fairly quickly so if you're interested in going more in-depth then checkout the documentation.</p>

<h3>Events</h3>

<p>Backbone events are pretty straightforward. To create a pub/sub relationship you use the <code>on</code> and <code>off</code> methods of <code>Backbone.Events</code>:</p>

<p>In the above example you could make <code>dispatcher</code> into an AMD module and load the dependency with Require.js, something <a href="http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js/">I've covered in a previous post.</a></p>

<p>``` js
var dispatcher = {};
_.extend(dispatcher, Backbone.Events);</p>

<p>var receiver = {</p>

<pre><code>initialize: function() {
    // Start listening for the 'hello' event from the dispatcher.
    // When we hear the 'hello' event we'll run a function
    dispatcher.on('hello', this.sayHello, this);
},
sayHello: function() {
    console.log('hello!');
    // Kill the listener so we only get called once
    dispatcher.off('hello', this.sayHello, this); 
}
</code></pre>

<p>};</p>

<p>receiver.initialize();
dispatcher.trigger('hello');
dispatcher.trigger('hello');
```</p>

<h3>Models</h3>

<p>Backbone models are interesting because they implement explicit <code>get</code> and <code>set</code> methods. When you change a property with the get and set methods it will fire off an event. Here's a fiddle showing how to model a <code>Book</code>. We'll change the author and the DOM will reflect this update.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/robdodson/dC5GD/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If your model implements an <code>initialize</code> function it will be called as soon as the object is created. In other words, its a constructor. If you pass a hash to the model's constructor it will set those attributes on itself. The hash and any additional arguments will also be passed to <code>initialize</code>.</p>

<p>``` js
// Define an initialize function for our book
// Initialize will be called anytime we say new Book()
var Book = Backbone.Model.extend({</p>

<pre><code>initialize: function(foo, bar) {
    console.log(foo);
    console.log(bar);
}
</code></pre>

<p>});</p>

<p>// You can pass in a hash to set initial values on the model
// The hash and any additional arguments will also be passed
// to the initialize function
book = new Book({</p>

<pre><code>author: 'Hunter S. Thompson',
title: 'Fear and Loating in Las Vegas'
</code></pre>

<p>}, 'hello world!');</p>

<p>console.log(book.get('author'));
```</p>

<h4>Poor man's data-binding</h4>

<p>Now that we have a basic understanding of models we can write our own simple binding setup. This example presumes we have an <code>#author</code> and a <code>#title</code> element somewhere on our page.</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>book = new Book({</p>

<pre><code>author: 'Hunter S. Thompson',
title: 'Fear and Loating in Las Vegas'
</code></pre>

<p>});</p>

<p>// Listen for any change event coming from the model.
// When any attribute changes we'll tell our elements to
// automatically update.
book.on('change', function() {</p>

<pre><code>$('#author').html(book.get('author'));
$('#title').html(book.get('title'));
</code></pre>

<p>});</p>

<p>book.set('author', 'Mickey Mouse');
book.set('title', 'Everyone Poops');
```</p>

<h4>Backbone.sync</h4>

<p>To mess around with saving data we'll need to alter <code>Backbone.sync</code>.</p>

<blockquote><p>Backbone.sync is the function that Backbone calls every time it attempts to read or save a model to the server. By default, it uses (jQuery/Zepto).ajax to make a RESTful JSON request and returns a jqXHR. You can override it in order to use a different persistence strategy, such as WebSockets, XML transport, or Local Storage.</p></blockquote>

<p>Backbone will decide whether a save call should perform a create with <code>HTTP POST</code> or an update <code>HTTP PUT</code> based on whether or not our model has an id attribute already.</p>

<p>Here's an example from the Backbone docs which overrides the sync functionality and fakes a request to a server.</p>

<p>``` js
Backbone.sync = function(method, model) {
  console.log(method + ": " + JSON.stringify(model));
  model.id = 1; // This line is crucial!
};</p>

<p>var book = new Backbone.Model({
  title: "The Rough Riders",
  author: "Theodore Roosevelt"
});</p>

<p>book.save();
// create: {"title":"The Rough Riders","author":"Theodore Roosevelt"}</p>

<p>book.save({author: "Teddy"});
// update: {"title":"The Rough Riders","author":"Teddy"}
<code>``
​If we don't give our model an</code>id` on line 3 then Backbone has no way of knowing if the model has been previously saved or not. It will keep doing create/POST until it receives that id.</p>

<h3>Collections</h3>

<p>If you don't want to setup a server but you do want to play around with saving models and collections you can use <a href="https://github.com/jeromegn/Backbone.localStorage">the Backbone LocalStorage adapter written by Jerome Gravel-Niquet</a>. After you've included the js file in your code somewhere you can use it like so:</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var Books = Backbone.Collection.extend({</p>

<pre><code>model: Book,
localStorage: new Backbone.LocalStorage("Books")
</code></pre>

<p>});</p>

<p>var library = new Books();
library.on('sync', function() {</p>

<pre><code>console.log('sync succesful!');
</code></pre>

<p>});</p>

<p>var othello = library.create({
  title: "Othello",
  author: "William Shakespeare"
});
```</p>

<p>To <code>fetch</code> the models in the collection at a later point you can do the following:</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var Books = Backbone.Collection.extend({</p>

<pre><code>model: Book,
localStorage: new Backbone.LocalStorage("Books")
</code></pre>

<p>});</p>

<p>var library = new Books();
library.fetch();
console.log(library);
```</p>

<p>The docs mention that you shouldn't use this to initialize your collections. Instead you should <a href="http://documentcloud.github.com/backbone/#FAQ-bootstrap">bootstrap your app</a> at page load. Here's the passage:</p>

<blockquote><p>Note that fetch should not be used to populate collections on page load — all models needed at load time should already be bootstrapped in to place. fetch is intended for lazily-loading models for interfaces that are not needed immediately: for example, documents with collections of notes that may be toggled open and closed.</p></blockquote>

<h3>Routers</h3>

<p>Routers are used to map URLs to actions. If you're using the Backbone Boilerplate you should see this block of code in your main.js.</p>

<p>``` js
// Defining the application router, you can attach sub routers here.
var Router = Backbone.Router.extend({
  routes: {</p>

<pre><code>"": "index",
":hash": "index"
</code></pre>

<p>  },</p>

<p>  index: function(hash) {</p>

<pre><code>var route = this;
var tutorial = new Example.Views.Tutorial();

// Attach the tutorial to the DOM
tutorial.render(function(el) {
  $("#main").html(el);

  // Fix for hashes in pushState and hash fragment
  if (hash &amp;&amp; !route._alreadyTriggered) {
    // Reset to home, pushState support automatically converts hashes
    Backbone.history.navigate("", false);

    // Trigger the default browser behavior
    location.hash = hash;

    // Set an internal flag to stop recursive looping
    route._alreadyTriggered = true;
  }
});
</code></pre>

<p>  }
});
```</p>

<p>One gotcha is that the definition of <code>":hash": "index"</code> will send any route that follows the base domain to the index function. For instance if you did the following:</p>

<p>``` js
routes: {</p>

<pre><code>"": "index",
":hash": "index"
"search": "search"
</code></pre>

<p>  },</p>

<p>  ...</p>

<p>  search: function() {</p>

<pre><code>console.log('time to search!');
</code></pre>

<p>  }
<code>``
Instead of the search function running what will actually happen is mysite.com/search will be converted into mysite.com/#search and the word</code>search<code>will be sent to the index function to supply the</code>hash<code>argument. To fix this you'll need to remove the</code>":hash": "index"` route.</p>

<h3>Views</h3>

<p>Views can either work with existing DOM elements or create new ones. Here's a very basic fiddle in which a BodyView is created to wrap our <code>body</code> tag and BoxView is appended to it. We add a little jQuery animation to show the process in action.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/robdodson/rJEkv/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>You'll often want to link a view's render method up to a model's change event so the two will stay in sync. Here's a quick and dirty example showing how to bind in this fashion.</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var BookView = Backbone.View.extend({</p>

<pre><code>className: 'book-view',
initialize: function() {
    this.model.on('change', this.render, this);
    this.render();        
},
render: function() {
    this.$el.html(this.model.get('title') + ' by ' + this.model.get('author'));
}
</code></pre>

<p>});</p>

<p>var outliers = new Book({</p>

<pre><code>author: 'Malcolm Gladwell',
title: 'Outliers'
</code></pre>

<p>});</p>

<p>var bookView = new BookView({model: outliers});</p>

<p>$('body').append(bookView.el);</p>

<p>outliers.set('author', 'Mickey Mouse');
```
Instead of throwing your HTML into the render method as a String it's advised that you use some kind of templating library. Underscore templates seem like a good place to start but Backbone is designed to be template agnostic so you could easily switch to Mustache/Handelbars or HAML if you want. Tomorrow I'll look into displaying some content using an Underscore template linked up to a model. Till then.. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Chain]]></title>
    <link href="http://robdodson.me/blog/2012/05/19/my-first-chain/"/>
    <updated>2012-05-19T22:53:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/19/my-first-chain</id>
    <content type="html"><![CDATA[<p>Back in April I was reading hacker news when I came across a blog posted titled <a href="http://japhr.blogspot.com/2012/04/366-or-how-i-tricked-myself-into-being.html">'366 or How I Tricked Myself into Being Awesome'</a>. It was written by a fellow named Chris Strom. It was written on blogspot. It was mostly unstyled.</p>

<p>Chris wrote every single day for 366 days and in so doing self-published three books on programming languages that he knew nothing about. His post was to champion that milestone. At the time I read it and thought, "I can totally do this," meaning if I follow the steps that Chris has outlined I can potentially trick myself into becoming a blogger.</p>

<p>That probably seems rather silly to say but it's true. Every developer I know Googles for answers when they're stuck or trying to learn something new. <a href="http://css-tricks.com/">And it seems like</a>, <a href="http://www.alistapart.com/">over and</a> <a href="http://www.leebrimelow.com/">over again</a>, <a href="http://devblog.avdi.org/">we end up</a> <a href="http://yehudakatz.com/">in the same places.</a> And if you're a developer, or maybe if you're just me, you totally revere these people. They are guides in what is a truly unfamiliar world and they do it without asking anything in return.</p>

<p>So I set out to try to do my own chain. I have to write until I go to Europe on June 27th. At this moment I have 22 blog posts that I've written as a result of the chain. Prior to that I'd written 3 in an entire year. At first I found the whole process exhilarating, until it started to get in the way of my personal activities. Now I have to figure out how to write something of substance while still balancing my job and my home life. This is not easy. It requires setting boundaries and self-discipline. I try to write in the mornings, usually between the hours of 7 to 9. Frequently I don't finish and my posts have to be resumed in the evening. But working like this interferes with the time I can spend with my girlfriend and that breaks one of the unspoken rules I have which is that writing should not disturb my normal social life. Getting to the first 10 posts this was not a problem but now that I'm passing 20 it is. I've changed my writing style from full blown tutorials to more of a play-by-play as I code. I'm always striving to be more succinct in what I write but usually the challenge is disappearing down a rabbit hole while I research something new only to realize that I've blown half an hour of my writing time googling minutia. I'm going to try to associate googling minutia with some guy getting in between me and my girlfriend. As a result I will want to stab googling minutia.</p>

<p>Anyway, if you find this post and you are thinking about writing let me tell you that I <strong>highly</strong> recommend it. Here is some quick advice:</p>

<h3>Don't worry about what your blog looks like.</h3>

<p>I'm 100% serious on this point. If you spend any time designing your blog before you write your first 5 articles then you're doing it wrong. I have fallen into this trap innumerable times. Just accept this challenge: Make it to 10 blog posts, then you can redesign the thing.</p>

<p>I think we fall in love with the idea of having a beautiful blog and get lost in design and programming how everything will look. This is a mistake. Blogging is supposed to just be a journal of what you're currently working on and thinking. Assume no one will read it (this is probably true). After you have a few readers then work on the look and feel if you choose. Personally I've found that not worrying about the design at all has been incredibly freeing. Again, look at <a href="http://japhr.blogspot.com/2012/04/366-or-how-i-tricked-myself-into-being.html">Chris Strom's blog</a>. He has a ton of readers, is a published author, and is running the default blogspot theme.</p>

<h3>Try to write at the same time every day</h3>

<p>I find it easiest to focus in the morning especially when everyone else is asleep. I think Chris works late at night. Figure out what times suits you and do your best to stick to it. When I finish a post in the morning I feel free for the whole rest of the day. It's kind of cool to have that sense of accomplishment before arriving at work :D</p>

<h3>Use the best tools you can</h3>

<p>I tried writing in Wordpress on several different occasions. I've also tried Tumblr and Posterous. I find writing in shitty WYSIWYG editors drives me totally crazy. There are apps out there that let you write in more of a desktop setting but I'm not sure if they are still subject to Wordpress or Tumblr's weird formatting. Basically if you're writing a code blog it fucking sucks to use a WYSIWYG because they'll try to wrap all of your funky syntax in weird markup. I found <a href="http://octopress.org/">Octopress</a> and it's been the best tool I've ever used for writing. I also <a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/">wrote a little article</a> on it if you're trying to get it setup for your personal domain. Octopress is great because it uses <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, the same language that's used to generate most of the pages on Github, there's no database and you can write in any text editor. I do all of my blogging in <a href="http://www.sublimetext.com/2">Sublime Text 2</a>, often times with my blog in one cell with my code in the other. Here's a screenshot of what this can look like.</p>

<p><img class="center" src="/images/side_by_side_blogging.png" title="'Awesome splits!'" ></p>

<h3>Don't worry when no one reads it</h3>

<p>Finally, don't get too hung up on who is (or isn't) reading your blog. I know that pretty much all of the visits I see in my google analytics are actually just me checking the site on my phone or laptop. Definitely <em>do</em> add analytics so you can see which parts are successful and which are not but don't expect to be <a href="http://daringfireball.net/">Daring Fireball</a> overnight. In fact, don't ever expect to be Daring Fireball. Keep in mind that what you're doing is a personal journal. It may not seem like blogs are framed in that context but that's what they're best at. I often times find this really interesting flow where I write down what I think I should build before I build it, then I write a test, then I write the implementation. Often times I work out what I'm doing in the blog post well before I've even written the test. This is like a whole other kind of BDD, Blog Driven Development :) Use it for what it's best at and you'll find it rewarding.</p>

<p>Ok that's it for now. Goodnight!</p>
]]></content>
  </entry>
  
</feed>
