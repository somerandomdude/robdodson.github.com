<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chain | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/chain/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-06-15T20:05:57-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Run a Node Script from the Command Line]]></title>
    <link href="http://robdodson.me/blog/2012/06/15/how-to-run-a-node-script-from-the-command-line/"/>
    <updated>2012-06-15T19:46:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/15/how-to-run-a-node-script-from-the-command-line</id>
    <content type="html"><![CDATA[<p>This post is going to be short and sweet because I have to help my lady pack for her big trip to Germany. Over the past few days I've been messing around with command line tools written in Ruby so today I decided to give it a shot in Node.</p>

<p>We're going to start small in this first post and just get a little script running. After that we'll step it up so it can be distributed using NPM, <a href="http://robdodson.me/blog/2012/06/14/how-to-write-a-command-line-ruby-gem/">just like we did with our previous Ruby gem.</a></p>

<h2>First write some codez</h2>

<p>Make a new directory called <code>compliment</code> and create two files inside of it: <code>comliment.js</code> and <code>package.json</code>.</p>

<p>In <code>compliment.js</code> we're just going to print out some kind words.</p>

<p>``` js compliment/compliment.js</p>

<h1>! /usr/bin/env node</h1>

<p>console.log('you. are. AWESOME!');
```</p>

<p>Simple enough right? Just make sure you include that shebang up at the top which directs the system to use Node to execute our script.</p>

<h2>Package it up</h2>

<p>Ok now that we have our little script we'll give its <code>package.json</code> some love.</p>

<p>``` js compliment/package.json
{</p>

<pre><code>"name": "compliment",
"version": "0.0.1",
"description": "Tell us how awesome we are.",
"preferGlobal": "true",
"bin": { "compliment": "compliment.js" },
"author": "Rob Dodson",
"engines": { "node": "*" }
</code></pre>

<p>}
```</p>

<p>Most of that should be self explanatory. The key aspect is the <code>bin</code> section where you tell it to translate <code>compliment</code> into <code>compliment.js</code>. To install it all we have to do is run <code>npm link</code>. After you've done that you should be able to type <code>compliment</code> and hear how awesome you are!</p>

<ul>
<li>Rob</li>
</ul>


<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 8:18 am</li>
<li>Mood: Awake, Antsy</li>
<li>Sleep: 6</li>
<li>Hunger: 2</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Write a Command Line Ruby Gem]]></title>
    <link href="http://robdodson.me/blog/2012/06/14/how-to-write-a-command-line-ruby-gem/"/>
    <updated>2012-06-14T08:17:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/14/how-to-write-a-command-line-ruby-gem</id>
    <content type="html"><![CDATA[<p>So <a href="http://robdodson.me/blog/2012/06/13/writing-a-command-line-tool-in-ruby/">yesterday we saw how to setup and run ruby scripts as executables from the command line.</a> While this is pretty rad, it definitely has its limitations. For one, it's not very portable and secondly it just isn't very flexible or powerful. If we stuck with this approach we'd need to write our own semantic versioning, we'd have to setup a way to make sure that all of our required 3rd party gems get installed properly... really it'll just be a big mess if we try to hand-roll it.</p>

<p>Instead we're going to turn to Bundler to help us manage our files and turn our command line tool into a ruby gem. I'm going to start fresh and create a totally new tool, called <code>zerp</code>. I don't know what <code>zerp</code>'s purpose will be in the long run, but today we're going to make it print some text to verify everything is working.</p>

<h2>New RVM Gemset</h2>

<p>Before I do anything with gems I want to make sure I have a cleanroom of sorts. So if anything goes horribly wrong I can just throw everything away and start over. To do this we'll use RVM to create a new gemset.</p>

<p><code>
rvm gemset create zerp
rvm gemset use zerp
</code></p>

<p>If you run <code>rvm current</code> you should see something like this: <code>ruby-1.9.3-p125@zerp</code></p>

<p>Now that we have our cleanroom we can template out a new gem.</p>

<h2>Bundle Gem</h2>

<p>If bundler is not one of our global gems we can go ahead and install it with <code>gem install bundler</code>. You can do <code>gem list</code> to see what gems are in your global set.</p>

<p>With Bundler in hand we will generate the boilerplate for our new gem:</p>

<p><code>bundle gem zerp</code></p>

<p>This will create a new folder called <code>zerp/</code> and fill it with several files. <code>cd</code> into <code>zerp/</code> and take a look around.</p>

<p><code>
drwxr-xr-x  10 Rob  staff   340B Jun 14 08:38 .
drwxr-xr-x  21 Rob  staff   714B Jun 14 08:38 ..
drwxr-xr-x  11 Rob  staff   374B Jun 14 08:38 .git
-rw-r--r--   1 Rob  staff   154B Jun 14 08:38 .gitignore
-rw-r--r--   1 Rob  staff    89B Jun 14 08:38 Gemfile
-rw-r--r--   1 Rob  staff   1.0K Jun 14 08:38 LICENSE
-rw-r--r--   1 Rob  staff   490B Jun 14 08:38 README.md
-rw-r--r--   1 Rob  staff    48B Jun 14 08:38 Rakefile
drwxr-xr-x   4 Rob  staff   136B Jun 14 08:38 lib
-rw-r--r--   1 Rob  staff   626B Jun 14 08:38 zerp.gemspec
</code></p>

<p>Bundler has already setup a git project for us, as well as including a folder structure for our library. <a href="http://rails-bestpractices.com/blog/posts/8-using-bundler-and-rvm-to-build-a-rubygem">This article from rails-bestpractices.com does a great job of explaining what everything in the boilerplate is.</a></p>

<h2>Zee Codez!</h2>

<p>Our project contains a folder called <code>lib</code> which is where we'll store our Ruby code. Open up <code>lib/zerp.rb</code>. We'll populate it with an example class called <code>Chatter</code> which'll spit out our version of Hello World.</p>

<p>``` ruby lib/zerp.rb
require "zerp/version"</p>

<p>module Zerp
  class Chatter</p>

<pre><code>def say_hello
  puts 'This is zerp. Coming in loud and clear. Over.'
end
</code></pre>

<p>  end
end
```</p>

<h2>Executable</h2>

<p>It wouldn't be much of a CLI without an executable. For that we'll need to create a folder called <code>bin</code> in the root of our project. Next create a file called <code>zerp</code> without any kind of file extension. We're going to require our <code>Chatter</code> class and tell it to <code>say_hello</code>.</p>

<p>``` ruby bin/zerp</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'zerp'</p>

<p>chatter = Zerp::Chatter.new
chatter.say_hello
```</p>

<p>The shebang <code>#!/usr/bin/env ruby</code> tells the system that it should use Ruby to execute our code. After that we require our 'zerp' module defined previously. Finally we instantiate <code>Zerp::Chatter</code> and tell it to <code>say_hello</code>. If all goes well it should respond with</p>

<p><code>
This is zerp. Coming in loud and clear. Over.
</code></p>

<p>Let's see if we can make that happen.</p>

<h2>Gemspec</h2>

<p>We're going to open the <code>zerp.gemspec</code> and make it look like so:</p>

<p>``` ruby zerp.gemspec</p>

<h1>-<em>- encoding: utf-8 -</em>-</h1>

<p>require File.expand_path('../lib/zerp/version', <strong>FILE</strong>)</p>

<p>Gem::Specification.new do |gem|
  gem.authors       = ["Rob Dodson"]
  gem.email         = ["lets.email.rob@theawesomegmails.com"]
  gem.description   = %q{When a problem comes along..You must zerp it}
  gem.summary       = %q{Now zerp it..Into shape}
  gem.homepage      = "http://robdodson.me"</p>

<p>  gem.files         = <code>git ls-files</code>.split($)
  gem.executables   = ["zerp"]
  gem.test_files    = gem.files.grep(%r{<sup>(test|spec|features)/})</sup>
  gem.name          = "zerp"
  gem.require_paths = ["lib"]
  gem.version       = Zerp::VERSION
end
```</p>

<p>The main thing I did was to correct the two 'TODO' entries, and to change the <code>gem.executables</code> line from</p>

<p><code>
gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }
</code></p>

<p>to</p>

<p><code>
gem.executables   = ["zerp"]
</code></p>

<p>For reaons unknown to me the previous code wasn't picking up my executable properly so I replaced it with <code>["zerp"]</code>. I got the idea from <a href="https://github.com/lukebayes/project-sprouts/blob/master/sprout.gemspec">Project Sprouts which also uses this technique and seems to work fine on my system.</a></p>

<p>Alright we're done! Let's test this thing!</p>

<h2>Cross your fingers</h2>

<p>To install the Gem we'll use Rake's <code>install</code> task. Go ahead and run <code>rake install</code> from the root of the project. It should create a <code>pkg</code> directory and notify us via the terminal that our gem was installed succesfully. Moment of truth time...type <code>zerp</code> into the terminal. If you see <code>This is zerp. Coming in loud and clear. Over.</code> then you're good to go. After you've committed everything to Github and setup a RubyGems account you should be able to run <code>rake release</code> to send your gem out into the world where it can wow the jaded masses and delight with all its wonders. Good Luck! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 8:18 am</li>
<li>Mood: Awake, Antsy</li>
<li>Sleep: 6</li>
<li>Hunger: 2</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Command Line Tool in Ruby]]></title>
    <link href="http://robdodson.me/blog/2012/06/13/writing-a-command-line-tool-in-ruby/"/>
    <updated>2012-06-13T07:29:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/13/writing-a-command-line-tool-in-ruby</id>
    <content type="html"><![CDATA[<p>Yesterday I tried to do a post on creating your first Ruby Gem as a command line tool. <a href="http://robdodson.me/blog/2012/06/12/messing-around-with-gems/">It didn't go very well.</a> In an effort to better understand what goes on with command line tools I'm going to start from the most basic, a ruby script that is in our <code>PATH</code>.</p>

<p>I've previously added the folder <code>~/bin</code> to my PATH so I know that if I drop an executable script in there I should be able to run it by just typing its name. Let's give that a shot. First we'll make a new file just called <code>sherp</code> without any file extension. Make sure to <code>chmod 755 sherpa</code> so that it's executable. Then we'll add the following:</p>

<p>``` ruby ~/bin/sherpa</p>

<h1>!/usr/bin/env ruby</h1>

<p>puts 'I am the sherpa!!!'
```</p>

<p>If I now type <code>sherpa</code> into the command line, it should fire back <code>I am the sherpa!!!</code></p>

<p>Ok cool so we've got that part working. Now let's see if we can get some arguments in there. We'll iterate the <code>ARGV</code> object to see what comes in.</p>

<p>``` ruby ~/bin/sherpa</p>

<h1>!/usr/bin/env ruby</h1>

<p>ARGV.each do |arg|</p>

<pre><code>puts arg
</code></pre>

<p>end
```</p>

<p>With that little bit of code we should be able to pass just about anything to our command and have it echoed back.</p>

<p>```
sherpa foo bar baz</p>

<p> => foo
 => bar
 => baz
```</p>

<p>Ok cool. Now let's step this up a notch or two. Let's say we want to send in commands and options. For that we'll use the built-in <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html">OptionParser</a>. Here's <a href="http://rubylearning.com/blog/2011/01/03/how-do-i-make-a-command-line-tool-in-ruby/">a link to the article I've been following which details how to use the OptionParser.</a> In my case, I'm going to tell <code>sherpa</code> to either <code>say_hello</code> or <code>say_goodbye</code>. When I pass in the <code>-n</code> flag it should accept a name, otherwise it will use the name 'Master'. So the line <code>sherpa say_hello -n Rob</code> should produce <code>Hello Rob</code> and likewise if I left off the option and just used <code>sherpa say_hello</code> it should produce <code>Hello Master</code>.</p>

<p>Here's the code to accomplish this:</p>

<p>``` ruby ~/bin</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'optparse'</p>

<p>options = {}</p>

<p>opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: opt_parser COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     name: the name the sherpa should use when addressing you"
  opt.separator  ""
  opt.separator  "Options"</p>

<p>  opt.on("-n","--name NAME","tell the sherpa what to call you") do |name|</p>

<pre><code>options[:name] = name
</code></pre>

<p>  end</p>

<p>  opt.on("-h","--help","help") do</p>

<pre><code>puts opt_parser
</code></pre>

<p>  end
end</p>

<p>opt_parser.parse!
name = options[:name] || 'Master'</p>

<p>case ARGV[0]
when "say_hello"
  puts "Hello #{name}"
when "say_goodbye"
  puts "Goodbye #{name}"
else
  puts opt_parser
end
```</p>

<p>And there we go, our first command line Ruby tool. I'll pick it up tomorrow to try to improve upon it. We're starting small but at least we have something that works!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 7:31 am</li>
<li>Mood: Tired, Patient</li>
<li>Sleep: 6</li>
<li>Hunger: 1</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Octopress Rake Tips]]></title>
    <link href="http://robdodson.me/blog/2012/06/11/some-octopress-rake-tips/"/>
    <updated>2012-06-11T19:04:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/11/some-octopress-rake-tips</id>
    <content type="html"><![CDATA[<p>This is a quick post just to scratch one of my own itches. I've been using Octopress every single day for around two months now and the generation time for my blog is slowly starting to creep up. I'd heard that you could isolate a post and just preview/generate it instead of doing the whole blog every time but it wasn't until today that I finally decided to look into it.</p>

<p>Turns out it's really simple. Let's say we are going through our usual steps of creating a new post:</p>

<p><code>rake new_post["Today is a Wonderful Day"]</code></p>

<p>Now that we have our post ready we can isolate it from all the others:</p>

<p><code>rake isolate[wonderful-day]</code></p>

<p>Notice I didn't pass in the entire filename? That's because the Rake task inspects each of our posts and stashes anything that doesn't include the String 'wonderful-day' in the filename.</p>

<p>``` ruby
Dir.glob("#{source_dir}/#{posts_dir}/<em>.</em>") do |post|</p>

<pre><code>FileUtils.mv post, stash_dir unless post.include?(args.filename)
</code></pre>

<p>end
```</p>

<p>Now that our post is isolated we can preview it, like we always do:</p>

<p><code>rake preview</code></p>

<p>Write a little bit, save, and hit <code>localhost:4000</code> to see your super speedy blog post!</p>

<p>When we're all done we integrate the post back in with the rest of our blog.</p>

<p><code>rake integrate</code></p>

<p>And finally we generate and deploy it, which can be done in a single command:</p>

<p><code>rake gen_deploy</code></p>

<p>There are a few other useful rake tasks, you can see the whole list by running:</p>

<p><code>rake -T</code></p>

<p><code>
rake clean                     # Clean out caches: .pygments-cache, .gist-cache, .sass-cache
rake copydot[source,dest]      # copy dot files for deployment
rake deploy                    # Default deploy task
rake gen_deploy                # Generate website and deploy
rake generate                  # Generate jekyll site
rake install[theme]            # Initial setup for Octopress: copies the default theme into the path of Jekyll's generator.
rake integrate                 # Move all stashed posts back into the posts directory, ready for site generation.
rake isolate[filename]         # Move all other posts than the one currently being worked on to a temporary stash location (stas...
rake list                      # list tasks
rake new_page[filename]        # Create a new page in source/(filename)/index.markdown
rake new_post[title]           # Begin a new post in source/_posts
rake preview                   # preview the site in a web browser
rake push                      # deploy public directory to github pages
rake rsync                     # Deploy website via rsync
rake set_root_dir[dir]         # Update configurations to support publishing to root or sub directory
rake setup_github_pages[repo]  # Set up _deploy folder and deploy branch for Github Pages deployment
rake update_source[theme]      # Move source to source.old, install source theme updates, replace source/_includes/navigation.ht...
rake update_style[theme]       # Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom
rake watch                     # Watch the site and regenerate when it changes
</code></p>

<p>I'm looking forward to trying out Octopress 2.1 as it includes <a href="https://github.com/imathis/octopress/pull/207">a more streamlined generate task</a> as well as some other nifty features. - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 7:18 pm</li>
<li>Mood: Caffeinated</li>
<li>Sleep: 7</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Responsive Grid with Foundation]]></title>
    <link href="http://robdodson.me/blog/2012/06/10/building-a-responsive-grid-with-foundation/"/>
    <updated>2012-06-10T20:24:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/10/building-a-responsive-grid-with-foundation</id>
    <content type="html"><![CDATA[<p>Yesterday I introduced <a href="http://smacss.com/">SMACSS</a> and did my best to give a high level overview of its main ideas. I'm using it on my current project and I'm really enjoying it so far. There's just something about having things codified by someone with more experience that gives me immense comfort. When I feel confused I can refer back to those docs and sort out what would be the best path. Standing on the shoulders of giants and all that jazz ;)</p>

<p>Today I want to talk about a CSS framework called <a href="http://foundation.zurb.com/">Foundation</a>, written by the team at <a href="http://www.zurb.com/">ZURB.</a> Unlike SMACSS, Foundation is an actual library of modular code ready to help you quickly prototype your project. The two aren't mutually exclusive. You might think of Foundation as a shiny new toolbox but SMACSS is going to be your 'How To' manual, helping you implement all the new goodes that Foundation has to offer.</p>

<p>I'm sure many of you have heard of <a href="http://twitter.github.com/bootstrap/">Bootstrap</a> which is very similar and somewhat more popular than Foundation. I chose to use Foundation for this post because Bootstrap feels bloated to me, and I also didn't want to have to do everything in <a href="http://lesscss.org/">LESS.</a> Don't get me wrong, I loves me some LESS and some <a href="http://sass-lang.com/">SASS</a>, but not everyone is comfortable with those tools and it's already a big ask to ramp up on a new CSS framework.</p>

<p>Since it's a little late in the evening I'm just going to dip my toe into some of what Foundation has to offer by quickly mocking up a very simple layout using their responsive grids.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_mockup.png" title="'Our very basic responsive layout'" ></p>

<p>Obviously nothing fancy, the main bits I want to explore are how easy it is to lay items out using the grid and how does it react on the iPhone.</p>

<h2>Everything in its place</h2>

<p>The first thing you should do, if you haven't already is to go to <a href="http://foundation.zurb.com/">the Foundation site</a> and download the package.</p>

<p>Let's make a new folder with an index.html file and bring over the javascripts and stylesheets folders from the Foundation package. Just to start out your new index.html file should look something like this:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
            &lt;p&gt;HEADER&lt;/p&gt;
        &lt;/header&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Couple that with the <code>app.css</code> file, like so:</p>

<p>``` css stylesheets/app.css
html, body {</p>

<pre><code>color: #FFF;
font-family: Helvetica, sans-serif;
font-size: 30px;
</code></pre>

<p>}</p>

<p>header {</p>

<pre><code>background: #CCC;
height: 100px;
text-align: center;
</code></pre>

<p>}
<code>``
That should give us our roughed out grey header area. If we examine our HTML a few items should jump out. Mainly that we're using classes like</code>.container<code>,</code>.row<code>and</code>.twelve .columns`. These are all part of Foundation's grid system which seperates major sections into subcategories to help with organization and layout. The documentation explains it better than I can:</p>

<blockquote><p>The grid is built around three key elements: containers, rows, and columns. Containers create base padding for the page; rows create a max-width and contain the columns; and columns create the final structure.</p></blockquote>

<p>Since Foundation uses a twelve column grid system, specifying that an item is <code>.twelve .columns</code> means it will stretch to be the full width of its row. By default a row's maximum width is 980px but we can change this if we want in the <code>foundation.css</code> file.</p>

<p>``` css stylesheets/foundation.css
.row { width: 100%; max-width: 980px; min-width: 727px; margin: 0 auto; }</p>

<pre><code>/* To fix the grid into a certain size, set max-width to width */
</code></pre>

<p>```</p>

<p>With that knowledge we can go ahead and quickly mock up the other sections of our page.</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
            &lt;p&gt;HEADER&lt;/p&gt;
        &lt;/header&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;div class="main eight columns"&gt;
            &lt;p&gt;MAIN&lt;/p&gt;
        &lt;/div&gt;
        &lt;aside class="four columns hide-on-phones"&gt;
            &lt;p&gt;ASIDE&lt;/p&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;footer class="twelve columns"&gt;
            &lt;p&gt;FOOTER&lt;/p&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>And we'll need to update the CSS to match.</p>

<p>``` css app.css
html, body {</p>

<pre><code>color: #FFF;
font-family: Helvetica, sans-serif;
font-size: 30px;
</code></pre>

<p>}</p>

<p>header, .main, aside, footer {</p>

<pre><code>margin-top: 20px;
background: #CCC;
height: 100px;
text-align: center;
</code></pre>

<p>}
```</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_layout_basic.png" title="'Our basic layout'" ></p>

<p>That wasn't so hard was it?</p>

<p>Let's throw in some dummy copy to make our columns expand so we can get closer to our original comp. For that we'll turn to <a href="http://baconipsum.com">Bacon Ipsum</a></p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
        &lt;/header&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;div class="main eight columns"&gt;
            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;
        &lt;/div&gt;
        &lt;aside class="four columns"&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="#"&gt;First Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Second Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Third Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Fourth Item&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;footer class="twelve columns"&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>While that expands everything nicely I'd like to add some padding to the mix. But as soon as I try to pad my <code>.main</code> div everything explodes! Turns out we need to make sure we're using <code>box-sizing: border-box</code> otherwise the padding will expand our columns and destroy our grid. For a deeper explanation of <code>box-sizing: border-box</code> checkout <a href="http://paulirish.com/2012/box-sizing-border-box-ftw/">this great post by Paul Irish.</a> With that addition our CSS should now look like this:</p>

<p>``` css stylesheets/app.css
* {</p>

<pre><code>box-sizing: border-box;
</code></pre>

<p>}</p>

<p>html, body {</p>

<pre><code>font-family: Helvetica, sans-serif;
</code></pre>

<p>}</p>

<p>header, .main, aside, footer {</p>

<pre><code>margin-top: 20px;
background: #CCC;
</code></pre>

<p>}</p>

<p>header, footer {</p>

<pre><code>height: 100px;
</code></pre>

<p>}</p>

<p>.main, aside {</p>

<pre><code>padding: 50px;
</code></pre>

<p>}
```</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_layout_ipsum.png" title="'Responsive layout with lorem ipsum'" ></p>

<h2>Making friends with mobile</h2>

<p>Well I'm sure if you've made it to this point you're ready to see how this all works on an iPhone. A quick test you can perform is to just narrow your browser window until it is only about 300px wide (the iPhone has a roughly 320px display area, I believe). As you do so the columns should narrow, reflowing their content as they do so. Eventually our <code>aside</code> will <em>pop</em> from its current position and line up underneath our <code>.main</code> content.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_linear.png" title="'Linear flow with Foundation'" ></p>

<p>But what if we don't want the sidebar to appear on a mobile phone? Perhaps we just want to show the <code>.main</code> content if the screen is too narrow. Easy! Foundation provides <a href="http://foundation.zurb.com/docs/layout.php">some nice helper classes</a> which we can use to toggle elements on or off depending on the device. We'll just add a <code>.hide-on-phones</code> class to our aside</p>

<p><code>html
&lt;aside class="four columns hide-on-phones"&gt;
</code></p>

<p>and...<em>voila!</em> The <code>aside</code> disappears on small screens!</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_hide_on_phones.png" title="'Hiding the aside'" ></p>

<p>Nice and simple, yeah? If you'd like to checkout the project running live you can <a href="http://robdodson.s3-website-us-east-1.amazonaws.com/tutorials/building-a-responsive-grid-with-foundation/index.html">follow this link</a>. Resize your browser or hit it with an iPhone to see it do its magic. - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 9:00 pm</li>
<li>Mood: Relaxed</li>
<li>Sleep: 7</li>
<li>Hunger: 0</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
