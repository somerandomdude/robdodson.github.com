<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chain | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/chain/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-01T09:49:12-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Objects and Dot Syntax]]></title>
    <link href="http://robdodson.me/blog/2012/05/01/ruby-objects-and-dot-syntax/"/>
    <updated>2012-05-01T07:37:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/01/ruby-objects-and-dot-syntax</id>
    <content type="html"><![CDATA[<p>Coming from JavaScript I'm very accustomed to doing something like this:</p>

<p>``` javascript Javascript
var person = { name: 'Rob', city: 'San Francisco' }</p>

<p>console.log( person.city );   // 'San Francisco'</p>

<p>```</p>

<p>Using dot syntax to access a <code>Hash</code> is second nature to me. That's why I was surprised when I ran into the following error yesterday while writing some Ruby.</p>

<p>``` ruby Ruby
person = {name: 'Rob', city: 'San Francisco'}
 => {:name=>"Rob", :city=>"San Francisco"}</p>

<p>puts person.city</p>

<p>NoMethodError: undefined method `city' for {:name=>"Rob", :city=>"San Francisco"}:Hash
```</p>

<p>"Hmm, weird," I thought. I know I've seen dot syntax used in Ruby before..what gives?</p>

<h3>Dot Syntax and the Ruby Hash Object</h3>

<p>As it turns out Ruby does not support dot syntax for the <code>Hash</code> object. If I had wanted to access the <code>city</code> property from my previous example I should have done it using the symbol key like so:</p>

<p><code>ruby
person[:city]
 =&gt; "San Francisco"
</code></p>

<p>There are a few data structures that are very similar to <code>Hashes</code> and seeing those used in the wild perhaps threw me off. So I figured I'd write a post about the do's and dont's of dot syntax and how different object types react to it.</p>

<h4>Class</h4>

<p>The first and most obvious one is the <code>Class</code> object. Really I'm talking about instances of a <code>Class</code> here, for example an instance of class <code>Person</code> might have a <code>city</code> attribute. Here's what that would look like.</p>

<p>```ruby Person: Long Version
class Person
  def initialize(name, city)</p>

<pre><code>@name = name
@city = city
</code></pre>

<p>  end</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>  def city</p>

<pre><code>@city
</code></pre>

<p>  end
end</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #&lt;Person:0x007ff15412a8c0 @name="Rob", @city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
Since I've defined methods for both</code>name<code>and</code>city<code>, using dot syntax to access those properties basically means we're calling those methods. The methods just return the instance variables, acting as getters. You can shorten this by using</code>attr_reader<code>or</code>attr_accessor`.</p>

<p>```ruby Person: Short Version
class Person
  attr_accessor :name, :city
  def initialize(name, city)</p>

<pre><code>@name = name
@city = city
</code></pre>

<p>  end
end</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #&lt;Person:0x007ff15412a8c0 @name="Rob", @city="San Francisco"></p>

<p>person.city
 => "San Francisco"
```</p>

<h4>Struct</h4>

<p>The <code>Struct</code> object is another commonly used element which allows dot access to its attributes. Quoting from <a href="http://www.ruby-doc.org/core-1.9.3/Struct.html">the documentation</a>:</p>

<blockquote><p>A Struct is a convenient way to bundle a number of attributes together, using accessor methods, without having to write an explicit class.</p></blockquote>

<p>Examples speak louder than words so here's our <code>Person</code> again.</p>

<p>```ruby Person Struct
Person = Struct.new(:name, :city)
 => Person</p>

<p>person = Person.new('Rob', 'San Francisco')
 => #<struct Person name="Rob", city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
As I understand it a</code>Struct<code>is basically sealed after you've given it an initial definition. This means that you can't keep tacking on properties like you can with a</code>Hash`</p>

<p>```ruby</p>

<h1>Continuing from above...</h1>

<p>person.age = 28
NoMethodError: undefined method `age=' for #<struct Person name="Rob", city="San Francisco"></p>

<p>person[:age] = 28
NameError: no member 'age' in struct
```</p>

<h4>OpenStruct</h4>

<p>Finally we come to the <code>OpenStruct</code> which has both dynamic attributes and dot syntax. <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">The documentation describes it like so</a>:</p>

<blockquote><p>An OpenStruct is a data structure, similar to a Hash, that allows the definition of arbitrary attributes with their accompanying values.</p></blockquote>

<p>And again here is our <code>Person</code> from before. Note that <code>OpenStruct</code> needs you to <code>require</code> it.
```ruby Person OpenStruct
require 'ostruct'</p>

<p>person = OpenStruct.new
 => #<OpenStruct></p>

<p>person.name = 'Rob'
 => "Rob"</p>

<p>person.city = 'San Francisco'
 => "San Francisco"</p>

<p>person.city
 => "San Francisco"
```</p>

<p>If you noticed, we didn't need to define the attributes of our <code>Person</code> before creating an instance of it. This means we could keep adding attributes indefinitely. Want your person to respond to <code>age</code>? Just tack it on.</p>

<p>```ruby
person.age = 28
 => 28</p>

<p>person.age
 => 28
```</p>

<p>For the sake of brevity you can pass in a <code>Hash</code> and <code>OpenStruct</code> will covert it for you.
```ruby
require 'ostruct'</p>

<p>person = OpenStruct.new(name: 'Rob', city: 'San Francisco')
 => #<OpenStruct name="Rob", city="San Francisco"></p>

<p>person.city
 => "San Francisco"
<code>``
This all seems wonderful but there's one huge caveat which comes from the way</code>OpenStruct` finds all of these dynamic attributes. As <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">the documentation describes it</a>:</p>

<blockquote><p>An OpenStruct utilizes Rubyâ€™s method lookup structure to and find and define the necessary methods for properties. This is accomplished through the method method_missing and define_method.</p>

<p>This should be a consideration if there is a concern about the performance of the objects that are created, as there is much more overhead in the setting of these properties compared to using a Hash or a Struct.</p></blockquote>

<p>Definitely keep that in mind if you're writing time sensitive code. In those situations you'll want to use a <code>Hash</code> or a <code>Struct</code> instead.</p>

<p><small>Source:<br />
<a href="http://www.ruby-doc.org/core-1.9.3/Class.html">http://www.ruby-doc.org/core-1.9.3/Class.html</a><br />
<a href="http://www.ruby-doc.org/core-1.9.3/Struct.html">http://www.ruby-doc.org/core-1.9.3/Struct.html</a><br />
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html</a><br />
<a href="http://stackoverflow.com/questions/9356704/unable-to-use-dot-syntax-for-ruby-hash">http://stackoverflow.com/questions/9356704/unable-to-use-dot-syntax-for-ruby-hash</a><br />
<a href="http://www.rubyist.net/~slagell/ruby/accessors.html">http://www.rubyist.net/~slagell/ruby/accessors.html</a>
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Domain with Octopress and Github Pages]]></title>
    <link href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/"/>
    <updated>2012-04-30T06:52:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p><em>I'm going to try to write this as a bit of a lightening post to see if I can bring down the time it takes me to produce something.</em></p>

<p><a href="http://octopress.org/">Octopress</a> is a blogging framework written by <a href="http://brandonmathis.com/">Brandon Mathis</a> (<a href="https://twitter.com/#!/imathis">@imathis</a>) which sits on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Jekyll is a static site generator, meaning there's no database associated with your blog. Instead of writing everything in a WSYWIG linked to MySQL (like Wordpress or Blogger) you produce text files using Markdown which are then converted to static HTML. There are 3 huge benefits to this approach. First, writing in Markdown is awesome. Once you learn the syntax it's incredibly fast and you don't have to spend time playing with a tiny little editor window just to <s>add</s> <em>some</em> <strong>style</strong> to your posts. Second, writing in your favorite text editor is also awesome. I produce everything in <a href="http://www.sublimetext.com/2">Sublime Text 2</a> and every day I discover new tricks to make the process better. If you've ever had to write a blog post using one of those horrible little TinyMCE editors you will appreciate this feature. And lastly, static HTML is <em>fast</em>.</p>

<p>Octopress takes what Jekyll has started and adds some useful tasks and templates which make setting up your own blog a breeze. I'm going to quickly cover the steps needed to set everything up on Github Pages using a custom domain since that's something I struggled with when first starting out.</p>

<p>If you don't already have RVM installed you can <a href="http://robdodson.me/blog/2011/09/23/how-to-use-rvm-for-rails3/">refer back to my previous post on getting setup</a>. If you're unexperienced I highly recommend going the RVM route, though there's also <a href="https://github.com/sstephenson/rbenv#section_2">an explanation for setting up rbenv if you would prefer</a>. I should point out that I'm going to pretty much mirror <a href="http://octopress.org/docs/setup/">the Octopress setup guide</a> but I'll add some tips toward the end for setting up a custom domain.</p>

<h3>Setup Octopress</h3>

<p>You'll need at least Ruby 1.9.2 to install and run Octopress. As of right now the current version of Ruby is up to 1.9.3. I'd also recommend setting up a new RVM gemset just for your blog.</p>

<p><code>
rvm install 1.9.3   # This will take a while
rvm gemset create octopress
rvm 1.9.3@octopress   # This will tell RVM to use our new gemset.
</code></p>

<p>Next you'll need to clone and <code>bundle install</code> Octopress. When you <code>cd</code> into the directory it'll ask you to approve the .rvmrc file. An .rvmrc file basically tells RVM which ruby and gemset to use in a particular folder. Type <code>yes</code> and you'll probably get an error saying you're not using Ruby 1.9.2. This is ok, we're going to change what's in that file so ignore it for now.</p>

<p><code>
git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</code>
Now let's tell RVM to use Ruby 1.9.3 with our custom Octopress gemset.
```</p>

<blockquote><p>.rvmrc    # This will empty the .rvmrc file
echo "rvm use 1.9.3@octopress" > .rvmrc
<code>
The next time you `cd` into the octopress directory you'll have to approve the new .rvmrc file. Next let's use [Bundler](http://gembundler.com/) to install our dependencies.
</code>
gem install bundler
bundle install
<code>
Finally we'll tell Octopress to setup its default theme.
</code>
rake install
<code>
If you get an error that looks like this:
</code>
rake aborted!
You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. Using bundle exec may solve this.
<code>``
then you already have a version of Rake in your global gemset. You can use</code>bundle exec rake install` which will use the version of Rake that bundler just installed in our gemset.</p></blockquote>

<h3>Octopress on Github Pages</h3>

<p>I prefer to host Octopress on <a href="http://github.com">Github</a> pages because it's extemely easy (and free) to setup. The first step is to go to <a href="http://github.com">Github</a> and create a new repository. The repository should be called "your_user_name.github.com". My name on Github is <a href="https://github.com/robdodson">robdodson</a> so my repo is: <a href="https://github.com/robdodson/robdodson.github.com">robdodson.github.com</a>. Here's a quick explanation from the <a href="http://octopress.org/docs/deploying/github/">Octopress deployment guide</a>.</p>

<blockquote><p>Github Pages for users and organizations uses the master branch like the public directory on a web server, serving up the files at your Pages url <code>http://username.github.com</code>. As a result, youâ€™ll want to work on the source for your blog in the source branch and commit the generated content to the master branch. Octopress has a configuration task that helps you set all this up.</p></blockquote>

<p>Here's the task, let's run it:</p>

<p><code>
rake setup_github_pages
</code>
This will setup your git branches and remotes to work with Github Pages. Basically Octopress uses 2 branches to manage your blog. The source branch contains all of our octopress files. The master branch contains only the generated blog posts and theme. This way when Github looks at the master branch of our repository it'll see a bunch of static HTML and serve it up as our website. As a result we use the built in octopress rake tasks to commit to master instead of pushing to it manually. Let's set that up now.</p>

<p><code>
rake generate
rake deploy
</code>
This will generate your blog, copy the generated files into _deploy/, add them to git, commit and push them up to the master branch. We still need to manually commit to our source branch though so lets do that next.
<code>
git add .
git commit -am 'Initial commit!'
git push origin source
</code></p>

<h3>Octopress: Deploying a Blog Post</h3>

<p>I won't go into too much detail here since <a href="http://octopress.org/docs/blogging/">there's already a pretty comprehensive write up on the Octopress site for getting started</a>. But let's do a quick post to get you familiar with everything.</p>

<p>You'll use Rake tasks to generate your blog posts, like so:
<code>
rake new_post["Hello World: The First of Many New Blog Posts"]
</code>
<em>Remember if rake cries just use <code>bundle exec</code> in front of your rake command.</em></p>

<p>This will spit out a markdown file for us in the <code>source/_posts</code> directory. Open up the new file using your favorite text editor. You should see a little block of <a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter">YAML Front Matter</a> at the top which generates some useful metadata about our post. If you need to change a blog post's title in Octopress you'll have to update this YAML as well as the post's filename.</p>

<p>As I mentioned earlier your posts should be written in Markdown. <a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet">Here's a good Markdown cheat sheet to get you started</a>. <em>Tip: When you're writing in markdown you're also free to mix in HTML tags as they are ignored by the processor.</em> Write a quick block of text like "Hey, here's my first blog post!" and save it.</p>

<p>You can use <code>bundle exec rake preview</code> to fire up a local instance of your blog at <code>http://localhost:4000</code>. I usually leave this process running while I write so I can preview any of the markdown that I'm adding to the page. When you're done writing you'll need to generate and deploy the site to Github.</p>

<p><code>
bundle exec rake generate
bundle exec rake deploy
</code>
And don't forget to commit your changes to source.
<code>
git add .
git commit -am 'Add my first blog post'
git push origin source
</code>
Now that we're all deployed you should be able to see your blog at "your_user_name.github.com".</p>

<h3>Setting up your Custom Domain with Octopress and Github</h3>

<p>If you're cool using the Github subdomain then feel free to stick with it. However if you'd like to point a custom domain at your blog then here's how to go about it.</p>

<p>Create a new file in the <code>source</code> folder named <code>CNAME</code>. Add your domain name to this file. In my case the only contents of my CNAME are <code>robdodson.me</code>. If you're trying to use nested domains or subdomains you may need to <a href="http://octopress.org/docs/deploying/github/">refer back to the Octopress documentation</a>.</p>

<p>Now lets go through the familiar steps for deploying...</p>

<p>```
bundle exec rake generate
bundle exec rake deploy</p>

<p>git add .
git commit -am 'Create a CNAME record for my custom domain'
git push origin source
```
If you visit your repo you should see the CNAME record in the root of the master branch now (Octopress has copied it over for us as part of the generate task).</p>

<p>Next you'll need to update the DNS for your domain. Head over to your domain registrar and fire up their DNS manager. For a top level domain like <code>robdodson.me</code> we need to create an A record which points to the address for Github Pages: <code>204.232.175.78</code>. Save that change and now...we wait... Unfortunately, DNS can take several hours to update. If all goes according to plan then in a few hours "your_name.github.com" should resolve to "your_custom_domain.com".</p>

<p>A few quick gotchas...</p>

<p>If you're using Dreamhost then you may need to set the hosting preferences for the domain to DNS only. <a href="https://github.com/imathis/octopress/issues/518">See this thread for more explanation.</a></p>

<p>If adding <code>www</code> to the beginning of your domain seems to break things then make sure that your domain registrar has a CNAME record for www which points to your A record. I'm not a DNS expert but I <em>think</em> this is the proper way to set that up.</p>

<p>Make sure you spelled your domain name correctly in the CNAME record that you pushed to Github. I spent almost an hour wondering why <code>robodson.me</code> wasn't resolving :\</p>

<p>If all else fails checkout the docs from <a href="http://help.github.com/pages/">Github Pages</a> and <a href="http://octopress.org/docs/deploying/github/">Octopress</a> on setting up a custom domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Tests in Sublime Text]]></title>
    <link href="http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text/"/>
    <updated>2012-04-29T09:26:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text</id>
    <content type="html"><![CDATA[<p>If you're lazy like me then you love to automate as much of your process as possible. Running tests from within your IDE is one of those tasks that screams for a keyboard shortcut. In full featured tools like RubyMine or Eclipse this is usually pretty straightforward. However many developers in the Ruby community seem to prefer more lightweight tools like TextMate, Vim and Sublime. Today we'll look at how to setup RubyTest in Sublime Text 2 so we can easily run tests with just a few hotkeys. The tests will be written in <a href="http://rspec.info/">Rspec</a> which should be familiar to most Rubyists.</p>

<h3>How to setup RubyTest in Sublime Text 2</h3>

<p>If you haven't installed the <a href="http://wbond.net/sublime_packages/package_control">Sublime Package Manager</a> go ahead and do that now. The package manager is a wonderful tool that lets us install and update plugins from within Sublime. After you have that installed you can hit <code>cmd-shift-p</code> to open up the Command Palette. Type the following <code>Install Package</code> and press Enter. This will bring up a list of available packages that we can install. You can also type <code>Discover Packages</code> which will take you to a page listing each plugin with a brief description.</p>

<p>Go ahead and type <code>RubyTest</code> and press Enter. You will see a progress indicator at the bottom of your editor. Once it's finished you should be able to click on <code>Tools &gt; RubyTest</code>.</p>

<h3>Running tests in Sublime Text 2</h3>

<p>I've put together <a href="https://github.com/robdodson/testing_demo">a sample project which you can download</a>. It has a Gemfile and a pair of contrived Rspec tests. Put it someplace where you can easily get to it using the command line. In order for RubyTest to work you have to open your projects from the CLI. This has to do with how certain load paths get setup and it's probably the cause of about 95% of RubyTest issues. Follow <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">these instructions</a> if you don't already have the <code>subl</code> command setup in your terminal.</p>

<p><code>cd</code> into the project folder and do a quick <code>bundle install</code>. When that's finished try to run
<code>
bundle exec rspec spec/
</code>
If you see test results then you know that rspec is good to go. Use <code>subl .</code> to open the project. You should see a list of files on your left hand sidebar. Navigate to the <code>spec/robot_spec.rb</code> file. If you're lucky you should be able to hit <code>cmd-shift-t</code> to run all of the tests within the spec. If succesful you'll see a console window that looks like this.</p>

<p><img class="center" src="/images/ruby_test_console.png" title="Ruby Test Console" ></p>

<p>Don't worry if it doesn't work the first time. Sublime and RubyTest are <em>very</em> finicky. Close Sublime and try to open it again from the command line.It might help to close any other Sublime projects you already have open or even quit the program entirely using <code>cmd-q</code>. You'll have to experiment a bit to get it all working.</p>

<p>Hopefully after all that you've got your tests showing up green. Now you can integrate RubyTest into your workflow and save all that alt-tabbing back and forth between the command line!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Ruby Dates]]></title>
    <link href="http://robdodson.me/blog/2012/04/28/playing-with-ruby-dates/"/>
    <updated>2012-04-28T07:20:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/28/playing-with-ruby-dates</id>
    <content type="html"><![CDATA[<p>One of <a href="https://vimeo.com/40633070">my previous projects</a> involved a ton of work using Flash's built in Date object. We ended up rolling our own Calendar library which was both tedious and time consuming to debug. Now that I'm digging into Ruby for my newest project, I wanted to see what features the language has to offer. So far I'm <em>really</em> impressed and that's after only a few hours of exploration. I'll detail some of the tricks I've learned along the way so hopefully other newcomers can benefit.</p>

<h3>Ruby Date Object Basics</h3>

<p>We can start off by firing up IRB and requiring the <code>date</code> class. Let's do a really simple example first and just generate today.</p>

<p>```
require 'date'</p>

<p>today = Date.today
 => #&lt;Date: 2012-04-28 ((2456046j,0s,0n),+0s,2299161j)>
```</p>

<p>Now lets try a bit of Ruby's sugar to generate tomorrow's date.</p>

<p><code>
tomorrow = today + 1
 =&gt; #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)&gt;
</code>
Pretty straightforward, right? Since there is usually more than one way to do something in Ruby we could have achieved the same results using any of the following.</p>

<p>```
today.succ
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)></p>

<p>today.next
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)></p>

<p>today.next_day
 => #&lt;Date: 2012-04-29 ((2456047j,0s,0n),+0s,2299161j)>
```</p>

<p>As <a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">someone on StackOverflow pointed out</a>: <code>Date</code> objects are also <code>Comparable</code>, so you can construct a <code>Range</code>. If you wanted to collect every day from the previous week into an array you could do the following:
<code>
last_week = today - 7
every_day_last_week = (last_week..today).to_a
</code></p>

<p>or...</p>

<p><code>
today.downto(today - 7).to_a
</code></p>

<p>There are also some cute booleans tossed into the mix for figuring out the day of the week.</p>

<p>```
today.friday?
 => false</p>

<p>today.saturday?
 => true
```</p>

<h3>How to Use Chronic</h3>

<p><a href="https://github.com/mojombo/chronic/">Chronic</a> is a Ruby natural language date/time parser written by <a href="http://tom.preston-werner.com/">Tom Preston-Werner</a> (<a href="https://twitter.com/#!/mojombo">@mojombo</a>) which takes surprisingly human readable text and converts it to dates.</p>

<p>Covering everything that Chronic supports could take a while so definitely go check out the docs. Below is just a quick example to demonstrate how cool it is.</p>

<p>```
require 'chronic'</p>

<p>Chronic.parse('yesterday')
 => 2012-04-27 12:00:00 -0700</p>

<p>Chronic.parse('yesterday').to_date
 => #&lt;Date: 2012-04-27 ((2456045j,0s,0n),+0s,2299161j)></p>

<p>Chronic.parse('last monday')
 => 2012-04-23 12:00:00 -0700</p>

<p>Chronic.parse('3 months ago this friday at 3:45pm')
 => 2012-02-04 15:45:00 -0800
```</p>

<h3>How to Use Active Support for Dates</h3>

<p>Active Support is a library extracted from Rails which adds a ton of sugar to the Ruby language. As the author's describe it:</p>

<blockquote><p>Active Support is a collection of various utility classes and standard library extensions that were found useful for Rails. All these additions have hence been collected in this bundle as a way to gather all that sugar that makes Ruby sweeter.</p></blockquote>

<p>It's broken into several pieces so you can choose to load only the parts that you'll actually be using. <em>I'm going to write an upcoming article on Active Support. For now we'll just require it all.</em></p>

<p>```
require 'active_support/all'</p>

<p>t = Date.today
 => Sat, 28 Apr 2012</p>

<p>t.class
 => Date
```</p>

<p>You'll notice that Active Support has changed the way our date's <code>to_s</code> is formatted so it's more human readable. It also added shortcuts for creating Dates on either side of today.</p>

<p>```
yesterday = Date.yesterday
 => Fri, 27 Apr 2012</p>

<p>tomorrow = Date.tomorrow
 => Sun, 29 Apr 2012
```</p>

<p>Included as well are some nice convenience booleans: <code>past?</code>, <code>today?</code>, and <code>future?</code>
<code>
tomorrow.future?
 =&gt; true
</code></p>

<p>If you've ever had to write a Calendar that can support weeks, especially those that straddle two different months, you'll appreciate the simplicity of the helpers Active Support adds.</p>

<p>```
today = Date.today
 => Sat, 28 Apr 2012</p>

<p>today.beginning_of_week
 => Mon, 23 Apr 2012</p>

<p>today.next_week
 => Mon, 30 Apr 2012</p>

<h1>You can also choose to make the week start on an arbitrary day, like Sunday</h1>

<p>today.beginning_of_week(:sunday)
 => Sun, 22 Apr 2012
```</p>

<p>We aren't limited to weeks though. Active Support adds methods for days, months and years. For example:</p>

<p><code>
today.years_ago(10)
 =&gt; Sun, 28 Apr 2002
</code></p>

<p>By extending <code>FixNum</code> to support additional Date methods certain operations become much more readable.</p>

<p><code>
today + 1.year
 =&gt; Sun, 28 Apr 2013
</code></p>

<p>These extensions are referred to as <code>durations</code> <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">in the documentation</a>.
Which brings us back to one of our first examples of finding the date 7 days ago. With Active Support it's as easy as...</p>

<p><code>
7.days.ago
 =&gt; 2012-04-21 08:44:02 -0700
</code></p>

<p>Pretty cool! Active Support adds <em>A LOT</em> more than just Date helpers and I'll try to cover it more in some future articles. Definitely <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">check out the documentation</a> (you can <a href="http://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-date">skip to the Date section</a> since it's pretty immense).</p>

<p><small>Source:<br />
<a href="http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby">http://stackoverflow.com/questions/962544/one-line-hash-creation-in-ruby</a>
<a href="http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm">http://www.developer.com/open/article.php/3729206/Telling-Time-with-Ruby.htm</a>
<a href="http://guides.rubyonrails.org/active_support_core_extensions.html">http://guides.rubyonrails.org/active_support_core_extensions.html</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup PostgreSQL for Rails and Heroku]]></title>
    <link href="http://robdodson.me/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku/"/>
    <updated>2012-04-27T07:33:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/27/how-to-setup-postgresql-for-rails-and-heroku</id>
    <content type="html"><![CDATA[<h3>Install PostgreSQL Locally</h3>

<p>Ryan Bates has already put together a wonderful Railscast on this topic so feel free to <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">jump over there</a> to view it. My main goal in writing this post was to distill down what he said, point out a small gotcha along the way and offer some additional tools.</p>

<p>There are a few different options for installing PostgreSQL. The first one, which Ryan outlines, is to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> and simply do a <code>brew install postgresql</code>. Some folks might not be comfortable with that process so I wanted to also recommend the new <a href="http://postgresapp.com/">PostgreSQL.app</a> from the team at <a href="http://www.heroku.com/">Heroku</a>. If you're more used to tools like <a href="http://www.mamp.info/en/index.html">MAMP</a> then the PostgreSQL.app might be a bit more your style.</p>

<p>If you go the Homebrew route make sure you type in <code>initdb /usr/local/var/postgres</code> after the install finishes to init your first database. The installer will also mention some commands you can use to have PostgreSQL auto-start whenever you turn on your computer. I wasn't a big fan of this approach so instead I created two aliases in my .bash_profile.</p>

<p><code>
alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
</code>
With these I can just type <code>pg-start</code> to fire up Postgres and <code>pg-stop</code> when I want to shut it down.</p>

<h3>Change Rails Database to PostgreSQL</h3>

<p>The next thing you'll want to do is either convert an existing project to PostgreSQL or create a new rails project and set PostgreSQL as the database.</p>

<p>Creating a new rails project for Postgres is as easy as <code>rails new blog -d postgresql</code>. After running this command you'll also need to call <code>rake db:create:all</code> to create a new database.</p>

<p>To convert an existing project you'll want to update your Gemfile to include the <code>pg</code> gem. A basic Gemfile might look something like this:</p>

<p>``` ruby
source 'https://rubygems.org'</p>

<p>gem 'rails', '3.2.3'
gem 'pg', '~>0.13.2'</p>

<p>group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier', '>= 1.0.3'
end</p>

<p>gem 'jquery-rails'</p>

<p>```
You'll also need to update your config/database.yml to look for Postgres instead of SQLite or MySQL.</p>

<p>``` yaml config/database.yml
development:
  adapter: postgresql
  encoding: unicode
  database: [insert your dev database name]
  pool: 5
  username: [insert your user name]
  password:</p>

<p>test:
  adapter: postgresql
  encoding: unicode
  database: [insert your test database name]
  pool: 5
  username: [insert your user name]
  password:
<code>``
Since we haven't created any Postgres user accounts both Homebrew and PostgreSQL.app will simply use our current username as the login. The password can remain blank. After this is done you'll also need to call</code>rake db:create:all` to create the new database.</p>

<h3>Connect a Rails Project to a PostgreSQL Database on Heroku</h3>

<p>If your project isn't already under version control then now would be a good time to set that up.</p>

<p><code>
git init
git add .
git commit -m 'Initial commit!'
</code>
Next we'll create a free Heroku instance
<code>
heroku create --stack cedar
</code>
After that's done we'll simply push our project up there.
<code>
git push heroku master
</code>
You might see some deprecation warnings about vendor plugins. For now you can (probably) safely ignore those.</p>

<p>Here's one little gotcha that I seemed to run into. If you try to access your site on Heroku using the <code>heroku open</code> command you might get an error page. You have to make sure to also call <code>heroku run rake db:create:all</code> otherwise your production database will not be in place and your app will fail to connect to it. Speaking of production databases, you should also note that Heroku will overwrite whatever you put into your config/database.yml so you don't have to worry about figuring out all the connection details for their shared services...it'll all just work. Sweet!</p>

<h3>PostgreSQL GUI</h3>

<p>One last tip re: your new Postgres setup. If you're just starting out like me then your command line fu is probably not as strong as you'd like it to be. Personally I really like having a nice GUI to visualize the tables in my database. For MySQL I usually use the awesome (and free) <a href="http://www.sequelpro.com/">SequelPro</a>. For PostgreSQL you can use <a href="http://inductionapp.com/">Induction</a>. It doesn't seem like they have a downloadable binary on their website (weird?) but you can grab one out of <a href="https://github.com/Induction/Induction/downloads">the Github repo's downloads page</a>. Connecting to your Postgres instance can be a little tricky, you have to make sure to use the PostgreSQL adapter, localhost as the hostname, your computer's username as the user and the password can remain blank. You also <em>HAVE</em> to give it a database name (even though it says it's optional) or it will throw a <code>FATAL:  database [your username] does not exist</code>. Here's a screenshot of what mine looks like:</p>

<p><img class="center" src="/images/induction_screen.png" title="'Induction Login Screen'" ></p>
]]></content>
  </entry>
  
</feed>
