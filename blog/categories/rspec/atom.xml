<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSpec | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-08T23:21:03-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed With Tests Pt. 3]]></title>
    <link href="http://robdodson.me/blog/2012/05/08/object-oriented-scraper-backed-with-tests-pt-3/"/>
    <updated>2012-05-08T21:03:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/08/object-oriented-scraper-backed-with-tests-pt-3</id>
    <content type="html"><![CDATA[<p>I did some cleanup this morning on the <code>Options</code> class and the <code>options_spec</code>, mainly to remove items that seemed like they shouldn't be tested. Here's where I'm currently at:</p>

<p>```ruby tentacles/lib/tentacles/options.rb
require 'yaml'</p>

<p>module Tentacles
  class Options</p>

<pre><code>attr_reader :uri
attr_reader :post_selector
attr_reader :metadata_selector

def initialize(config)
  @config = YAML.load(File.open(config))

  @config.each do |key, value|
    raise IOError, "#{key} is undefined!" if key.nil?
  end

  @uri = URI.parse(@config["uri"])
  raise IOError, 'Invalid uri!' if @uri.scheme.nil? || @uri.host.nil?

  @post_selector = @config["post_selector"]
  @metadata_selector = @config["metadata_selector"]
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby tentacles/spec/options_spec.rb
require_relative '../lib/tentacles/options'
require 'yaml'
require 'uri'
require 'helpers'</p>

<p>describe Tentacles::Options do
  include Helpers</p>

<p>  before do</p>

<pre><code>@options = Tentacles::Options.new(relative_path + '/../lib/tentacles/config.yml')
</code></pre>

<p>  end</p>

<p>  subject { @options }</p>

<p>  it { should respond_to(:uri) }
  it { should respond_to(:post_selector) }
  it { should respond_to(:metadata_selector) }</p>

<p>  describe "#initialize" do</p>

<pre><code>describe "when parsing the URI" do

  context "when URI is valid" do
    it "should display the right URI" do
      uri = URI.parse('http://robdodson.me')
      @options.uri.should eq(uri)
    end
  end

  context "when URI is invalid" do
    it "should raise an exception" do
      expect { options = Tentacles::Options.new(relative_path + '/mocks/invalid_uri.yml') }.to raise_error(URI::InvalidURIError)
    end
  end

  context "when URI does not contain a scheme" do
    it "should raise an IO exception" do
      expect { options = Tentacles::Options.new(relative_path + '/mocks/no_scheme_or_host_uri.yml') }.to raise_error(IOError)
    end
  end

  context "when URI does not contain a host" do
    it "should raise an IO exception" do
      expect { options = Tentacles::Options.new(relative_path + '/mocks/no_scheme_or_host_uri.yml') }.to raise_error(IOError)
    end
  end
end
</code></pre>

<p>  end
end
<code>``
Previously I was testing against</code>@config = YAML.load(File.open(config))<code>to see if it would throw an error when I passed in nil or empty string for the config variable. I realize now that in that case I'm basically testing [Ruby Core](http://www.ruby-doc.org/core-1.9.3/) to see if it's working to as described in the docs. That seems silly to me. Now if I were *handling* those exceptions and doing something in response, then yeah, I would want to test that whatever I'm doing in response is working. But since I'm allowing the program to explode if you try to load an empty config file I figure it's best to just let the core or stdlib do its thing and assume that it was well tested. Having said that I think we've got decent coverage on</code>Options<code>and can move back to the</code>Runner<code>and then the</code>Crawler`.</p>

<p>By the way, if you want a more visual representation of our tests you can run <code>bundle exec rspec -f html -o index.html</code> which will generate an html file showing what passed/failed and is still pending.
<img class="left" src="/images/rspec_tests_visualization.png" title="'RSpec Static Test HTML'" ></p>

<h3>Mocking Nokogiri requests with FakeWeb</h3>

<p>I was curious if it would be possible to mock the Nokogiri requests from our <code>Crawler</code> so I did a bit of googling. It looks like the best options would be either <a href="https://github.com/wycats/artifice">Artifice</a> or <a href="http://fakeweb.rubyforge.org/">FakeWeb</a>. I'm not super familiar with Rack and I don't want to write a separate app just to mock a few calls so I've decided to go with FakeWeb.</p>

<p>First we add it to our Gemfile
```ruby
source 'https://rubygems.org'</p>

<p>gem 'rspec', '2.9.0'
gem 'nokogiri', '~>1.5.2'
gem 'awesome_print', '~>1.0.2'
gem 'fakeweb', '~>1.3.0'
<code>``
and do the usual</code>bundle install<code>. Next we'll stub out our</code>crawler_spec` and verify that it's at least detecting all the methods on the class.</p>

<p>```ruby tentacles/spec/crawler_spec.rb
require_relative '../lib/tentacles/crawler'</p>

<p>describe Tentacles::Crawler do</p>

<p>  before do</p>

<pre><code># A mock for our options object
options = {
  uri: 'http://robdodson.me', 
  post_selector: '.entry-content',
  metadata_selector: '.personal-metadata'
}

@crawler = Tentacles::Crawler.from_uri(options[:uri])
</code></pre>

<p>  end</p>

<p>  subject { @crawler }</p>

<p>  it { should respond_to(:get_words_by_selector) }
  it { should respond_to(:get_metadata_by_selector) }</p>

<p>end
```</p>

<p>I also want to verify that my class responds to an alternative constructor. Rather than just saying <code>Crawler.new</code> I'd prefer to use <code>Crawler.from_uri</code>. It doesn't serve much of a purpose but I think it's a good exercise. Here's the modified test to support it.</p>

<p>```ruby tentacles/spec/crawler_spec.rb
require_relative '../lib/tentacles/crawler'</p>

<p>describe Tentacles::Crawler do</p>

<p>  describe "constructors" do</p>

<pre><code>describe "#from_uri" do
  it "should respond" do
    Tentacles::Crawler.should respond_to(:from_uri)
  end

  it "should return an instance" do
    crawler = Tentacles::Crawler.from_uri('http://robdodson.me')
    crawler.should be_an_instance_of(Tentacles::Crawler)
  end
end
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>options = {
  uri: 'http://robdodson.me', 
  post_selector: '.entry-content',
  metadata_selector: '.personal-metadata'
}

@crawler = Tentacles::Crawler.from_uri(options[:uri])
</code></pre>

<p>  end</p>

<p>  subject { @crawler }</p>

<p>  it { should respond_to(:get_words_by_selector) }
  it { should respond_to(:get_metadata_by_selector) }</p>

<p>end
```</p>

<p>And here is our <code>Crawler</code> class based largely on our original Crawler <a href="http://robdodson.me/blog/2012/05/05/building-a-simple-scraper-with-nokogiri-in-ruby/">from the first post.</a></p>

<p>```ruby tentacles/lib/tentacles/crawler.rb
require 'open-uri'
require 'nokogiri'</p>

<p>module Tentacles
  class Crawler</p>

<pre><code>def self.from_uri(uri)
  new(uri)
end

def initialize(uri)
  @uri = uri
  @doc = Nokogiri::HTML(open(@uri))
  @counts = Hash.new(0)
end

def get_words_by_selector(selector)
  entries = doc.css('div.entry-content')
  puts "Parsing #{entries.length} entries"
  entries.each do |entry|
    words = words_from_string(entry.content)
    count_frequency(words)
  end

  sorted  = @counts.sort_by { |word, count| count }
  puts sorted.map { |word, count| "#{word}: #{count}"}
end

def get_metadata_by_selector(selector)
  # TODO
end
</code></pre>

<p>  private</p>

<pre><code>def words_from_string(string)
  string.downcase.scan(/[\w']+/)
end

def count_frequency(word_list)
  for word in word_list
    @counts[word] += 1
  end
  @counts
end
</code></pre>

<p>  end
end
<code>``
If we run the specs now they *should* pass but they're **EXTREMELY** slow! Just 4 examples takes 6 seconds O_O. Can you spot the source of all that lag? Take a look at what happens inside of</code>Crawler#initialize<code>. Notice how it's creating a new Nokogiri doc every time? Since we have a</code>before` block in our spec that means that each test (after the before) is going out and parsing our website. Let's see if FakeWeb can help us out some.</p>

<p>```ruby tentacles/spec/crawler_spec.rb
require_relative '../lib/tentacles/crawler'
require 'fakeweb'</p>

<p>describe Tentacles::Crawler do</p>

<p>  before do</p>

<pre><code># Create a mock options object
@options = {
  uri: 'http://robdodson.me', 
  post_selector: '.entry-content',
  metadata_selector: '.personal-metadata'
}

# Create a mock web request
FakeWeb.register_uri(:get, @options[:uri], :body =&gt; "Hello World! Hello San Francisco!")
</code></pre>

<p>  end</p>

<p>  describe "constructors" do</p>

<pre><code>describe "#from_uri" do
  it "should respond" do
    Tentacles::Crawler.should respond_to(:from_uri)
  end

  it "should return an instance" do
    crawler = Tentacles::Crawler.from_uri(@options[:uri])
    crawler.should be_an_instance_of(Tentacles::Crawler)
  end
end
</code></pre>

<p>  end</p>

<p>  describe "instances" do</p>

<pre><code>before do
  @crawler = Tentacles::Crawler.from_uri(@options[:uri])
end

subject { @crawler }

it { should respond_to(:get_words_by_selector) }
it { should respond_to(:get_metadata_by_selector) }
</code></pre>

<p>  end
end
```
While it's not the prettiest test ever written it does get the job done. 0.00359 seconds for 4 examples <em>down from 6 seconds!</em> That's going to wrap it up for tonight. Tomorrow we'll finish off the spec and the implementation and finally get some data coming down from the live site. Until then!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed With Tests pt. 2]]></title>
    <link href="http://robdodson.me/blog/2012/05/07/object-oriented-scraper-backed-with-tests-pt-2/"/>
    <updated>2012-05-07T18:48:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/07/object-oriented-scraper-backed-with-tests-pt-2</id>
    <content type="html"><![CDATA[<p>I'm picking up from where I left off last night. If you look back at the <a href="/blog/2012/05/06/object-oriented-scraper-backed-with-tests/">previous post</a> we ended with a spec'd out <code>Runner</code> object. Now we need to build our <code>Crawler</code> which will slurp up all the content from our posts and return them as meaningful data.</p>

<p>Our Crawler will have 2 main responsibilities. First it will iterate over a post and return a Hash of words and their usage count. Second, it will iterate over a post and pull out any metadata and associate that with a Date. These are rather simple goals and if you remember from our original scraper we were actually hitting every post on the main page. I think I'd like to nail down these simple functions and then refactor the Crawler to accept a corpus page full of links—<a href="http://robdodson.me/blog/archives/">like our archives page</a>—which it will follow and parse. Right now I want to start small.</p>

<p>Here's a list of what I <em>think</em> would be good tests for our <code>Crawler</code>.</p>

<ul>
<li>It should return an instance in exchange for a valid URI. Since the URI comes from the Runner and that's already being tested we'll assume that the URI we're given is valid.</li>
<li>It should respond to a <code>get_word_counts</code> method.</li>
<li>The get_word_counts method should accept a selector <code>String</code> and return a <code>Hash</code> of words and their counts. Since the selector will be coming from the Runner we'll assume it's valid too but first we'll need to put another test in our <code>runner_spec.rb</code>.</li>
<li>It should respond to a <code>get_metadata</code> method.</li>
<li>The get_metadata method should also accept a selector <code>String</code> and return a <code>Hash</code> with a valid <code>Date</code> and each piece of metadata categorized. Let's see how far we can take this by converting strings related to time into <code>Time</code> objects and any categories with multiple entries into <code>Arrays</code>.</li>
</ul>


<p>I'm actually going to copy and paste the above list into my specs and start buliding from there.</p>

<p>....</p>

<p>Hmm... actually I'm not. Something about this doesn't feel right. <code>Runner</code> has accrued too much responsibility. It's supposed to validate 3 different strings parsed from a YAML file which it loads and then it also has to deal with creating and running the <code>Crawler</code>. I think it's time for another object. Which we'll call <code>Options</code>. Options will be in charge of loading our YAML and verifying that all the values are valid. <code>Runner</code> will create both an Options and a Crawler object and pass the values from Options to Crawler. This is actaully also in line with the Pickaxe book's Anagrams example, so we have a nice guide to follow in that.</p>

<p>OK so <code>Options</code>, eh? Well we'll need to spec out its responsibilities. I think we can just take the tests we wrote for Runner and move them over to Options.</p>

<p>After doing this for while I've ended up with a TON of tests...only to validate 3 variables.</p>

<p>```ruby tentacles/spec/options_spec.rb
require_relative '../lib/tentacles/options'
require 'yaml'
require 'uri'
require 'helpers'</p>

<p>describe Tentacles::Options do
  include Helpers</p>

<p>  before do</p>

<pre><code>@options = Tentacles::Options.new(relative_path + '/../lib/tentacles/config.yml')
</code></pre>

<p>  end</p>

<p>  subject { @options }</p>

<p>  it { should respond_to(:uri) }
  it { should respond_to(:post_selector) }
  it { should respond_to(:metadata_selector) }</p>

<p>  describe "when parsing the config file" do</p>

<pre><code>it "should raise an exception if the config file is missing" do
  expect { options = Tentacles::Options.new('') }.to raise_error(Errno::ENOENT)
  expect { options = Tentacles::Options.new(nil) }.to raise_error(TypeError)
end

it "should raise an exception if the config file is invalid" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/invalid_yaml.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end</p>

<p>  describe "when parsing the URI" do</p>

<pre><code>it "should display the right URI" do
  uri = URI.parse('http://robdodson.me')
  @options.uri.should eq(uri)
end

it "should raise an exception if uri is empty" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/blank_uri.yml') }.to raise_error(Psych::SyntaxError)
end

it "should raise an exception if uri is invalid" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/invalid_uri.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end</p>

<p>  describe "when parsing the post selector" do</p>

<pre><code>it "should have a post_selector" do
  @options.post_selector.should be('.entry-content')
end

it "should raise an exception if the post selector is empty" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/blank_uri.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end</p>

<p>  describe "when parsing the metadata selector" do</p>

<pre><code>it "should have a metadata_selector" do
  @options.metadata_selector.should be('.personal-metadata')
end

it "should raise an exception if the metadata selector is empty" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/blank_uri.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end
end
```</p>

<p>Here's my implementation of <code>options.rb</code>
```ruby tentacles/lib/tentacles/options.rb
require 'yaml'</p>

<p>module Tentacles
  class Options</p>

<pre><code>attr_reader :uri
attr_reader :post_selector
attr_reader :metadata_selector

def initialize(config)
  @config = YAML.load(File.open(config))

  @uri = URI.parse(@config[:uri])
  raise IOError, 'invalid uri!' if @uri.scheme.nil? || @uri.host.nil?

  @post_selector = @config[:post_selector]
  raise IOError, 'post_selector is not defined' if @post_selector.empty? 

  @metadata_selector = @config[:metadata_selector]
  raise IOError, 'metadata_selector is not defined' if @metadata_selector.empty? 
end
</code></pre>

<p>  end
end
```</p>

<p>Seems like now might be a good time to pause for a bit. When I look at those tests I see a lot of places where I'm testing Classes that have probably already been tested. I feel like you can safely assume that if you pass <code>YAML.load</code> a bunch of junk it's going to throw an error. Is there any value in testing something like that for my own implementation? I'm guessing not. However I do think it's important that I test the 3 exceptions that I wrote. I'll get all the tests to pass and then I'll go back and clean it up.</p>

<h3>Making the Tests Pass</h3>

<p>I like to comment out my spec file and go line by line making each test pass as I go. I'm pretty good at writing failing tests (heh) so this approach adheres well to the red, green, refactor mantra.</p>

<p>Starting out I have a problem in the first block which checks my <code>attr_readers</code>:</p>

<p><code>ruby
it { should respond_to(:uri) }
it { should respond_to(:post_selector) }
it { should respond_to(:metadata_selector) }
</code></p>

<p>Let's see if I can get just the first test to pass... I comment out everything inside of Options and notice that YAML does not use symbols for keys. It seems like loaded YAML uses Strings for keys. After changing my symbol keys to strings my first block of tests pass.</p>

<p>```ruby tentacles/lib/tentacles/options.rb
require 'yaml'</p>

<p>module Tentacles
  class Options</p>

<pre><code>attr_reader :uri
attr_reader :post_selector
attr_reader :metadata_selector

def initialize(config)
  @config = YAML.load(File.open(config))

  @uri = URI.parse(@config["uri"])
  raise IOError, 'invalid uri!' if @uri.scheme.nil? || @uri.host.nil?

  @post_selector = @config["post_selector"]
  raise IOError, 'post_selector is not defined' if @post_selector.empty? 

  @metadata_selector = @config["metadata_selector"]
  raise IOError, 'metadata_selector is not defined' if @metadata_selector.empty? 
end
</code></pre>

<p>  end
end
```</p>

<p>The next block passes quite easily because it's ported over from the <code>Runner</code> class</p>

<p>```ruby
describe "when parsing the config file" do</p>

<pre><code>it "should raise an exception if the config file is missing" do
  expect { options = Tentacles::Options.new('') }.to raise_error(Errno::ENOENT)
  expect { options = Tentacles::Options.new(nil) }.to raise_error(TypeError)
end

it "should raise an exception if the config file is invalid" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/invalid_yaml.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end
```</p>

<p>After that we run into some issues because our next set of tested exceptions have the wrong class.</p>

<p>```ruby
  describe "when parsing the URI" do</p>

<pre><code>it "should display the right URI" do
  uri = URI.parse('http://robdodson.me')
  @options.uri.should eq(uri)
end

it "should raise an exception if uri is empty" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/blank_uri.yml') }.to raise_error(Psych::SyntaxError)
end

it "should raise an exception if uri is invalid" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/invalid_uri.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end
<code>``
Changing the last two exceptions to expect</code>Errno::ENOENT<code>and</code>URI::InvalidURIError` in that order fixes things and we're all green again.</p>

<p>In the next block we have 2 failing tests because the first one is using improper syntax. Instead of <code>be</code> we should be using <code>eq</code>. Seems like in RSpec <code>be</code> is equivalent to === and not ==. Also we have another PSYCH::SyntaxError that needs to be replaced with <code>Errno::ENOENT</code>. Here's what we end up with after making those changes:</p>

<p>```ruby
describe "when parsing the post selector" do</p>

<pre><code>it "should have a post_selector" do
  @options.post_selector.should eq('.entry-content')
end

it "should raise an exception if the post selector is empty" do
  expect { options = Tentacles::Options.new(relative_path + '/mocks/blank_uri.yml') }.to raise_error(Errno::ENOENT)
end
</code></pre>

<p>  end
```
Ugh, hate to cut it short but looks like I'm going down a rabbit hole with validation. I'll pickup tomorrow to see if we can iron a lot of this out.</p>

<ul>
<li>Time: 7:11 pm</li>
<li>Mood: Calm, Hot, Tired</li>
<li>Sleep: 7</li>
<li>Hunger: 6.5</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed with Tests]]></title>
    <link href="http://robdodson.me/blog/2012/05/06/object-oriented-scraper-backed-with-tests/"/>
    <updated>2012-05-06T18:09:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/06/object-oriented-scraper-backed-with-tests</id>
    <content type="html"><![CDATA[<p><em>I just drank a ton of coffee and I'm blasting music in my headphones so this post my bit a bit more scatter-shot than most since I can't really focus :]</em></p>

<p>Yesterday I managed to build a pretty naive scraper using Nokogiri which would count how often each word was used in the first 10 posts of this blog. Basically scraping the home URL of the site and grabbing everything inside of the <code>div.entry-content</code> selector.</p>

<p>Today I want to convert it into a more OO library so it's a bit more modular and reusable. I also want to back everything with RSpec tests to get into the practice. While it won't be true TDD I'll try to write the tests for the library before putting the classes together.</p>

<h3>Design Decisions</h3>

<p>I'm calling the project <code>Tentacles</code> for now since it relates to my Octopress blog. I'm still trying to figure out exactly what the end product will be. So far I know that I want it to produce a page of statistics about my blog. I figure that for now it can be just one page with stats that cover the entire blog. In the future I might want to make it more granular so that each post can get special attention. For now it's easiest for me if I just think of the whole blog as a big data set and this page as the output.</p>

<p>I also know that since Octopress is heavily integrated with Rake that I'd probably like to trigger the process as part of a Rake task. IMO the logical place would be to amend Octopress' <code>rake generate</code> so that it not only builds our static pages but it also produces our statistics. Down the line I might want to change this but for now it seems OK to me.</p>

<p>Finally I figure I'll want to have some kind of configuration file so the parser knows what to look for.</p>

<p>For now I'm fine with the output being a plain text file with a few stats on it. We'll work on making the output more robust after we've figure out the basics of our module and integrated it with Rake.</p>

<p>Here's the folder structure I'm using:</p>

<ul>
<li>tentacles

<ul>
<li>bin      <em>&lt;--- contains our executable program</em>

<ul>
<li>tentacles</li>
</ul>
</li>
<li>lib      <em>&lt;--- contains our library of classes</em>

<ul>
<li>crawler.rb</li>
<li>config.yml</li>
<li>runner.rb</li>
</ul>
</li>
<li>spec      <em>&lt;--- contains our RSpec tests</em>

<ul>
<li>crawler_spec.rb</li>
<li>runner_spec.rb</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Playing with IRB</h3>

<p>One of the first issues I've run up against is figuring out how to play with my classes in IRB. Being new to Ruby I tend to build everything in one folder. Since this is my first time embarking on some actual modular structure I'm unsure how to require or include a module in IRB. What I've settled on for now is to <code>cd</code> into my lib folder and use the <code>-I</code> flag to set the <code>$LOAD_PATH</code>.</p>

<p>Here's the <code>grep</code> from the irb man page.</p>

<p><code>
-I path        Same as `ruby -I' .  Specifies $LOAD_PATH directory
</code></p>

<p>So we end up in <code>tentacles/lib</code> and call IRB like so:</p>

<p><code>
irb -I .
</code></p>

<p>And now we can require our classes</p>

<p><code>
irb -I .
1.9.3-p125 :001 &gt; require 'runner'
 =&gt; true # sweeet
</code></p>

<h3>Skeletons</h3>

<p>I'm going to create a basic <code>Runner</code> class so we can verify that the stuff in IRB is working properly.</p>

<p>Here's what I've thrown together:</p>

<p>```ruby
module Tentacles
  class Runner</p>

<pre><code>def initialize(config)
  # Load in our config file
end

def run
  puts 'run run run!'
end
</code></pre>

<p>  end
end
```</p>

<p>and here's how we test it in IRB.</p>

<p>```
irb -I .
require 'runner'</p>

<p>runner = Tentacles::Runner.new('foo')
 => #&lt;Tentacles::Runner:0x007faeb284ec30></p>

<p>runner.run
run run run!
 => nil
```</p>

<p>Looks good so far!</p>

<h3>Tests</h3>

<p>OK on to the tests then. I'm going to be using RSpec so if you don't have that setup already you should do a <code>gem install rspec</code>.</p>

<p>I'm a total noob when it comes to testing so let me take my best stab at this...</p>

<p>I'm going to write tests for <code>Runner</code> first since it's already stubbed out. I want to make sure of the following things:</p>

<ul>
<li>It should respond to the <code>run</code> method</li>
<li>When I pass it an invalid config file it should throw an error</li>
<li>When I pass it an empty string or nil in place of config it should throw an error</li>
</ul>


<p>For now that's the only public API this object has. Pretty simple but of course I'm immediately running into issues. Here's what my spec looks like:</p>

<p>```ruby tentacles/spec/runner_spec.rb
require_relative '../lib/tentacles/runner'</p>

<p>describe Tentacles::Runner do</p>

<p>  before do</p>

<pre><code>@runner = Tentacles::Runner.new('config.yml')
</code></pre>

<p>  end</p>

<p>  subject { @runner }</p>

<p>  it { should respond_to(:run) }</p>

<p>  describe "when passing the config file" do</p>

<pre><code>it "should raise an error if the config file is missing" do
  expect { runner = Tentacles::Runner.new('') }.to raise_error(Errno::ENOENT)
  expect { runner = Tentacles::Runner.new(nil) }.to raise_error(TypeError)
end
</code></pre>

<p>  end
end
```
and here's what runner.rb looks like:</p>

<p>```ruby tentacles/lib/tentacles/runner.rb
require 'yaml'</p>

<p>module Tentacles
  class Runner</p>

<pre><code>def initialize(config)
  @config = YAML.load(File.open(config))
end

def run      
  'Runner should be running'
end
</code></pre>

<p>  end
end
```
aaaaaand here's the error:</p>

<p>```bash
1) Tentacles::Runner</p>

<pre><code> Failure/Error: @runner = Tentacles::Runner.new('config.yml')
 Errno::ENOENT:
   No such file or directory - config.yml
 # ./lib/tentacles/runner.rb:10:in `initialize'
 # ./lib/tentacles/runner.rb:10:in `open'
 # ./lib/tentacles/runner.rb:10:in `initialize'
 # ./spec/runner_spec.rb:8:in `new'
 # ./spec/runner_spec.rb:8:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>```</p>

<p>It looks like the test is bailing out on my <code>before</code> block when I try to create an instance of runner and pass it the config file. Folks on IRC are kind enough to point out that <code>require</code> and methods run in RSpec don't necessarily have the same scope so trying <code>../lib/tentacles/config.yml</code> won't work either. The solution is to use <code>File.dirname(__FILE__) + '/../lib/tentacles/config.yml'</code>. Since I don't want my line lengths to get any longer I define a helper module and give it a <code>relative_path</code> method which should spit out <code>File.dirname(__FILE__)</code>.</p>

<p>```ruby tentacles/spec/helpers.rb
module Helpers
  def relative_path</p>

<pre><code>File.dirname(__FILE__)
</code></pre>

<p>  end
end
```
After I include it my tests look like this:</p>

<p>```ruby tentacles/spec/runner_spec.rb
require_relative '../lib/tentacles/runner'
require 'helpers'</p>

<p>describe Tentacles::Runner do
  include Helpers</p>

<p>  before do</p>

<pre><code>@runner = Tentacles::Runner.new(relative_path + '/../lib/tentacles/config.yml')
</code></pre>

<p>  end</p>

<p>  subject { @runner }</p>

<p>  it { should respond_to(:run) }</p>

<p>  describe "when passing the config file" do</p>

<pre><code>it "should raise an error if the config file is missing" do
  expect { runner = Tentacles::Runner.new('') }.to raise_error(Errno::ENOENT)
  expect { runner = Tentacles::Runner.new(nil) }.to raise_error(TypeError)
end

it "should raise an error if the config file is invalid" do
  expect { runner = Tentacles::Runner.new(relative_path + '/mocks/invalid_yaml.yml') }.to raise_error(Psych::SyntaxError)
end
</code></pre>

<p>  end</p>

<p>end
```
You'll also notice I added a test for an invalid yml file. Basically I created a mocks folder and tossed in a yaml file that's full of gibberish. Probably not the best way to mock stuff but whatever, i'm learning!</p>

<p>With that all of our tests for <code>Tentacles::Runner</code> are passing. Yay! But now it's 10:37pm and I gotta call it a night. We'll continue tomorrow by writing tests for <code>Tentacles::Crawler</code>. See ya!</p>

<ul>
<li>Time: 6:30 pm</li>
<li>Mood: Wired, Lazy</li>
<li>Sleep: 7.5</li>
<li>Hunger: 0</li>
<li>Coffee: 2</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Tests in Sublime Text]]></title>
    <link href="http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text/"/>
    <updated>2012-04-29T09:26:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/04/29/how-to-run-tests-in-sublime-text</id>
    <content type="html"><![CDATA[<p>If you're lazy like me then you love to automate as much of your process as possible. Running tests from within your IDE is one of those tasks that screams for a keyboard shortcut. In full featured tools like RubyMine or Eclipse this is usually pretty straightforward. However many developers in the Ruby community seem to prefer more lightweight tools like TextMate, Vim and Sublime. Today we'll look at how to setup RubyTest in Sublime Text 2 so we can easily run tests with just a few hotkeys. The tests will be written in <a href="http://rspec.info/">Rspec</a> which should be familiar to most Rubyists.</p>

<h3>How to setup RubyTest in Sublime Text 2</h3>

<p>If you haven't installed the <a href="http://wbond.net/sublime_packages/package_control">Sublime Package Manager</a> go ahead and do that now. The package manager is a wonderful tool that lets us install and update plugins from within Sublime. After you have that installed you can hit <code>cmd-shift-p</code> to open up the Command Palette. Type the following <code>Install Package</code> and press Enter. This will bring up a list of available packages that we can install. You can also type <code>Discover Packages</code> which will take you to a page listing each plugin with a brief description.</p>

<p>Go ahead and type <code>RubyTest</code> and press Enter. You will see a progress indicator at the bottom of your editor. Once it's finished you should be able to click on <code>Tools &gt; RubyTest</code>.</p>

<h3>Running tests in Sublime Text 2</h3>

<p>I've put together <a href="https://github.com/robdodson/testing_demo">a sample project which you can download</a>. It has a Gemfile and a pair of contrived Rspec tests. Put it someplace where you can easily get to it using the command line. In order for RubyTest to work you have to open your projects from the CLI. This has to do with how certain load paths get setup and it's probably the cause of about 95% of RubyTest issues. Follow <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">these instructions</a> if you don't already have the <code>subl</code> command setup in your terminal.</p>

<p><code>cd</code> into the project folder and do a quick <code>bundle install</code>. When that's finished try to run
<code>
bundle exec rspec spec/
</code>
If you see test results then you know that rspec is good to go. Use <code>subl .</code> to open the project. You should see a list of files on your left hand sidebar. Navigate to the <code>spec/robot_spec.rb</code> file. If you're lucky you should be able to hit <code>cmd-shift-t</code> to run all of the tests within the spec. If succesful you'll see a console window that looks like this.</p>

<p><img class="center" src="/images/ruby_test_console.png" title="Ruby Test Console" ></p>

<p>Don't worry if it doesn't work the first time. Sublime and RubyTest are <em>very</em> finicky. Close Sublime and try to open it again from the command line.It might help to close any other Sublime projects you already have open or even quit the program entirely using <code>cmd-q</code>. You'll have to experiment a bit to get it all working.</p>

<p>Hopefully after all that you've got your tests showing up green. Now you can integrate RubyTest into your workflow and save all that alt-tabbing back and forth between the command line!</p>
]]></content>
  </entry>
  
</feed>
