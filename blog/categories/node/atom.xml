<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-06-06T09:13:46-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Countdown Timer with Socket.io pt. 2]]></title>
    <link href="http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2/"/>
    <updated>2012-06-06T07:47:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/">Continuing from yesterday's post</a> we started out with a rather crude timer and today I want to upgrade it to a full fledged model, <code>Stopwatch</code>, which dispatches events for the view to hook on to.</p>

<h3>Extend Node's EventEmitter</h3>

<p>We want to extend Node's EventEmitter object in order for our Stopwatch to dispatch its tick events. <a href="http://elegantcode.com/2011/02/21/taking-baby-steps-with-node-js-implementing-events/">Following this great article by Jan Van Ryswyck</a> I've arrived at something that looks like this:</p>

<p>``` js models/stopwatch.js
var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);

var self = this;
setInterval(function() {
    self.emit('tick');
}, 1000);
</code></pre>

<p>};</p>

<p>util.inherits(Stopwatch, events.EventEmitter);
module.exports = Stopwatch;
```</p>

<p>In our app.js we'll need to <code>require</code> our new Stopwatch module, create an instance of it, and add a listener for the tick event. Here's the abbreviated version:</p>

<p>``` js app.js
var Stopwatch = require('./models/stopwatch');</p>

<p>...</p>

<p>var stopwatch = new Stopwatch();
stopwatch.on('tick', function() {
  console.log('stopwatch tick!');
});
```
If all goes well when you restart your server you should see 'stopwatch tick!' arriving every second.</p>

<h3>Add to the prototype the RIGHT way</h3>

<p>This next part is what tripped me up the other night and since it was rather late in the evening I was too out of it to figure out what was going wrong.</p>

<p>To recap, we've created a model called <code>Stopwatch</code>, we gave it a constructor function and we told it to extend <code>events.EventEmitter</code>.</p>

<p>Now I want to add a new method to my stopwatch but here's where you might run into a real gotcha. If you're like me you'd probably add it like this:</p>

<p>``` js models/stopwatch.js
var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.foobar = function() {</p>

<pre><code>console.log('foobar!');
</code></pre>

<p>}</p>

<p>util.inherits(Stopwatch, events.EventEmitter);</p>

<p>module.exports = Stopwatch;
```</p>

<p>Aaaand your app would explode like this:</p>

<p><code>
[ERROR] TypeError
TypeError: Object #&lt;Stopwatch&gt; has no method 'foobar'
</code></p>

<p>That's because we can only add new methods <strong>after calling <code>util.inherits</code>.</strong> The proper way would look like this:</p>

<p>``` js models/stopwatch.js</p>

<p>var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);
</code></pre>

<p>};</p>

<p>util.inherits(Stopwatch, events.EventEmitter);</p>

<p>Stopwatch.prototype.foobar = function() {</p>

<pre><code>console.log('foobar!');
</code></pre>

<p>}</p>

<p>module.exports = Stopwatch;</p>

<p>```</p>

<p>This is also the approach <a href="http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor">taken in the documentation.</a> Guess it pays to rtfm :D</p>

<p>Here's what my final <code>Stopwatch</code> looks like:</p>

<p>``` js models/stopwatch.js
var util    = require('util'),</p>

<pre><code>events  = require('events')
_       = require('underscore');
</code></pre>

<p>// ---------------------------------------------
// Constructor
// ---------------------------------------------
function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

this.hour = 3600000;
this.minute = 60000;
this.second = 1000;
this.time = this.hour;
this.interval = undefined;

events.EventEmitter.call(this);

// Use Underscore to bind all of our methods
// to the proper context
_.bindAll(this);
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Inherit from EventEmitter
// ---------------------------------------------
util.inherits(Stopwatch, events.EventEmitter);</p>

<p>// ---------------------------------------------
// Methods
// ---------------------------------------------
Stopwatch.prototype.start = function() {</p>

<pre><code>console.log('Starting Stopwatch!');
// note the use of _.bindAll in the constructor
// with bindAll we can pass one of our methods to
// setInterval and have it called with the proper 'this' value
this.interval = setInterval(this.onTick, this.second);
this.emit('start');
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.stop = function() {</p>

<pre><code>console.log('Stopping Stopwatch!');
if (this.interval) {
    clearInterval(this.interval);
    this.emit('stop');
}
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.reset = function() {</p>

<pre><code>console.log('Resetting Stopwatch!');
this.time = this.hour;
this.emit('reset');
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.onTick = function() {</p>

<pre><code>var remainder = this.time,
    numHours,
    numMinutes,
    numSeconds,
    output = "";

if (this.time === 0) {
    this.stop();
    return;
}

numHours = String(parseInt(remainder / this.hour, 10));
remainder -= this.hour * numHours;

numMinutes = String(parseInt(remainder / this.minute, 10));
remainder -= this.minute * numMinutes;

numSeconds = String(parseInt(remainder / this.second, 10));

output = _.map([numHours, numMinutes, numSeconds], function(str) {
    if (str.length === 1) {
        str = "0" + str;
    }
    return str;
}).join(":");

this.emit('tick', output);
this.time -= this.second;
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Export
// ---------------------------------------------
module.exports = Stopwatch;
```</p>

<p>And here's how I'm using it in <code>app.js</code></p>

<p>``` js app.js
var Stopwatch = require('./models/stopwatch');</p>

<p>...</p>

<p>var stopwatch = new Stopwatch();
stopwatch.on('tick', function(time) {
  console.log('tick: ' + time);
});
stopwatch.start();
```</p>

<p>Running the above should give you something like this in your console:</p>

<p><code>
tick: 01:00:00
tick: 00:59:59
tick: 00:59:58
tick: 00:59:57
</code></p>

<p>Ok that's it for today. Tomorrow we'll connect all this goodness to a View. If you have questions or feedback feel free to leave a comment. Thanks! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 7:50 am</li>
<li>Mood: Tired</li>
<li>Sleep: 6</li>
<li>Hunger: 4</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Countdown Timer with Socket.io]]></title>
    <link href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/"/>
    <updated>2012-06-05T08:07:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io-pt-2/">Click here for part 2.</a></p>

<p>Yesterday I put together a very simple Node/Socket.io application and showed how to deploy it to Heroku. Today I'm going to keep going with that app to see if I can get the functionality that I want. The app is a basic stopwatch so that shouldn't be too hard. If you want to catch up <a href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/">checkout yesterday's article</a> which explains setting everything up.</p>

<h3>Countdown</h3>

<p>Just to get the ball rolling I'm going to write a little code in my <code>app.js</code> file right at the bottom to setup a very crude counter.</p>

<p>``` js app.js<br/>
var countdown = 1000;
setInterval(function() {
  countdown--;
  io.sockets.emit('timer', { countdown: countdown });
}, 1000);</p>

<p>io.sockets.on('connection', function (socket) {
  socket.on('reset', function (data) {</p>

<pre><code>countdown = 1000;
io.sockets.emit('timer', { countdown: countdown });
</code></pre>

<p>  });
});
```</p>

<p>Elsewhere in my client-side js I'm going to listen for the <code>timer</code> event and update my DOM elements.</p>

<p>``` js main.js
var socket = io.connect(window.location.hostname);</p>

<p>socket.on('timer', function (data) {</p>

<pre><code>$('#counter').html(data.countdown);
</code></pre>

<p>});</p>

<p>$('#reset').click(function() {</p>

<pre><code>socket.emit('reset');
</code></pre>

<p>});
```</p>

<p>Every second we'll decrement our countdown variable and broadcast its new value. If a client sends us a <code>reset</code> event we'll restart the timer and immediately broadcast the update to anyone connected. I noticed that since I'm using <code>xhr-polling</code> it can sometimes take a while for the timer to show up in my browser so keep that in mind.</p>

<p>While this implementation isn't pretty it does get us a little bit further down the road. Unfortunately I've been tripped up by a bunch of Node's module issues so I have to cut tonight's post short :\</p>

<p>Hopefully better luck tomorrow. - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 8:08 am</li>
<li>Mood: Sedate, Sleepy</li>
<li>Sleep: 5</li>
<li>Hunger: 4</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Your First Node.js and Socket.io App to Heroku]]></title>
    <link href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/"/>
    <updated>2012-06-04T22:01:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku</id>
    <content type="html"><![CDATA[<p>At my office we like to shoot each other from across the room with Nerf guns. In an effort to actually remain productive we've implemented a rule that whenever you get shot you're dead for 1 hour. But that hour can be a little tricky to keep track of between players. Who's dead and who isn't? Am I about to be shot right now??</p>

<p>In an effort to keep track of things (and also because I need to write a blog post) I decided to start working on a little <a href="http://nodejs.org/">Node.js</a> and <a href="http://socket.io/">Socket.io</a> app. In this first post I'm just going to get things setup and deploy them to Heroku. Hopefully tomorrow we can work on implementing the actual timers. If you've never worked with Heroku before <a href="https://devcenter.heroku.com/articles/quickstart">you'll need to follow their getting started guide</a> to make sure you have all the proper command line tools. Don't worry, it's really easy and their documentation is <strong>awesome</strong>.</p>

<h3>Express it!</h3>

<p>To start us off we'll use <a href="http://expressjs.com/">Express</a> since it provides a nice, <a href="http://www.sinatrarb.com/">Sinatra</a> like layer on top of Node. If you haven't installed Node yet you can do it from the <a href="http://nodejs.org/">Node.js</a> site. The installer will also include <code>npm</code> which is Node's package manager. Following the instructions on the <a href="http://expressjs.com/">Express</a> site you should be able to just type:</p>

<p><code>
npm install -g express
</code></p>

<p>Now that you have Express installed you can use it to create a new project.</p>

<p><code>
express defcon
</code>
I'm calling my project <code>defcon</code> because I luvz <a href="http://en.wikipedia.org/wiki/WarGames">WarGames</a>. You can call yours whatever you'd like :)</p>

<p>Next we need to <code>cd</code> into the defcon folder so we can install Socket.io and our other dependencies. There's a version of Socket.io designed to work with Express so we'll install that one.</p>

<p><code>
npm install -d  # install Express dependencies
npm install socket.io express
</code></p>

<p>We'll also need to add socket.io to our <code>package.json</code> which is similar to a <code>Gemfile</code> if you're coming from Ruby, or just a big list of file dependencies if you're coming from something else :D When you distribute your app other developers can just run 'npm install -d' and it will add all of the modules listed to their project. Heroku will also use our <code>package.json</code> when we push our app to their servers. I'm also going to replace the <a href="http://jade-lang.com/">Jade</a> rendering engine with <a href="http://embeddedjs.com/">EJS</a> since it's easier for me to work with.</p>

<p>``` js package.json
{</p>

<pre><code>"name": "defcon",
"version": "0.0.1",
"private": true,
"dependencies": {
  "express": "~2.5.8",
  "ejs": "~0.7.1",
  "socket.io": "~0.9.6"
</code></pre>

<p>  },
  "engines": {</p>

<pre><code>"node": "0.6.x"
</code></pre>

<p>  }
}
```</p>

<p>The tilde <code>~</code> character tells NPM that it's ok to install this version of our module, or anything less than the next highest version number. So the following are equivalent: <code>"~1.2" = "&gt;=1.2.0 &lt;2.0.0"</code>. This is typically a good practice with modules because you'd like to receive bug fixes and patches but you don't want to let your app potentially download a v2 of some library which breaks the API.</p>

<p>Run <code>npm install -d</code> again to make sure that <code>ejs</code> and anything else you've added are properly installed. Open up your app.js file that Express provided for you. We'll need to change a lot of stuff so it's probably easiest for you to just copy and paste this one that I've already prepared. Paste it into a new file if you'd like so you can compare all the differences.</p>

<p>``` js app.js
var express = require('express'),</p>

<pre><code>app = express.createServer(express.logger()),
io = require('socket.io').listen(app),
routes = require('./routes');
</code></pre>

<p>// Configuration</p>

<p>app.configure(function() {
  app.set('views', <strong>dirname + '/views');
  app.set('view engine', 'ejs');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(</strong>dirname + '/public'));
});</p>

<p>app.configure('development', function() {
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});</p>

<p>app.configure('production', function() {
  app.use(express.errorHandler());
});</p>

<p>// Heroku won't actually allow us to use WebSockets
// so we have to setup polling instead.
// https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
// io.configure(function () {
//   io.set("transports", ["xhr-polling"]);
//   io.set("polling duration", 10);
// });</p>

<p>// Routes</p>

<p>var port = process.env.PORT || 5000; // Use the port that Heroku provides or default to 5000
app.listen(port, function() {
  console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
});</p>

<p>app.get('/', routes.index);</p>

<p>var status = "All is well.";</p>

<p>io.sockets.on('connection', function (socket) {
  io.sockets.emit('status', { status: status }); // note the use of io.sockets to emit but socket.on to listen
  socket.on('reset', function (data) {</p>

<pre><code>status = "War is imminent!";
io.sockets.emit('status', { status: status });
</code></pre>

<p>  });
});
```</p>

<p>In my views folder I've created a <code>layout.ejs</code>...</p>

<p>``` html views/layout.ejs
&lt;!DOCTYPE html>
<html lang="en">
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;meta name="description" content=""&gt;
&lt;meta name="author" content=""&gt;

&lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;

&lt;!-- styles --&gt;
&lt;link href="http://robdodson.me/css/main.css" rel="stylesheet"&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;%- body %&gt;
&lt;script src="http://robdodson.me/socket.io/socket.io.js"&gt;&lt;/script&gt;
&lt;script src="http://robdodson.me/js/libs/jquery.js"&gt;&lt;/script&gt;
&lt;script src="http://robdodson.me/js/main.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>and an <code>index.ejs</code>.</p>

<p>``` html views/index.ejs</p>

<div id="status"></div>


<p><button id="reset">Reset!</button>
```</p>

<p>If you'd like you can open up <code>routes/index.js' and look around but you don't need to. It should render</code>layout.ejs<code>and</code>index.ejs` by default.</p>

<p>A few more items to go...We need to add a copy of <a href="http://jquery.com/">jQuery</a> to our <code>public</code> folder and also a <code>main.js</code> file. I've renamed the structure to look like this:</p>

<p>```
public
|
|<em> css
|</em> img
|_ js</p>

<pre><code>|_ libs
    |_ jquery.js
|_ plugins
|_ main.js
</code></pre>

<p>```</p>

<p>I guess that's just a habit of using Backbone Boilerplate all the time :) Here's what <code>main.js</code> should look like:</p>

<p>``` js public/js/main.js
var socket = io.connect(window.location.hostname);</p>

<p>socket.on('status', function (data) {</p>

<pre><code>$('#status').html(data.status);
</code></pre>

<p>});</p>

<p>$('#reset').click(function() {</p>

<pre><code>socket.emit('reset');
</code></pre>

<p>});
```</p>

<p>It's important to note the line that says <code>var socket = io.connect(window.location.hostname);</code>. In the socket.io docs they usually tell you to connect to <code>localhost</code> but since we're on heroku we'll need to instead connect to whatever our custom domain is.</p>

<h3>Cross your fingers</h3>

<p>At this point we should be ready to test everything. From the root of your project run <code>node app.js</code>. If all goes well you should see something like this:</p>

<p><code>
   info  - socket.io started
Express server listening on port 5000 in development mode
</code></p>

<p>If not leave me a comment and I'll see if I can help you debug it. However let's assume that everything DID go well for you and now you're ready to connect to the local version of your app. Point your browser to http://localhost:5000 and you should see something like this:</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/all_is_well_with_sockets.png" title="'All is well with Socket.io'" ></p>

<p>Now open another browser window and also point it at localhost:5000. In one of the windows click the button that says <code>Reset</code> which should change the copy in <em>both</em> windows to 'War is imminent!'</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/war_is_imminent_sockets.png" title="'War is Immentin with Socket.io'" ></p>

<h3>Git'er done!</h3>

<p>Alright we should have a functioning app at this point so let's put this baby into Git.</p>

<p><code>
git init
echo 'node_modules' &gt;&gt; .gitignore
</code></p>

<p>We'll ignore the node_modules directory so Heroku can create its own version. Heroku requires that we deploy our app from Git which is kind of an awesome practice. We'll also need to define a <code>Procfile</code> which will list the processes that our app can run.</p>

<p><code>
touch Procfile
echo 'web: node app.js' &gt;&gt; Procfile
</code>
To verify that our <code>Procfile</code> is working we can use Heroku's built in utility called <code>foreman</code>.</p>

<p>```
$ foreman start</p>

<p>23:47:32 web.1     | started with pid 53197
23:47:32 web.1     | info: socket.io started
23:47:32 web.1     | Express server listening on port 5000 in development mode
```</p>

<p>Point your browser to <code>localhost:5000</code> to verify that things are still working. If everything looks good we're ready to commit to git.</p>

<p><code>
git add .
git commit -m 'initial commit'
</code></p>

<h3>Deploy to Heroku</h3>

<p>Now that our app is safely tucked away in git it's time to fire up a new Heroku instance.</p>

<p><code>
$ heroku create --stack cedar
</code></p>

<p>Heroku will do the work of setting up a new <code>git remote</code> for us to push our app to.</p>

<p><code>
$ git push heroku master
</code></p>

<p>We'll need to scale our web process before we can use the app.</p>

<p><code>
$ heroku ps:scale web=1
</code></p>

<p>To see which processes are running on Heroku you can use the <code>heroku ps</code> command.</p>

<p>```
$ heroku ps</p>

<p>Process       State               Command</p>

<hr />

<p>web.1         up for 10s          node app.js
```</p>

<p>With everything setup we should be able to run <code>heroku open</code> which will fire up our browser and direct it to an instance of our app. There seems to be a fair bit of latency so it can take several seconds for the initial status of 'All is well' to show up. If you see the Reset button with nothing above it give it around 10 seconds to see if it eventually updates. Open another browser window and point it at the Heroku domain in the address bar. If you press the Reset button in one window it should immediately update in the next one.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/heroku_war_is_imminent.png" title="'Heroku: War is Imminent'" ></p>

<h3>Wrapping up</h3>

<p>Well I hope you enjoyed this brief tour of Socket.io and Heroku. Before we sign off let's make sure to turn off the running process on our Heroku instance:</p>

<p><code>
$ heroku ps:scale web=0
</code></p>

<p>If all went well you should have a decent starting point to build your own Socket.io app. If you're still having trouble checkout some of the great documentation from Heroku and/or leave a comment:</p>

<p><a href="https://devcenter.heroku.com/articles/nodejs">https://devcenter.heroku.com/articles/nodejs</a></p>

<p><a href="https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku">https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku</a></p>

<p>Good Luck! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 10:02 pm</li>
<li>Mood: Tired, Antsy</li>
<li>Sleep: 5</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use EJS in Express]]></title>
    <link href="http://robdodson.me/blog/2012/05/31/how-to-use-ejs-in-express/"/>
    <updated>2012-05-31T11:34:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/31/how-to-use-ejs-in-express</id>
    <content type="html"><![CDATA[<p>Here's a quick explanation of how to use EJS instead of Jade in your Express projects. This is super easy and covered well in the documentation but I wanted to put it here since that's what I worked on today :)</p>

<p>To start I'll create a new project from the command line:</p>

<p><code>
express foobar
cd foobar
npm install
</code></p>

<p>Now that I have my foobar project created I need to install <code>ejs</code>.</p>

<p><code>
npm install ejs
</code></p>

<p>If you're within your project directory this will place ejs in the <code>node_modules</code> dir. Let's also add it to our package.json.</p>

<p>```
{
  "name": "foobar",
  "version": "0.0.1",
  "private": true,
  "dependencies": {</p>

<pre><code>"express": "~2.5.8",
"ejs": "~0.7.1"
</code></pre>

<p>  }
}
<code>``
The tilde operator means that we require ejs verion 0.7.1 or greater but only up to the next major release. So the following are equivalent:</code>"~1.2" = ">=1.2.0 &lt;2.0.0"`. For a deeper explanation of package.json and NPM in general <a href="http://howtonode.org/introduction-to-npm">checkout this great post</a>.</p>

<h3>Leaving Jade for EJS</h3>

<p>If you're using the boilerplate that Express generates then it should be setup to use Jade as the rendering engine for its views. I think that Jade is cool but I need to baby step into Node/Express and make sure I understand everything that's going on instead of trying to consume so many different tools at once. With this in mind I decided to switch from Jade to EJS at least in the beginning because the syntax has no learning curve. To change your rendering engine you'll need to either add or edit the following call:</p>

<p><code>js
app.set('view engine', 'ejs');
</code></p>

<p>The boilerplate should have this set to <code>jade</code> inside of a configuration block. Once we've changed that line to read <code>ejs</code> we're ready to start writing some views.</p>

<h3>Setting up your layout</h3>

<p>By default Express' boilerplate will look for a file named layout in our views directory. Let's write one called <code>layout.ejs</code>:</p>

<p>``` html views/layout.ejs
&lt;!DOCTYPE html>
<html lang="en">
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;Pivotal Search&lt;/title&gt;
&lt;meta name="description" content=""&gt;
&lt;meta name="author" content=""&gt;

&lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;

&lt;!-- styles --&gt;
&lt;link href="stylesheets/style.css" rel="stylesheet"&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;%- body %&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>This is all really straightforward with the exception of the <code>&lt;%- body %&gt;</code> line which basically works like a <code>yield</code> in erb. Whatever template we pass to Express' <code>response.render()</code> function will fill this dependency, here's an example:</p>

<p><code>js app.js
app.get('/', function(req, res) {
  res.render('index', { title: 'The index page!' })
});
</code></p>

<p>``` html views/index.ejs</p>

<div class="title">
    <%= title %>
</div>


<p>```
<img class="center" src="https://s3.amazonaws.com/robdodson/images/rendering_the_index_template.png" title="'Rendering the index template'" ></p>

<p>Furthermore we can use partials with Express and EJS like so:</p>

<p>``` html views/layout.ejs
&lt;!DOCTYPE html>
<html lang="en">
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;Pivotal Search&lt;/title&gt;
&lt;meta name="description" content=""&gt;
&lt;meta name="author" content=""&gt;

&lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;

&lt;!-- styles --&gt;
&lt;link href="stylesheets/style.css" rel="stylesheet"&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;%- partial('header.ejs') %&gt;
&lt;%- body %&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>``` html views/header.ejs
<header></p>

<pre><code>My awesome header!
</code></pre>

<p></header></p>

<hr>


<p>```</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/rendering_the_header_partial.png" title="'Rendering the header partial'" ></p>

<p>And there ya go! Simple but hopefully useful if you're just getting started like I am :) - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 11:36 am</li>
<li>Mood: Eager, Alert</li>
<li>Sleep: 7</li>
<li>Hunger: 7</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking Requests with Mocha, Chai and Sinon]]></title>
    <link href="http://robdodson.me/blog/2012/05/28/mocking-requests-with-mocha-chai-and-sinon/"/>
    <updated>2012-05-28T11:20:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/28/mocking-requests-with-mocha-chai-and-sinon</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/05/27/testing-backbone-boilerplate-with-mocha-and-chai/">After a bit of a rocky start yesterday</a> I've finally got Mocha and Chai running in the browser which is great. Today I'd like to test out some of the async functionality of Mocha. This seems to be the big selling point for most people so we'll kick the tires a bit.</p>

<h3>Basic Async Tests with Mocha and Chai</h3>

<p>I wrote a little Node service that we'll consume for testing purposes. This is my first <a href="http://nodejs.org/">Node</a> and <a href="http://expressjs.com/">Express</a> app so apologies if it's lamesauce. I used the <code>express</code> command to boilerplate a project called <code>pickles</code> with some very basic routes:</p>

<p>``` js
// Routes</p>

<p>var count = 100;</p>

<p>app.get('/', function(req, res) {
  res.send('Welcome to the Pickle Store!');
});</p>

<p>app.get('/pickles', function(req, res) {
  res.json({</p>

<pre><code>count: count,
message: 'oh boy, ' + count + ' pickles!'
</code></pre>

<p>  });
});</p>

<p>app.get('/pickles/add/:num', function(req, res) {
  count += parseInt(req.params.num);
  res.json({</p>

<pre><code>add: req.params.num,
message: 'you added ' + req.params.num + ' pickles to the pickle barrel!'
</code></pre>

<p>  });
});</p>

<p>app.listen(3000, function(){
  console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
});
```
We'll need to make sure our node service is running for our tests to work and all of our URLs will point at localhost:3000. Obviously you wouldn't want this for a production setting but it'll be fine for demonstration purposes.</p>

<p>Here is our really simple Mocha spec. We're actually creating a <code>pickelStore</code> object in the spec file itself so we can test against it.</p>

<p>``` js test.pickles.js
var expect = chai.expect;</p>

<p>var pickleStore = {
  pickles: function() {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>pickleStore.pickles();
</code></pre>

<p>  });
});
```</p>

<p>I just want to see if the ajax methods will run and hit our Node service but I'm running into the following issue in Chrome:</p>

<p><code>
XMLHttpRequest cannot load http://localhost:3000/pickles. Origin null is not allowed by Access-Control-Allow-Origin.
</code>
Bummer... :(</p>

<p>OK, what's going on here... To StackOverflow! <a href="http://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin/8456586#8456586">Aaaand we have our response.</a> After a bit of googling I came across <a href="http://www.stoimen.com/blog/2010/11/19/diving-into-node-js-very-first-app/">this post</a> which mentions adding <code>res.header('Access-Control-Allow-Origin', '*');</code> to my Node responses. That does the trick. I also found <a href="http://www.stoimen.com/blog/2010/11/19/diving-into-node-js-very-first-app/">this post</a> which describes setting up <a href="https://developer.mozilla.org/en/http_access_control">CORS</a> with Express.</p>

<p>OK hopefully we're done with Node for now. I don't want this to turn into a node tutorial... Let's see if we can get the tests to perform using Mocha. We'll need some way to mock and spy on the ajax because I don't want to test the data coming from the actual service. I've realized I want to <em>simulate</em> the service for client-side Mocha tests. In a future tutorial I'll test the service itself using the Node aspect of Mocha. Kind of silly to lead off this way but whatever, moving on!</p>

<h3>Enter Sinon.js</h3>

<p>I'm going to use <a href="http://sinonjs.org/">Sinon.js</a> to help me mock, stub, fake, spy and do whatever the heck else I need to make sure my client code is solid. After downloading the js file for Sinon you can just add it to our test/index.html under the line where we added mocha.</p>

<p>``` html
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link rel="stylesheet" href="mocha/mocha.css" />
  <script src="../assets/js/libs/jquery.js"></script>
  <script src="chai/chai.js"></script>
  <script src="mocha/mocha.js"></script>
  <script src="sinon/sinon.js"></script>
  <script>mocha.setup('bdd');</script>
  <script src="test.pickles.js"></script>
  <script></p>

<pre><code>$(function() {
  mocha.run();
})
</code></pre>

<p>  </script>
</head>
<body>
  <div id="mocha"></div>
</body>
</html>
```</p>

<p>Now we can use Sinon in our <code>test.pickles.js</code> file to get a handled on our ajax. Let's first test that an ajax call is made when we run the <code>pickles()</code> method of the <code>pickleStore</code> object. We'll make sure this first test fails, then we'll change the spec to make it pass.</p>

<p>``` js test.pickles.js
var expect = chai.expect;</p>

<p>var pickleStore = {
  pickles: function() {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy.
beforeEach(function() {
  sinon.spy($, 'ajax');
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.false; // see if the spy WASN'T called
  done(); // let Mocha know we're done async testing
});
</code></pre>

<p>  });
});
```
<img class="center" src="https://s3.amazonaws.com/robdodson/images/first_failing_ajax_test.png" title="'Our first failing test with Mocha, Chai and Sinon. Yay!'" ></p>

<p>Changing this line <code>expect($.ajax.calledOnce).to.be.false;</code> from <code>false</code> to <code>true</code> should make our test pass. Yay, first async test in the bag! Next let's try to fake a response from the server. But I'm realizing that the succesful server response should <em>do</em> something to my pickleStore object, otherwise why do I care about the data? So I'm going to update pickelStore with the following success callback on its pickles method:</p>

<p>``` js test.pickles.js
var pickleStore = {
  count: 0,
  status: '',
  pickles: function() {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    self.count = parseInt(data.count);
    self.status = data.status;
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    console.log(data);
  }
});
</code></pre>

<p>  }
};</p>

<p>... .
```</p>

<p>Now we can test what happens after the server sends a succesful response. But how do we get that response and how do we force the success callback? For that we'll need to use Sinon's <code>stub.yieldsTo</code> method. It's mentioned in <a href="http://sinonjs.org/docs/#stubs">the docs on this page</a> if you scroll down. <code>yieldsTo</code> lets us direct the path of our spy so it will not only pretend to be jQuery's <code>ajax</code> method, but it will also force itself into the <code>success</code> callback with an optional hash of parameters which simulate our service response. Sweet! We'll have to revise the <code>beforeEach</code> in our spec though otherwise Sinon will complain that we're wrapping <code>ajax</code> twice. The updated spec should look like this. Again, take note that we're going to make it fail first by expecting a count of 99 pickles instead of 100.</p>

<p>``` js test.pickles.js
... .</p>

<p>describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy. This spy will also come with
// some success data.
beforeEach(function() {
  sinon.stub($, 'ajax').yieldsTo('success', {
    count: '100',
    message: 'oh boy, 100 pickles!'
  });
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.true;
  done();
});

it('should update the count', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.count).to.equal(99);
  done();
});
</code></pre>

<p>  });
});
```</p>

<p>Failing as expected. Aaaaand we change the expected count to 100, voila! Passing tests again!</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/passing_yield_test.png" title="'Passing test with Sinon's yieldTo'" ></p>

<p>I'm adding the test for the status update as well so our final <code>#pickles</code> spec should look like this:</p>

<p>``` js test.pickles.js
describe('Pickle Store', function() {
  describe('#pickles', function() {</p>

<pre><code>// Use Sinon to replace jQuery's ajax method
// with a spy. This spy will also come with
// some success data.
beforeEach(function() {
  sinon.stub($, 'ajax').yieldsTo('success', {
    count: '100',
    message: 'oh boy, 100 pickles!'
  });
});

// Restor jQuery's ajax method to its
// original state
afterEach(function() { 
  $.ajax.restore();
})

it('should make an ajax call', function(done) {
  pickleStore.pickles();
  expect($.ajax.calledOnce).to.be.true;
  done();
});

it('should update the count', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.count).to.equal(100);
  done();
});

it('should update the status', function(done) {      
  pickleStore.pickles();
  expect(pickleStore.status).to.equal('oh boy, 100 pickles!');
  done();
});
</code></pre>

<p>  });
});
```</p>

<p>Now let's test the <code>#add</code> method before calling it a day. This method is interesting because all it can really do is update our status message. However, once it's called the value returned by <code>pickles()</code> should have incremented by whatever amount was passed to <code>add()</code>. Let's start by updating our <code>pickleStore</code> so it properly updates the status message after we've called add.</p>

<p>``` js test.pickles.js
var pickleStore = {
  count: 0,
  status: '',
  pickles: function() {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles',
  dataType: 'json',
  success: function(data) {
    self.count = parseInt(data.count);
    self.status = data.message;
  }
});
</code></pre>

<p>  },
  add: function(num) {</p>

<pre><code>var self = this;
$.ajax({
  url: 'http://localhost:3000/pickles/add/' + num,
  dataType: 'json',
  success: function(data) {
    self.status = data.message; // &lt;-- update the status message!
  }
});
</code></pre>

<p>  }
};
```</p>

<p>Now that that's in there we'll write a failing spec.</p>

<p>``` js test.pickles.js
describe('#add', function() {</p>

<p>  var amount = 11;</p>

<p>  beforeEach(function() {</p>

<pre><code>sinon.stub($, 'ajax').yieldsTo('success', {
  add: amount,
  message: 'you added ' + amount + ' pickles to the pickle barrel!'
});
</code></pre>

<p>  });</p>

<p>  afterEach(function() {</p>

<pre><code>$.ajax.restore();
</code></pre>

<p>  });</p>

<p>  it('should update the status with the correct amount', function(done) {</p>

<pre><code>pickleStore.add(amount);
expect(pickleStore.status).to.equal('you added ' + 99 + ' pickles to the pickle barrel!');
done();
</code></pre>

<p>  });
});
```</p>

<p>This is not unlike our previous spec, in fact it does even less since we're not checking count.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/failing_add_test.png" title="'Another failing test.'" ></p>

<p>To make the test pass we change the 99 to <code>amount</code>. I originally wrote the add method thinking I would go back and check the total number of pickles but I've realized now that really that's more of a test for the service and not the front end. The front end shouldn't care if that arithmetic is happening properly, it should just consume data and update its UI. For tomorrow's post I'll try to get an AMD module in here so we can start playing with Backbone again. Thanks!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 11:21 am</li>
<li>Mood: Irritated, Antsy</li>
<li>Sleep: 8</li>
<li>Hunger: 5</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
