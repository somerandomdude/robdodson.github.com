<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2013-01-09T08:24:02-08:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Publish your Node Library to NPM]]></title>
    <link href="http://robdodson.me/blog/2012/06/16/publish-your-node-library-to-npm/"/>
    <updated>2012-06-16T23:06:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/16/publish-your-node-library-to-npm</id>
    <content type="html"><![CDATA[<p>Alright, <a href="http://robdodson.me/blog/2012/06/15/how-to-run-a-node-script-from-the-command-line/">contuing from yesterday</a> we want to take our little Node module and make it available to the world as a really awesome command line tool.</p>

<!--more-->


<p>The first thing we need to do is register an NPM account.</p>

<p><code>npm adduser</code></p>

<p>Fill in your credentials and it should be ready to go.</p>

<p>If we have any dependencies they should be added to our <code>package.json</code> file. Our simple <code>compliment</code> program doesn't need any extra libraries but we'll add <code>xml2json</code> just to demonstrate how it's done.</p>

<p>``` js package.json
{</p>

<pre><code>"name": "compliment",
"version": "0.0.1",
"description": "Tell us how awesome we are.",
"preferGlobal": "true",
"bin": { "compliment": "compliment.js" },
"author": "Rob Dodson",
"dependencies": {
    "xml2json": "0.2.4"
},
"engines": { "node": "*" }
</code></pre>

<p>}
```</p>

<p>Since we've changed our <code>package.json</code> we need to run <code>npm link</code> again to install the dependency. After that you should have a <code>node_modules/</code> folder in your project root.</p>

<p>Let's put this baby under version control!</p>

<p><code>
git init
echo node_modules/ &gt;&gt; .gitignore # node_modules should be installed by npm
git add .
git commit -am 'Initial commit'
</code></p>

<p>Final step: <code>npm publish</code></p>

<h1>BOOMJAMS! We have us an npm module! - Rob</h1>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Hyper</li>
    <li>Sleep: 5</li>
    <li>Hunger: 1</li>
    <li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run a Node Script from the Command Line]]></title>
    <link href="http://robdodson.me/blog/2012/06/15/how-to-run-a-node-script-from-the-command-line/"/>
    <updated>2012-06-15T19:46:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/15/how-to-run-a-node-script-from-the-command-line</id>
    <content type="html"><![CDATA[<p>This post is going to be short and sweet because I have to help my lady pack for her big trip to Germany. Over the past few days I've been messing around with command line tools written in Ruby so today I decided to give it a shot in Node.</p>

<!--more-->


<p>We're going to start small in this first post and just get a little script running. After that we'll step it up so it can be distributed using NPM, <a href="http://robdodson.me/blog/2012/06/14/how-to-write-a-command-line-ruby-gem/">just like we did with our previous Ruby gem.</a></p>

<h2>First write some codez</h2>

<p>Make a new directory called <code>compliment</code> and create two files inside of it: <code>comliment.js</code> and <code>package.json</code>.</p>

<p>In <code>compliment.js</code> we're just going to print out some kind words.</p>

<p>``` js compliment/compliment.js</p>

<h1>! /usr/bin/env node</h1>

<p>console.log('you. are. AWESOME!');
```</p>

<p>Simple enough right? Just make sure you include that shebang up at the top which directs the system to use Node to execute our script.</p>

<h2>Package it up</h2>

<p>Ok now that we have our little script we'll give its <code>package.json</code> some love.</p>

<p>``` js compliment/package.json
{</p>

<pre><code>"name": "compliment",
"version": "0.0.1",
"description": "Tell us how awesome we are.",
"preferGlobal": "true",
"bin": { "compliment": "compliment.js" },
"author": "Rob Dodson",
"engines": { "node": "*" }
</code></pre>

<p>}
```</p>

<p>Most of that should be self explanatory. The key aspect is the <code>bin</code> section where you tell it to translate <code>compliment</code> into <code>compliment.js</code>. To install it all we have to do is run <code>npm link</code>. After you've done that you should be able to type <code>compliment</code> and hear how awesome you are!</p>

<p>Keep in mind this isn't distributable just yet, we'll work on that tomorrow. Till then have fun playing with your new powers :D</p>

<ul>
<li>Rob</li>
</ul>


<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Awake, Antsy</li>
    <li>Sleep: 6</li>
    <li>Hunger: 2</li>
    <li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Countdown Timer with Socket.io pt. 3]]></title>
    <link href="http://robdodson.me/blog/2012/06/07/building-a-countdown-timer-with-socket-dot-io-pt-3/"/>
    <updated>2012-06-07T19:41:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/07/building-a-countdown-timer-with-socket-dot-io-pt-3</id>
    <content type="html"><![CDATA[<p>Today's the day we wrap up our countdown timer and deploy it to Heroku. But before we launch this puppy we need to clean house a little and spice up the visual appeal.</p>

<!--more-->


<ul>
<li><a href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/">Getting Started</a></li>
<li><a href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/">Click here for part 1.</a></li>
<li><a href="http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2/">Click here for part 2.</a></li>
</ul>


<h3>Refactoring the Stopwatch</h3>

<p>While the Stopwatch from our last post worked OK there are a spots that can be improved. For starters I'd like to separate the formatting of the time from the <code>onTick</code> method. Mainly because I want to be able to pull the current time out whenever someone hits reset or a new connection is made. Here's how I updated Stopwatch to accomodate these changes:</p>

<p>``` js modles/stopwatch.js
var util    = require('util'),</p>

<pre><code>events  = require('events')
_       = require('underscore');
</code></pre>

<p>// ---------------------------------------------
// Constructor
// ---------------------------------------------
function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

this.hour = 3600000;
this.minute = 60000;
this.second = 1000;
this.time = this.hour;
this.interval = undefined;

events.EventEmitter.call(this);

// Use Underscore to bind all of our methods
// to the proper context
_.bindAll(this);
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Inherit from EventEmitter
// ---------------------------------------------
util.inherits(Stopwatch, events.EventEmitter);</p>

<p>// ---------------------------------------------
// Methods
// ---------------------------------------------
Stopwatch.prototype.start = function() {</p>

<pre><code>if (this.interval) {
    return;
}

console.log('Starting Stopwatch!');
// note the use of _.bindAll in the constructor
// with bindAll we can pass one of our methods to
// setInterval and have it called with the proper 'this' value
this.interval = setInterval(this.onTick, this.second);
this.emit('start:stopwatch');
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.stop = function() {</p>

<pre><code>console.log('Stopping Stopwatch!');
if (this.interval) {
    clearInterval(this.interval);
    this.interval = undefined;
    this.emit('stop:stopwatch');
}
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.reset = function() {</p>

<pre><code>console.log('Resetting Stopwatch!');
this.time = this.hour;
this.emit('reset:stopwatch', this.formatTime(this.time));
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.onTick = function() {</p>

<pre><code>this.time -= this.second;

var formattedTime = this.formatTime(this.time);
this.emit('tick:stopwatch', formattedTime);

if (this.time === 0) {
    this.stop();
}
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.formatTime = function(time) {</p>

<pre><code>var remainder = time,
    numHours,
    numMinutes,
    numSeconds,
    output = "";

numHours = String(parseInt(remainder / this.hour, 10));
remainder -= this.hour * numHours;

numMinutes = String(parseInt(remainder / this.minute, 10));
remainder -= this.minute * numMinutes;

numSeconds = String(parseInt(remainder / this.second, 10));

output = _.map([numHours, numMinutes, numSeconds], function(str) {
    if (str.length === 1) {
        str = "0" + str;
    }
    return str;
}).join(":");

return output;
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.getTime = function() {</p>

<pre><code>return this.formatTime(this.time);
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Export
// ---------------------------------------------
module.exports = Stopwatch;
```</p>

<p>I also namespaced the events so they would be easier to read when mixed in with the socket.io events. During the refactoring I noticed there were a lot of actors listening to, emitting or calling something like <code>start</code>. I'm not sure if there are common socket.io namespacing patterns but I based what I did on Backbone events and I think it works out well enough.</p>

<h3>Cleaning up app.js</h3>

<p>These changes to <code>Stopwatch</code> also require us to update the <code>app.js</code> that uses it.</p>

<p>``` js app.js
var stopwatch = new Stopwatch();
stopwatch.on('tick:stopwatch', function(time) {
  io.sockets.emit('time', { time: time });
});</p>

<p>stopwatch.on('reset:stopwatch', function(time) {
  io.sockets.emit('time', { time: time });
});</p>

<p>stopwatch.start();</p>

<p>io.sockets.on('connection', function (socket) {
  io.sockets.emit('time', { time: stopwatch.getTime() });</p>

<p>  socket.on('click:start', function () {</p>

<pre><code>stopwatch.start();
</code></pre>

<p>  });</p>

<p>  socket.on('click:stop', function () {</p>

<pre><code>stopwatch.stop();
</code></pre>

<p>  });</p>

<p>  socket.on('click:reset', function () {</p>

<pre><code>stopwatch.reset();
</code></pre>

<p>  });
});
```</p>

<p>I've made it so whenever a user resets or connects to the page they get the latest time. And of course whenever the stopwatch ticks they'll get an update as well. I think it might also be nice if pressing start dispatched the latest time, I should probably add that... ;)</p>

<h3>Tweaking the views</h3>

<p>Lastly I've updated the view by adding some more buttons to correspond to the start/stop and reset methods. I've also wrapped everything in a container to make it easier to position:</p>

<p>``` html views/index.ejs</p>

<div id="wrapper">
    <div id="countdown"></div>
    <button id="start" class="thoughtbot">Start</button>
    <button id="stop" class="thoughtbot">Stop</button>
    <button id="reset" class="thoughtbot">Reset</button>
</div>


<p><code>
</code> js public/js/main.js
var socket = io.connect(window.location.hostname);</p>

<p>socket.on('time', function (data) {</p>

<pre><code>$('#countdown').html(data.time);
</code></pre>

<p>});</p>

<p>$('#start').click(function() {</p>

<pre><code>socket.emit('click:start');
</code></pre>

<p>});</p>

<p>$('#stop').click(function() {</p>

<pre><code>socket.emit('click:stop');
</code></pre>

<p>});</p>

<p>$('#reset').click(function() {</p>

<pre><code>socket.emit('click:reset');
</code></pre>

<p>});
```
Also notice that the socket events coming from the view have been namespaced as well.</p>

<h3>Improving the type</h3>

<p>Next up I want to enhance the type using <a href="http://www.google.com/webfonts">one of Google's webfonts.</a> I chose a font called <code>Black Ops One</code> which seemed appropriately militaristic. Setting it up was as easy as adding one line to my <code>layout.ejs</code></p>

<p><code>html views/layout.ejs
&lt;link href='http://fonts.googleapis.com/css?family=Black+Ops+One' rel='stylesheet' type='text/css'&gt;
</code></p>

<p>and my <code>main.css</code> file:</p>

<p>``` css public/css/main.css</p>

<h1>countdown {</h1>

<p>  font-family: 'Black Ops One', cursive;
  font-size: 90px;
}
<code>``
Finally I chose to use some funky buttons from [Chad Mazzola's CSS3 Buttons project.](https://github.com/ubuwaits/css3-buttons) I went with the Thoughtbot buttons since they were red and awesome. The styles are pretty long so I'm just going to post my entire</code>main.css` for you to see:</p>

<p>``` css public/css/main.css</p>

<h1>wrapper {</h1>

<p>  width: 475px;
  height: 171px;
  margin: 100px auto;
}</p>

<h1>countdown {</h1>

<p>  font-family: 'Black Ops One', cursive;
  font-size: 90px;
}</p>

<p>button.thoughtbot {
  background-color: #ee432e;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ee432e), color-stop(50%, #c63929), color-stop(50%, #b51700), color-stop(100%, #891100));
  background-image: -webkit-linear-gradient(top, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%);
  background-image: -moz-linear-gradient(top, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%);
  background-image: -ms-linear-gradient(top, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%);
  background-image: -o-linear-gradient(top, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%);
  background-image: linear-gradient(top, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%);
  border: 1px solid #951100;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px;
  -webkit-box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4), 0 1px 3px #333333;
  -moz-box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4), 0 1px 3px #333333;
  box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4), 0 1px 3px #333333;
  color: #fff;
  font: bold 20px "helvetica neue", helvetica, arial, sans-serif;
  line-height: 1;
  padding: 12px 0 14px 0;
  text-align: center;
  text-shadow: 0px -1px 1px rgba(0, 0, 0, 0.8);
  width: 150px;
}</p>

<p>button.thoughtbot:hover {
  background-color: #f37873;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f37873), color-stop(50%, #db504d), color-stop(50%, #cb0500), color-stop(100%, #a20601));
  background-image: -webkit-linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%);
  background-image: -moz-linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%);
  background-image: -ms-linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%);
  background-image: -o-linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%);
  background-image: linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%);
  cursor: pointer;
}</p>

<p>button.thoughtbot:active {
  background-color: #d43c28;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #d43c28), color-stop(50%, #ad3224), color-stop(50%, #9c1500), color-stop(100%, #700d00));
  background-image: -webkit-linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%);
  background-image: -moz-linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%);
  background-image: -ms-linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%);
  background-image: -o-linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%);
  background-image: linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%);
  -webkit-box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4);
  -moz-box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4);
  box-shadow: inset 0px 0px 0px 1px rgba(255, 115, 100, 0.4);
}
```
<img class="center" src="https://s3.amazonaws.com/robdodson/images/defcon_final.png" title="'Defcon final'" ></p>

<p>SWEEEEEEET! I'll go ahead and host it on Heroku but first I have to find out what the cost of leaving Node.js/Socket.io running indefinitely would be. Till then you should be able to get a local version of all this working or <a href="https://github.com/robdodson/defcon">just clone the Github repo</a> and now you too can have your very own Defcon stopwatch. enjoy! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Tired, Lazy</li>
    <li>Sleep: 6</li>
    <li>Hunger: 3</li>
    <li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Countdown Timer with Socket.io pt. 2]]></title>
    <link href="http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2/"/>
    <updated>2012-06-06T07:47:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/">Continuing from yesterday's post</a> we started out with a rather crude timer and today I want to upgrade it to a full fledged model, <code>Stopwatch</code>, which dispatches events for the view to hook on to.</p>

<!--more-->


<ul>
<li><a href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/">Getting Started</a></li>
<li><a href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/">Click here for part 1.</a></li>
<li><a href="http://robdodson.me/blog/2012/06/07/building-a-countdown-timer-with-socket-dot-io-pt-3/">Click here for part 3.</a></li>
</ul>


<h3>Extend Node's EventEmitter</h3>

<p>We want to extend Node's EventEmitter object in order for our Stopwatch to dispatch its tick events. <a href="http://elegantcode.com/2011/02/21/taking-baby-steps-with-node-js-implementing-events/">Following this great article by Jan Van Ryswyck</a> I've arrived at something that looks like this:</p>

<p>``` js models/stopwatch.js
var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);

var self = this;
setInterval(function() {
    self.emit('tick');
}, 1000);
</code></pre>

<p>};</p>

<p>util.inherits(Stopwatch, events.EventEmitter);
module.exports = Stopwatch;
```</p>

<p>In our app.js we'll need to <code>require</code> our new Stopwatch module, create an instance of it, and add a listener for the tick event. Here's the abbreviated version:</p>

<p>``` js app.js
var Stopwatch = require('./models/stopwatch');</p>

<p>...</p>

<p>var stopwatch = new Stopwatch();
stopwatch.on('tick', function() {
  console.log('stopwatch tick!');
});
```
If all goes well when you restart your server you should see 'stopwatch tick!' arriving every second.</p>

<h3>Add to the prototype the RIGHT way</h3>

<p>This next part is what tripped me up the other night and since it was rather late in the evening I was too out of it to figure out what was going wrong.</p>

<p>To recap, we've created a model called <code>Stopwatch</code>, we gave it a constructor function and we told it to extend <code>events.EventEmitter</code>.</p>

<p>Now I want to add a new method to my stopwatch but here's where you might run into a real gotcha. If you're like me you'd probably add it like this:</p>

<p>``` js models/stopwatch.js
var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.foobar = function() {</p>

<pre><code>console.log('foobar!');
</code></pre>

<p>}</p>

<p>util.inherits(Stopwatch, events.EventEmitter);</p>

<p>module.exports = Stopwatch;
```</p>

<p>Aaaand your app would explode like this:</p>

<p><code>
[ERROR] TypeError
TypeError: Object #&lt;Stopwatch&gt; has no method 'foobar'
</code></p>

<p>That's because we can only add new methods <strong>after calling <code>util.inherits</code>.</strong> The proper way would look like this:</p>

<p>``` js models/stopwatch.js</p>

<p>var util = require('util'),</p>

<pre><code>events = require('events');
</code></pre>

<p>function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

events.EventEmitter.call(this);
</code></pre>

<p>};</p>

<p>util.inherits(Stopwatch, events.EventEmitter);</p>

<p>Stopwatch.prototype.foobar = function() {</p>

<pre><code>console.log('foobar!');
</code></pre>

<p>}</p>

<p>module.exports = Stopwatch;</p>

<p>```</p>

<p>This is also the approach <a href="http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor">taken in the documentation.</a> Guess it pays to rtfm :D</p>

<p>Here's what my final <code>Stopwatch</code> looks like:</p>

<p>``` js models/stopwatch.js
var util    = require('util'),</p>

<pre><code>events  = require('events')
_       = require('underscore');
</code></pre>

<p>// ---------------------------------------------
// Constructor
// ---------------------------------------------
function Stopwatch() {</p>

<pre><code>if(false === (this instanceof Stopwatch)) {
    return new Stopwatch();
}

this.hour = 3600000;
this.minute = 60000;
this.second = 1000;
this.time = this.hour;
this.interval = undefined;

events.EventEmitter.call(this);

// Use Underscore to bind all of our methods
// to the proper context
_.bindAll(this);
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Inherit from EventEmitter
// ---------------------------------------------
util.inherits(Stopwatch, events.EventEmitter);</p>

<p>// ---------------------------------------------
// Methods
// ---------------------------------------------
Stopwatch.prototype.start = function() {</p>

<pre><code>console.log('Starting Stopwatch!');
// note the use of _.bindAll in the constructor
// with bindAll we can pass one of our methods to
// setInterval and have it called with the proper 'this' value
this.interval = setInterval(this.onTick, this.second);
this.emit('start');
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.stop = function() {</p>

<pre><code>console.log('Stopping Stopwatch!');
if (this.interval) {
    clearInterval(this.interval);
    this.emit('stop');
}
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.reset = function() {</p>

<pre><code>console.log('Resetting Stopwatch!');
this.time = this.hour;
this.emit('reset');
</code></pre>

<p>};</p>

<p>Stopwatch.prototype.onTick = function() {</p>

<pre><code>var remainder = this.time,
    numHours,
    numMinutes,
    numSeconds,
    output = "";

if (this.time === 0) {
    this.stop();
    return;
}

numHours = String(parseInt(remainder / this.hour, 10));
remainder -= this.hour * numHours;

numMinutes = String(parseInt(remainder / this.minute, 10));
remainder -= this.minute * numMinutes;

numSeconds = String(parseInt(remainder / this.second, 10));

output = _.map([numHours, numMinutes, numSeconds], function(str) {
    if (str.length === 1) {
        str = "0" + str;
    }
    return str;
}).join(":");

this.emit('tick', output);
this.time -= this.second;
</code></pre>

<p>};</p>

<p>// ---------------------------------------------
// Export
// ---------------------------------------------
module.exports = Stopwatch;
```</p>

<p>And here's how I'm using it in <code>app.js</code></p>

<p>``` js app.js
var Stopwatch = require('./models/stopwatch');</p>

<p>...</p>

<p>var stopwatch = new Stopwatch();
stopwatch.on('tick', function(time) {
  console.log('tick: ' + time);
});
stopwatch.start();
```</p>

<p>Running the above should give you something like this in your console:</p>

<p><code>
tick: 01:00:00
tick: 00:59:59
tick: 00:59:58
tick: 00:59:57
</code></p>

<p>Ok that's it for today. Tomorrow we'll connect all this goodness to a View. If you have questions or feedback feel free to leave a comment. Thanks! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Tired</li>
    <li>Sleep: 6</li>
    <li>Hunger: 4</li>
    <li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Countdown Timer with Socket.io]]></title>
    <link href="http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io/"/>
    <updated>2012-06-05T08:07:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/05/building-a-countdown-timer-with-socket-dot-io</id>
    <content type="html"><![CDATA[<p>Yesterday I put together a very simple Node/Socket.io application and showed how to deploy it to Heroku. Today I'm going to keep going with that app to see if I can get the functionality that I want. The app is a basic stopwatch so that shouldn't be too hard. If you want to catch up <a href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/">checkout yesterday's article</a> which explains setting everything up.</p>

<!--more-->


<ul>
<li><a href="http://robdodson.me/blog/2012/06/04/deploying-your-first-node-dot-js-and-socket-dot-io-app-to-heroku/">Getting Started</a></li>
<li><a href="http://robdodson.me/blog/2012/06/06/building-a-countdown-timer-with-socket-dot-io-pt-2/">Click here for part 2.</a></li>
<li><a href="http://robdodson.me/blog/2012/06/07/building-a-countdown-timer-with-socket-dot-io-pt-3/">Click here for part 3.</a></li>
</ul>


<h3>Countdown</h3>

<p>Just to get the ball rolling I'm going to write a little code in my <code>app.js</code> file right at the bottom to setup a very crude counter.</p>

<p>``` js app.js<br/>
var countdown = 1000;
setInterval(function() {
  countdown--;
  io.sockets.emit('timer', { countdown: countdown });
}, 1000);</p>

<p>io.sockets.on('connection', function (socket) {
  socket.on('reset', function (data) {</p>

<pre><code>countdown = 1000;
io.sockets.emit('timer', { countdown: countdown });
</code></pre>

<p>  });
});
```</p>

<p>Elsewhere in my client-side js I'm going to listen for the <code>timer</code> event and update my DOM elements.</p>

<p>``` js main.js
var socket = io.connect(window.location.hostname);</p>

<p>socket.on('timer', function (data) {</p>

<pre><code>$('#counter').html(data.countdown);
</code></pre>

<p>});</p>

<p>$('#reset').click(function() {</p>

<pre><code>socket.emit('reset');
</code></pre>

<p>});
```</p>

<p>You'll also need to update your index.ejs file so it reads like this:</p>

<p>``` html views/index.ejs</p>

<div id="counter"></div>


<p><button id="reset">Reset!</button>
```</p>

<p>Every second we'll decrement our countdown variable and broadcast its new value. If a client sends us a <code>reset</code> event we'll restart the timer and immediately broadcast the update to anyone connected. I noticed that since I'm using <code>xhr-polling</code> it can sometimes take a while for the timer to show up in my browser so keep that in mind.</p>

<p>While this implementation isn't pretty it does get us a little bit further down the road. Unfortunately I've been tripped up by a bunch of Node's module issues so I have to cut tonight's post short :\</p>

<p>Hopefully better luck tomorrow. - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Sedate, Sleepy</li>
    <li>Sleep: 5</li>
    <li>Hunger: 4</li>
    <li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
