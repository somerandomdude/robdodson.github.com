<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Patterns | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-08-05T15:13:39-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Design Patterns: Strategy]]></title>
    <link href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns-strategy/"/>
    <updated>2012-08-03T15:12:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/08/03/javascript-design-patterns-strategy</id>
    <content type="html"><![CDATA[<h4><a href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns/">Back to Table of Contents</a></h4>

<p>The Strategy pattern is one of my personal favorites and you've probably seen or used it in some fashion without even knowing it. Its primary purpose is to help you separate the parts of an object which are subject to change from the rest of the static bits. Using Strategy objects versus subclasses can often result in much more flexible code since you're creating a suite of easily swappable algorithms.</p>

<h2>Formal Definition</h2>

<p><blockquote><p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p><footer><strong>GoF</strong> <cite>Design Patterns: Elements of Reusable Object-Oriented Software</cite></footer></blockquote></p>

<h3>Also Known As</h3>

<ul>
<li>Policy</li>
</ul>


<h2>Contrived Example Time!</h2>

<p>Let's say you're making a game and you have a Character class. This game has all sorts of different terrain types so your character can run through open fields, walk slowly through swamps or swim under the ocean. Since you don't know what kind of other terrains the game designer is going to think up you decide that it would be a bad idea to give each character <code>run</code>, <code>walk</code>, and <code>swim</code> methods. After all, what if suddenly the character needs to <code>fly</code> or <code>crawl</code>? What if they're wounded and they need to <code>limp</code>? This situation could potentially get out of hand very fast...</p>

<p>There's a good chance you've seen or written code like this before:</p>

<p>``` js
function move() {</p>

<pre><code>if (state === 'walking') {
    // do some walk animation
} else if (state === 'running') {
    // do some running animation
} else if (state === 'swimming') {
    // do some swimming animation
}
</code></pre>

<p>}
```</p>

<p>When you see a big conditional like that or a switch statement it's time to stop and wonder if there's a better way. For instance if we need to subclass our Character we're going to have to override that big conditional. What if we only want to replace the <code>swimming</code> bit? We'll have to copy and paste the code from the super class for <code>walking</code> and <code>running</code> and then write new code specifically for <code>swimming</code>. And of course if <code>walking</code> and <code>running</code> ever change we're totally screwed.</p>

<h3>We need a Strategy to deal with this</h3>

<p>Ok so we know that our character is going to be a real contortionist and need to run and jump and crab-walk all over the place. What if we took the code that made her run and we put it in its own object? How about we just define a Class for movements and we do this for all the different kinds of motion? Then when we need to move our Character we'll just tell it to defer to one of these Movement objects.</p>

<p>``` js
var Movement = function(func) {</p>

<pre><code>this.move = func;
</code></pre>

<p>};</p>

<p>Movement.prototype.execute = function() {</p>

<pre><code>this.move();
</code></pre>

<p>};</p>

<p>var running = new Movement(function() {</p>

<pre><code>console.log("Hey I'm running!");
</code></pre>

<p>});</p>

<p>var walking = new Movement(function() {</p>

<pre><code>console.log("Just walking along...");
</code></pre>

<p>});
```</p>

<p>Now when we want to tell our character to move in a different way we'll just update which Movement object its currently referencing.</p>

<p>``` js
function changeMovementType(movement) {</p>

<pre><code>this.movement = movement;
</code></pre>

<p>}</p>

<p>function move() {</p>

<pre><code>this.movement.execute();
</code></pre>

<p>}
```</p>

<p>In practice you might have something that looks like this:</p>

<p>``` js
var running = new Movement(function() {</p>

<pre><code>console.log("Hey I'm running!");
</code></pre>

<p>});</p>

<p>var walking = new Movement(function() {</p>

<pre><code>console.log("Just walking along...");
</code></pre>

<p>});</p>

<p>// Create a hero and walk through a peaceful forest...</p>

<p>var hero = new Character();
hero.changeMovementType(walking);
hero.move();</p>

<p>// ... OH NO MOTHERFUCKIN' DINOSAURS!!!</p>

<p>hero.changeMovementType(running);
hero.move();
```</p>

<p>Now it's easy for us to add as many different kinds of motion as our little game designer can dream up. Want to give the character gas-powered robotic legs? No problem!</p>

<p>``` js
var robotlegs = new Movement(function() {</p>

<pre><code>console.log("Cruisin for oil...Look out humans!");
</code></pre>

<p>});</p>

<p>hero.changeMovementType(robotlegs);
hero.move();
```</p>

<h2>When to use it</h2>

<p>When you have a part of your Class that's subject to change frequently or perhaps you have many related subclasses which only differ in behavior it's often a good time to consider using a Strategy pattern.</p>

<p>Another benefit of the Strategy pattern is that it can hide complex logic or data that the client doesn't need to know about.</p>

<h2>The Painting App</h2>

<p>For a real world example of when to use Strategy objects consider your typical painting program. Often times you will offer a variety of different brush types to your user but you don't want to have to change the fundamentals of how a mark shows up on screen every time the user decides to switch from a round to a square brush. Why not wrap those specific implementations in their own brush objects and later on when the user clicks to draw something to screen we'll just defer to one of those brushes.</p>

<p>``` js
// Grab a reference to the canvas and the drawing context
$canvas = $('#painter');
context = $canvas[0].getContext('2d');</p>

<p>// Define our brush strategy objects
brushes = {</p>

<pre><code>outline: {
    draw: function(e, context) {
        context.strokeRect(e.pageX - offsetLeft, e.pageY - offsetTop, 10, 10);
    }
},
square: {
    draw: function(e, context) {
        context.fillRect(e.pageX - offsetLeft, e.pageY - offsetTop, 10, 10);
    }
},
circle: {
    draw: function(e, context) {
        context.arc(e.pageX - offsetLeft, e.pageY - offsetTop, 10, 0, Math.PI * 2);
        context.fill();
    }
}
</code></pre>

<p>};</p>

<p>... .</p>

<p>brush = brushes.square;
```</p>

<p>Here we see that <code>brushes.outline</code>, <code>brushes.square</code>, and <code>brushes.circle</code> each implement a consistent interface for the <code>draw</code> call. However their exact implementation changes from one brush to the next. <code>brushes.outline</code> will only draw the stroke of a rectangle, whereas <code>brushes.square</code> and <code>brushes.circle</code> will fill their respective shapes in. Elsehwere in the program we set our initial brush to a default of brushes.square. When the users presses their mouse and moves it around screen we can defer to whichever Strategy the brush object is currently referencing:</p>

<p>``` js
// Listen for mouse events on the canvas
$canvas</p>

<pre><code>.on('mousedown', function() {
    isDrawing = true;
})
.on('mouseup mouseleave', function() {
    isDrawing = false;
})
.on('mousemove', function(e) {
    if (isDrawing) {
        // Defer drawing to a Strategy object
        brush.draw(e, context);
    }
});
</code></pre>

<p><code>``
Again notice that</code>.on('mousemove')<code>we first check to see if it's ok to draw something and then defer to whichever Strategy is currently being referenced. Using this approach we can add limitless new brush types to the</code>brushes` object and easily change how our program performs at runtime. Be sure to check out the live example and the source for the full application.</p>

<h3><a href="http://robdodson.s3.amazonaws.com/javascript-design-patterns/strategy/painter/index.html">Live Example</a></h3>

<h3><a href="https://github.com/robdodson/JavaScript-Design-Patterns/tree/master/strategy/painter">Source</a></h3>

<h2>Related Patterns</h2>

<p>Flyweight: Strategy objects often make good flyweights.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Design Patterns]]></title>
    <link href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns/"/>
    <updated>2012-08-03T09:39:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/08/03/javascript-design-patterns</id>
    <content type="html"><![CDATA[<h2>Table of Contents</h2>

<h3>Creational</h3>

<ul>
<li>Abstract Factory</li>
<li>Builder</li>
<li>Factory Method</li>
<li>Object Pool</li>
<li>Prototype</li>
<li>Singleton</li>
</ul>


<h3>Structural</h3>

<ul>
<li>Adapter</li>
<li>Bridge</li>
<li>Composite</li>
<li>Decorator</li>
<li>Facade</li>
<li>Flyweight</li>
<li>Private Class Data</li>
<li>Proxy</li>
</ul>


<h3>Behavioral</h3>

<ul>
<li>Chain of Responsibility</li>
<li>Command</li>
<li>Interpreter</li>
<li>Iterator</li>
<li>Mediator</li>
<li>Memento</li>
<li>Null Object</li>
<li>Observer</li>
<li>State</li>
<li><a href="http://robdodson.me/blog/2012/08/03/javascript-design-patterns-strategy/">Strategy</a></li>
<li>Template Method</li>
<li>Visitor</li>
<li>Monad Pattern / Promises</li>
</ul>


<p>I've been trying to think up <a href="http://robdodson.me/blog/2012/06/25/ending-my-first-chain/">a new chain</a> since coming back from Europe but nothing was enticing me. Then a few days ago I had a conversation with one of my friends in which we discussed using Promises in JavaScript. And later on we discussed Builders. I was doing my best to explain the two but really wished that I had a resource where I could just show some simple code examples. It occurred to me that I've always wanted to go through the <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1344014497&amp;sr=8-1&amp;keywords=design+patterns">Gang of Four book</a> and just write my own interpretation of each pattern. Since I'm currently working primarily in JavaScript I thought it might be an interesting challenge to convert their examples, often in strongly typed languages, to something as dynamic and loosey-goosey as JS.</p>

<p>I know there are a lot of people out there who <a href="http://www.codinghorror.com/blog/2005/09/head-first-design-patterns.html">aren't too</a> <a href="http://thinkrelevance.com/blog/2007/05/17/design-patterns-are-code-smells">keen on</a> design patterns but that's not to say that they shouldn't be used or studied. There's a lot of code out there that starts with <code>jQuery.click()</code> or <code>addEventListener</code> or <code>.on()</code> and all of them are implementations of the Observer pattern. Finding this reusable approach is the main point of patterns and along with it comes a shared vocabulary that can be passed on to other developers. Rather than saying "Let's defer the methods of our object that are subject to change to well encapsulated algorithms." We can just say "A Strategy pattern might be nice here."</p>

<p>Patterns should be used with caution as not everything fits so neatly into their paradigms. It's often said that a beginner never met a pattern he didn't like. In my experiences I've been burned by pattern overuse and at other times they have legitimately saved my ass. It's also true that many patterns don't really work or aren't appropriate for particular languages. For instance, the GoF book was written <em>primarily for languages which shared features of C++ and SmallTalk</em>. I totally agree with this sentiment but I feel like along the way we'll discover what does and doesn't make sense in a dynamic language like JS and hopefully we can toss in some new patterns of our own. Already to the list I've added Promises which I use quite frequently and find to be a wonderful alternative to JavaScript's oft seen pyramid of callbacks.
Again, this is all about learning and experimenting. In my opinion a good understanding of design patterns is a threshold that needs to be crossed at some point in your career. I'm committed to doing this every single day for the next few weeks so hopefully by the end of it we'll have a useful resource that others can benefit from. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Your Backbone Views with the State Pattern]]></title>
    <link href="http://robdodson.me/blog/2012/06/02/managing-your-backbone-views-with-the-state-pattern/"/>
    <updated>2012-06-02T18:22:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/02/managing-your-backbone-views-with-the-state-pattern</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2012/06/02/take-control-of-your-app-with-the-javascript-state-patten/">Yesterday I wrote a post to illustrate the concepts behind the State pattern</a> (one of my all time favorite tools). If you're new to this pattern and haven't read my previous post I suggest you start there and read this one after you've had a chance to play around with the ideas.</p>

<p>I wanted to write about this pattern in the context of a Backbone app because I think there's a lot of value in exploring different ways to manage our Views and Models. Here's an example Video Player in which several State objects inherit from a common ancestor, <code>BaseState</code>. I chose to make <code>BaseState</code> extend <code>Backbone.Model</code> because it seemed like the best fit for this kind of thing, although typically when I implement this pattern in other languages I just use generic Objects. I would have done that here but Backbone's <code>extend</code> functionality makes the code so much cleaner.</p>

<p>``` js
var BaseState = Backbone.Model.extend({
  initialize: function(owner) {</p>

<pre><code>this.owner = owner;
</code></pre>

<p>  },
  enter: function() {</p>

<pre><code>// Implement me in your state objects
</code></pre>

<p>  },
  execute: function() {</p>

<pre><code>// Implement me in your state objects
</code></pre>

<p>  },
  play: function() {</p>

<pre><code>console.log('changing to the playing state...');
this.owner.changeState(this.owner.states.playing);
</code></pre>

<p>  },
  stop: function() {</p>

<pre><code>console.log('changing to the stopping state...')
this.owner.changeState(this.owner.states.stopping);
</code></pre>

<p>  },
  pause: function() {</p>

<pre><code>console.log('changing to the pausing state...')
this.owner.changeState(this.owner.states.pausing);
</code></pre>

<p>  },
  exit: function() {</p>

<pre><code>// Implement me in your state objects
</code></pre>

<p>  }
});</p>

<p>var PlayingState = BaseState.extend({
  execute: function() {</p>

<pre><code>console.log('playing the video!');
</code></pre>

<p>  },
  play: function() {</p>

<pre><code>console.log('already playing!');
</code></pre>

<p>  }
});</p>

<p>var StoppingState = BaseState.extend({
  enter: function() {</p>

<pre><code>console.log('we have entered the stopping state...');
</code></pre>

<p>  },
  execute: function() {</p>

<pre><code>console.log('stopping the video...');
</code></pre>

<p>  },
  stop: function() {</p>

<pre><code>console.log('already stopped!');
</code></pre>

<p>  }
});</p>

<p>var PausingState = BaseState.extend({
  execute: function() {</p>

<pre><code>console.log('pausing the video.');
</code></pre>

<p>  },
  pause: function() {</p>

<pre><code>console.log('already paused!');
</code></pre>

<p>  }
});
```</p>

<p>Every state inherits from <code>BaseState</code> which means they all create a reference to an <code>owner</code> object in their <code>initialize</code> methods. The <code>owner</code> is going to be our actual <code>VideoPlayer</code> object. Rather than having <code>videoPlayer.play</code> lead to some big weird conditional:</p>

<p>``` js
play: function() {
  if (this.status == 'playing') {</p>

<pre><code>  return;
</code></pre>

<p>  } else if (this.status == 'stopped') {</p>

<pre><code>  // play the video
</code></pre>

<p>  } else if (this.status == 'paused') {</p>

<pre><code>  // unpause and play
</code></pre>

<p>  }
  else if ...
}
```</p>

<p>we're instead going to delegate the work to our State objects. They'll handle switching from one State to the next and so long as we provide the exact same public API methods in each, they should be interchangeable. Inheriting from the same BaseState ensures that all of the States have the same public methods and each State can choose how or if it wants to override them. In our example the <code>StoppingState</code> overrides the <code>enter</code> method to display some text as we're transitioning into this state. Again, you can override some or all of the methods, <code>enter</code> and <code>exit</code> are great for building up/tearing down anything that our state might need and <code>execute</code> is where the main work of our state should happen.</p>

<p>Let's take a look at the <code>VideoPlayer</code> which is a <code>Backbone.View</code> that will leverage our State objects:</p>

<p>``` js
var VideoPlayer = Backbone.View.extend({
  initialize: function() {</p>

<pre><code>this.states = {};
this.states.playing = new PlayingState(this);
this.states.stopping = new StoppingState(this);
this.states.pausing = new PausingState(this);
this.changeState(this.states.pausing);
</code></pre>

<p>  },
  play: function() {</p>

<pre><code>this.state.play();
</code></pre>

<p>  },
  stop: function() {</p>

<pre><code>this.state.stop();
</code></pre>

<p>  },
  pause: function() {</p>

<pre><code>this.state.pause();
</code></pre>

<p>  },
  changeState: function(state) {</p>

<pre><code>// Make sure the current state wasn't passed in
if (this.state !== state) {
  // Make sure the current state exists before
  // calling exit() on it
  if (this.state) {
    this.state.exit();
  }
  this.state = state;
  this.state.enter();
  this.state.execute();
}
</code></pre>

<p>  }
});
<code>``
You'll notice that</code>VideoPlayer<code>instantiates its own State objects when it is first created. Then whenever we call one of its public methods the call is delegated to whichever state object is currently residing in</code>this.state`.</p>

<p>Let's instantiate a new VideoPlayer to see it in action:</p>

<p>``` js
var videoPlayer = new VideoPlayer();</p>

<p>=> 'pausing the video.'</p>

<p>videoPlayer.play();</p>

<p>=> 'changing to the playing state...'
=> 'playing the video!'</p>

<p>videoPlayer.play();</p>

<p>=> 'already playing!'</p>

<p>videoPlayer.stop();</p>

<p>=> 'changing to the stopping state...'
=> 'we have entered the stopping state...'
=> 'stopping the video...'
```</p>

<p>Hopefully this gives you some food for thought the next time you're trying to wrangle some unwieldy component. I cannot count how many times I've used this pattern in other languages to tidy up and organize my code. I'm looking forward to working with it again in Backbone and I'd love to hear anyone's take on how this can be tweaked or improved. Till tomorrow! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 9:48 pm</li>
<li>Mood: Focused, Hurried</li>
<li>Sleep: 5</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Control of your App with the JavaScript State Pattern]]></title>
    <link href="http://robdodson.me/blog/2012/06/02/take-control-of-your-app-with-the-javascript-state-patten/"/>
    <updated>2012-06-02T00:09:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/02/take-control-of-your-app-with-the-javascript-state-patten</id>
    <content type="html"><![CDATA[<p>Last week I wrote a post about <a href="http://robdodson.me/blog/2012/05/25/backbone-events-framework-communication/">communicating between views in Backbone.js</a> and since then it has easily become my most popular article. The comments have forced me to think about the ways in which I typically manage state in very large Flash applications and how that might translate to JavaScript and Backbone. Today I want to present my all time favorite design pattern, the State pattern, and illustrate how it can help you maintain control of your application. I want to warn you that I'm going to show a rather large block of what looks like repetitive code because I want the pattern to be obvious. In tomorrow's post we'll clean it up and try it out with a Backbone Model and View.</p>

<h3>The State pattern?</h3>

<p>Ok let's get started. I want to write a video player so I'm going to need an object that can handle <code>play</code>, <code>stop</code> and <code>pause</code> states. I would say that there are probably a ton of video players out there that have <code>play</code>, <code>stop</code> and <code>pause</code> methods on them, and I bet many look kind of like this:</p>

<p>``` js
play: function() {</p>

<pre><code>if (this.status == 'playing') {
    return;
} else if (this.status == 'stopped') {
    // play the video
} else if (this.status == 'paused') {
    // unpause and play
}
else if ...
</code></pre>

<p>}
```</p>

<p>Or maybe instead of a long conditional there's a switch statement or something. But <em>essentially</em> you're querying some variable somewhere to check what state the object is in and you're branching your logic as a result. Now, I would argue that this is a really brittle process and probably error prone. You could imagine that in each of those conditional blocks there might be several lines of code: preparing to play, stopping the video, tearing down this or that... Or perhaps if you're moving from one state to another you want to animate something on screen, maybe do some ajax, who knows!? Really no matter what you're doing if you're tossing it into these big conditionals it's going to become a nightmare to manage.</p>

<p>Alternatives? Ok, let's think of our video player in terms of the actions that it performs. Our player can play, it can stop and it can pause. What if instead of play, pause and stop acting as methods on our object, we make each of those states into its <em>own</em> object? So when the play state object is told to play it says 'Hey! I'm already playing. No need to change' and when it's told to stop it says 'Ah stopping, eh? Let me defer to my friend the Stop state object'.</p>

<p>To illustrate this I've written a very simple player which just logs what it's doing as you ask it to change state. I want to point out that this code is neither DRY nor very useful in a real world situation but it's intended to illustrate a point. Hopefully when you see the repetition you'll quickly say to yourself 'Hey! Those state objects could be made into a more general/abstract parent object.' That would be the correct mindset but I thought that if I skipped this part the pattern might not be obvious for those new to it.</p>

<p>``` js
var player = {</p>

<pre><code>state: undefined,
states: {
    playing: {
        initialize: function(target) {
            this.target = target;
        },
        enter: function() {
            console.log('setting up the playing state');
        },
        execute: function() {
            console.log('playing!');
        },
        play: function() {
            console.log('already playing!');
        },
        stop: function() {
            this.target.changeState(this.target.states.stopping);
        },
        pause: function() {
            this.target.changeState(this.target.states.pausing);
        },
        exit: function() {
            console.log('tearing down the playing state');
        }
    },
    stopping: {
        initialize: function(target) {
            this.target = target;
        },
        enter: function() {
            console.log('setting up the stopping state');
        },
        execute: function() {
            console.log('stopping!');
        },
        play: function() {
            this.target.changeState(this.target.states.playing);
        },
        stop: function() {
            console.log('already stopped!');
        },
        pause: function() {
            this.target.changeState(this.target.states.pausing);
        },
        exit: function() {
            console.log('tearing down the stopping state');                
        }
    },
    pausing: {
        initialize: function(target) {
            this.target = target;
        },            
        enter: function() {
            console.log('setting up the pausing state');
        },
        execute: function() {
            console.log('pausing!');
        },
        play: function() {
            this.target.changeState(this.target.states.playing);
        },
        stop: function() {
            this.target.changeState(this.target.states.stopping);
        },
        pause: function() {
            console.log('already paused!');
        },
        exit: function() {
            console.log('tearing down the pausing state!');                
        }
    }
},
initialize: function() {
    this.states.playing.initialize(this);
    this.states.stopping.initialize(this);
    this.states.pausing.initialize(this);
    this.state = this.states.stopping;
},
play: function() {
    this.state.play();
},
stop: function() {
    this.state.stop();
},
pause: function() {
    this.state.pause();
},
changeState: function(state) {
    if (this.state !== state) {
        this.state.exit();
        this.state = state;
        this.state.enter();
        this.state.execute();
    }
}
</code></pre>

<p>};
```</p>

<p>Lots of code, I know. But there is serious value in digesting this pattern so stick with me here and I'll go through it bit by bit. Let's start at the top where we define our object:</p>

<p>``` js
var player = {</p>

<pre><code>state: undefined,
states: {
    playing: {
        initialize: function(target) {
            this.target = target;
        },
        enter: function() {
            console.log('setting up the playing state');
        },
        execute: function() {
            console.log('playing!');
        },
        play: function() {
            console.log('already playing!');
        },
        stop: function() {
            this.target.changeState(this.target.states.stopping);
        },
        pause: function() {
            this.target.changeState(this.target.states.pausing);
        },
        exit: function() {
            console.log('tearing down the playing state');
        }
    },
</code></pre>

<p>... .
<code>``
First we declare our object and give it a property of</code>state<code>which we set to</code>undefined` for now. We're going to be creating state object to delegate all of our method calls to so once we're ready to use our player we'll set its initial state.</p>

<p>The <code>states</code> object (note the plurality) holds all of the different state objects that our player can use. In this version we've defined <code>playing</code>, <code>stopping</code> and <code>pausing</code> but you could also add states like <code>buffering</code> or <code>initializing</code>. Keep in mind that this pattern can be applied to just about anything. For instance, if you were making a game with an old prospector his state objects could be <code>mining</code>, <code>drinking</code> and <code>sleeping</code>. The main thing to remember is that <strong>your state objects should all define the exact same public methods</strong>.</p>

<p>We can skip the <code>stopping</code> and <code>pausing</code> states since they're nearly identical to the <code>playing</code> state. Instead let's jump down to the bottom and look at the last bit.</p>

<p>``` js
initialize: function() {</p>

<pre><code>this.states.playing.initialize(this);
this.states.stopping.initialize(this);
this.states.pausing.initialize(this);
this.state = this.states.stopping;
</code></pre>

<p>},
play: function() {</p>

<pre><code>this.state.play();
</code></pre>

<p>},
stop: function() {</p>

<pre><code>this.state.stop();
</code></pre>

<p>},
pause: function() {</p>

<pre><code>this.state.pause();
</code></pre>

<p>},
changeState: function(state) {</p>

<pre><code>if (this.state !== state) {
    this.state.exit();
    this.state = state;
    this.state.enter();
    this.state.execute();
}
</code></pre>

<p>}
```</p>

<p>In our player's initialize function we give each state a reference to the player object so we can tell it to <code>changeState</code>. We also set our initial state to be the stopping state.</p>

<p>Now let's look at the <code>play</code> method. Do you see how it defers the call to whatever object is currently set as the player's <code>state</code>? Since <code>this.state</code> refers to <code>this.states.stopping</code> we're effectively calling the <code>play</code> method of the <code>stopping</code> state object. Go look at the other state objects to see how they respond to having their <code>play</code> methods called. In the case of <code>states.stopping</code>, calling <code>play</code> is going to tell its <code>target</code> (which is just a reference to the player) to <code>changeState</code>, passing in the <code>states.playing</code> state.</p>

<p><code>changeState</code> is kind of an awesome method because it does a ton of work but it does it very elegantly and efficiently. For starters it makes sure that the state we've asked to change to is actually different than our current state. Then it tells our current state to <code>exit()</code>. A state's <code>exit()</code> method is a great place to tear down any constructs that we may have built to support that action. Next it sets our current state to the new state. Lastly, it calls <code>enter()</code> (a good place to build up supporting constructs) and <code>execute()</code>, which is where we do the main work of our state. That's pretty straightforward right?</p>

<p>Since <code>play</code>, <code>pause</code> and <code>stop</code> are members of our player's public API, <strong>all of our states must also implement those methods.</strong> Otherwise you would get an error if you called <code>play()</code> on the object and its state did not support that method. Keep this in mind when you're designing your state objects.</p>

<h3>Aaaaand we're off!</h3>

<p>Let's look at our player in action:</p>

<p>```
// We start off in the stopping state
// So when we call stop...
player.initialize();
player.stop();</p>

<p>=> 'already stopped!'</p>

<p>// Let's move to the playing state
player.play();</p>

<p>=> 'tearing down the stopping state'
=> 'setting up the playing state'
=> 'playing!'</p>

<p>// Quick call pause!
player.pause();</p>

<p>=> 'tearing down the playing state'
=> 'setting up the pausing state'
=> 'pausing!'</p>

<p>// Um... call pause like 3 times cuz
// I'm a button masher!!!
player.pause();
player.pause();
player.pause();</p>

<p>=> 'already paused!'
=> 'already paused!'
=> 'already paused!'</p>

<p>// OK call play again!
player.play();</p>

<p>=> 'tearing down the pausing state!'
=> 'setting up the playing state'
=> 'playing!'
```</p>

<h3>I like it, but...</h3>

<p>Before you run for the hills due to the sheer volume of boilerplate code I want to remind you that almost all of this repetition can easily be cleaned up. If we defined a base state that all of our other states extended then they would only need to override the methods that they cared about. For instance, the <code>stopping</code> state and <code>pausing</code> state both tell their target to <code>changeState</code> when someone calls <code>play</code>. This kind of functionality is easily moved into a base state. Also if you have no need for <code>enter</code> and <code>exit</code> methods those can be removed or also thrown into the base state. I'll dig into this more tomorrow but for now play around with the example and leave some feedback if you have comments or suggestions. Thanks!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul>
<li>Time: 12:10 am</li>
<li>Mood: Tired, Drunk</li>
<li>Sleep: 7</li>
<li>Hunger: 0</li>
<li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design by Configuration Sucks]]></title>
    <link href="http://robdodson.me/blog/2012/05/10/design-by-configuration-sucks/"/>
    <updated>2012-05-10T19:08:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/10/design-by-configuration-sucks</id>
    <content type="html"><![CDATA[<h3>What is design by configuration?</h3>

<p>As an experienced developer if you find that you are performing the same actions over and over naturally your brain will start to think "Hey, this isn't very DRY". DRY, or the principle of "Don't Repeat Yourself" is pretty common dogma for most developers. How many times have you heard something like, "If you're doing it twice, you're doing it wrong." Typically when I do an action more than once I start looking for ways to wrap the work into functions or objects. This process can easily lead to what some refer to as "Design by Configuration," or breaking your work into configurable operations. To explore this concept a bit more, and why I think it's rather brittle, let's come up with a hypothetical. In our scenario we're working for a large company redesigning their web presence. On each page we have widgets of various shapes and sizes. Here's an example of some:</p>

<p>```html</p>

<div class="widget-container grey-background rounded-corners">
  <div class="widget" title="Awesome Widget" data-foo="bar">
    <p>Hey I'm an awesome widget!</p>
  </div>
</div>




<div class="widget-container red-background square-corners">
  <div class="widget" title="Stellar Widget" data-foo="baz">
    <p>Bodly going where no widget has gone before...</p>
  </div>
</div>


<p>```
You've probably already noticed that our two widgets are nearly identical with only subtle differences in the classes, titles and paragraph content. That seems like a great candidate for automation! Because we don't know the names of, or how many classes we might support, we'll try to make it really flexible so we can pass in tons of different values.</p>

<p>```javascript
function makeWidget(attributes) {</p>

<pre><code>var classes,
    title,
    data,
    paragraph,
    widget;

classes = attributes['classes'] || '';
title = attributes['title'] || '';
data = attributes['data'] || '';
paragraph = attributes['paragraph'] || '';

widget = '&lt;div class="' + classes + '"&gt;'+
         '&lt;div class="widget" title="' + title + '" data-foo="' + data + '"&gt;'+
         '&lt;p&gt;' + paragraph + '&lt;/p&gt;'+
         '&lt;/div&gt;'+
         '&lt;/div&gt;';
$('body').append($(widget));
</code></pre>

<p>}</p>

<p>makeWidget({ classes: 'widget-container grey-background rounded-corners', title: 'Hello World!', data: 'ribeye', paragraph: 'Neato paragraph!'});
```</p>

<p>You can play around with the previous code snippet and create your own widgets in the console or on jsFiddle. Writing a little function like this seems pretty standard for a lot of cases and I don't want to argue against it entirely but I do want to point out a few gotchas.</p>

<h3>Everything was perfect. Until it wasn't</h3>

<p>Let's say that our code works perfectly. We do about 95% of the project and toward the end the client mentions an extra widget that slipped their mind. They'd like it to act just like all the other widgets but they also want to add an additional class to the <code>p</code> tag. "Not a problem," you think, "I'll just add a paragraphClasses attribute to our hash."</p>

<p>```javascript
function makeWidget(attributes) {</p>

<pre><code>var classes,
    title,
    data,
    paragraph,
    paragraphClasses
    widget;

classes = attributes['classes'] || '';
title = attributes['title'] || '';
data = attributes['data'] || '';
paragraph = attributes['paragraph'] || '';
paragraphClasses = attributes['paragraphClasses'] || '';

widget = '&lt;div class="' + classes + '"&gt;'+
         '&lt;div class="widget" title="' + title + '" data-foo="' + data + '"&gt;'+
         '&lt;p ' + paragraphClasses + '&gt;' + paragraph + '&lt;/p&gt;'+
         '&lt;/div&gt;'+
         '&lt;/div&gt;';
$('body').append($(widget));
</code></pre>

<p>}</p>

<p>makeWidget({ classes: 'widget-container grey-background rounded-corners', title: 'Hello World!', data: 'ribeye', paragraph: 'Neato paragraph!'});
```</p>

<p>Easy enough right? Well, yeah... except you just changed one line that affects ALL of your widgets. Hope you got all those quotation marks perfect!</p>

<p>Later on your client decides that they'd like to add one more widget but this time it should have two paragraph tags instead of one. That puts us in a bit of a dilemma... We could modify our <code>makeWidget</code> function to maybe check if there's a <code>subParagraph</code> attribute, or we could just hand code this one widget on this one page. Er..did I say one page? Well actually the client just called and said this widget will need to appear on <em>4</em> pages.</p>

<p>At this point we can either hack our makeWidget function, create an entirely new function like <code>makeSuperWidget</code> or we could hand code a custom widget in 4 places and hope that if there are any changes we remember to update all 4. Typically I think most people choose either the first or second option, figuring that the changes to the original function are small enough or that creating a new function is still much DRYer than hand coding the thing 4 times.</p>

<p>At this point I feel like we've now fallen into the trap of design by configuration. Basically we've setup our function to accept configuration parameters but the core elements are static and extremely hard to change. We can add lots of classes to our containing div and our first p tag but what if we want to add other attributes? Do we need to break open the code every time?</p>

<p>I think a better solution looks a lot like the syntax for D3.js, which provides helpers to make the process of widget creation easier, but it doesn't completely remove the developer from the process. Here's some pseudo code to illustrate what I think might be a better approach:</p>

<p>```javascript</p>

<p>widget = make('div')</p>

<pre><code>    .attr('class', 'widget-container grey-background rounded-corners')
    .attr('title', 'Sweet containing div')
    .attr('data-zerp', 'porkchops')
  .append('div')
    .attr('class', 'widget')
    .attr('title', 'Slick inner div')
    .attr('data-foo', 'short-rib')
    .attr('data-bar', 'cutlet')
    .attr('data-baz', 'filet')
  .append('p')
    .html('I can haz contents?')
  .sibling('p')
    .html('I too can haz contents?');
</code></pre>

<p>```</p>

<p>Unfortunately this is still a lot of code and my first solution to slim it down is to create a helper function. At that point we're basically back to design by configuration... I'm not entirely ready to give up on this approach because I feel like their <em>might</em> be something here, I'm just not sure what yet. I think the design by configuration problem falls right into that sweet spot between not needing to create a factory and obviously needing to create a factory. I'll try to explore this more in a later post. For now it's time for bed.</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>
]]></content>
  </entry>
  
</feed>
