<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/backbone/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-21T21:54:46-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring the Backbone Router and History API]]></title>
    <link href="http://robdodson.me/blog/2012/05/21/exploring-the-backbone-router-and-history-api/"/>
    <updated>2012-05-21T07:59:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/21/exploring-the-backbone-router-and-history-api</id>
    <content type="html"><![CDATA[<p>I want to talk a bit more about the Backbone Router because I think it's one of the first pieces of the framework that people run up against that deviates from the standard MVC setup. If you've used Rails before you're used to the idea of <code>routes</code> which pick apart a url and figure out which controller to run. CodeIgniter uses the same paradigm but I'm not sure if they also call them routes or use a different term. Contrary to this, in Backbone the Router is like a controller for the entire application. This makes it similar to Sinatra. Creating two different routes which replace the content of the page each time would look like this:</p>

<p>``` js
var Router = Backbone.Router.extend({
  routes: {</p>

<pre><code>"": "index",
"search": "search"
</code></pre>

<p>  },</p>

<p>  index: function() {</p>

<pre><code>var tutorial = new Example.Views.Tutorial();

// Attach the tutorial page to the DOM
tutorial.render(function(el) {
  $("#main").html(el);
});
</code></pre>

<p>  },</p>

<p>  search: function() {</p>

<pre><code>var search = new Example.Views.Search();

// Attach the search page to the DOM
search.render(function(el) {
  $("#main").html(el);
});
</code></pre>

<p>  }
});
```</p>

<p>If you're using the Backbone Boilerplate you won't need to tell the Router to update every time someone clicks a link. The Boilerplate implements the following block of code at the very bottom of main.js</p>

<p>``` js
// All navigation that is relative should be passed through the navigate
  // method, to be processed by the router.  If the link has a data-bypass
  // attribute, bypass the delegation completely.
  $(document).on("click", "a:not([data-bypass])", function(evt) {</p>

<pre><code>// Get the anchor href and protcol
var href = $(this).attr("href");
var protocol = this.protocol + "//";

// Ensure the protocol is not part of URL, meaning its relative.
if (href &amp;&amp; href.slice(0, protocol.length) !== protocol &amp;&amp;
    href.indexOf("javascript:") !== 0) {
  // Stop the default event to ensure the link will not cause a page
  // refresh.
  evt.preventDefault();

  // `Backbone.history.navigate` is sufficient for all Routers and will
  // trigger the correct events.  The Router's internal `navigate` method
  // calls this anyways.
  Backbone.history.navigate(href, true);
}
</code></pre>

<p>  });
```</p>

<p>In short this is an application wide handler for any relative anchor that doesn't have a <code>data-bypass</code> attribute. So something like <code>&lt;a href="search"&gt;Search&lt;/a&gt;</code> would get passed through here.
The last few bits prevent the link from completely refreshing the page—<code>evt.preventDefault()</code>—and pipe the href through the router. Actually the href gets piped through <code>Backbone.history.navigate</code> which <code>Router.navigate</code> proxies. When you call <code>Router.navigate('foobar')</code> you're supposed to pash a hash of <code>{trigger: true}</code> if you'd like the router to run the corresponding <code>foobar</code> method. If you dig into the source you can see that just passing true will also have the same effect and that's what's done here by the Boilerplate.</p>

<p>Originally I had written my View like this because I thought I had to use the Router explicitly.</p>

<p>``` js
// This will fetch the tutorial template and render it.
Example.Views.Tutorial = Backbone.View.extend({
  template: "app/templates/example.html",</p>

<p>  // Listen for when the user clicks our anchor tag
  events: {</p>

<pre><code>'click .search': 'search'
</code></pre>

<p>  },</p>

<p>  // Note: I'm stopping the event and explicitly telling the Router to
  // update the history and trigger the corresponding search method.
  search: function(e) {</p>

<pre><code>e.preventDefault();
namespace.app.router.navigate('search', {trigger: true});
</code></pre>

<p>  },</p>

<p>  ...</p>

<p><code>``
Notice that I've defined a</code>search<code>method which listens for a click on my anchor of class</code>.search`. This is inline with the vanilla Backbone.js documentation but since the Boilerplate has added that application wide handler for us, we don't need this function unless there's some additional work that search needs to do. By just letting that global handler do its thing our route will still be called and we can save a fair bit of boilerplate in our templates.</p>

<p>If you want to subvert the handler then you can just call <code>preventDefault</code> and <code>stopPropagation</code> on the click event like so:</p>

<p>``` js</p>

<p>Example.Views.Tutorial = Backbone.View.extend({</p>

<p>  template: "app/templates/example.html",</p>

<p>  events: {</p>

<pre><code>'click .search': 'search'
</code></pre>

<p>  },</p>

<p>  search: function(e) {</p>

<pre><code>e.preventDefault();
e.stopPropagation();
namespace.app.router.navigate('whatever');
</code></pre>

<p>  }</p>

<p>...</p>

<p>```</p>

<p>Something else to keep in mind is that the boilerplate comes with <code>History pushState</code> turned on by default.</p>

<p><code>js
// Trigger the initial route and enable HTML5 History API support
Backbone.history.start({ pushState: true });
</code></p>

<p>This lets you create routes that look like this: <code>mysite.com/search/foobar</code> instead of using a hash <code>mysite.com/#search/foobar</code>. The only problem is that for HTML5 History pushState to work your server has to keep resolving to index.html. The boilerplate tutorial says to use <code>node build/server</code> to run your project server, even though elsewhere it says to use <code>bbb server</code>. Neither works so I've <a href="https://github.com/backbone-boilerplate/grunt-bbb/issues/21">logged an issue on Github.</a> Very possible I'm doing it wrong but we'll see. For now I'm not use pushState so I changed the line in main.js to read <code>Backbone.history.start()</code> and instead I'm using the hash approach.</p>

<ul>
<li>Time: 7:59 am</li>
<li>Mood: Awake, Hurried, Focused</li>
<li>Sleep: 8</li>
<li>Hunger: 0</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some More Backbone.js Basics]]></title>
    <link href="http://robdodson.me/blog/2012/05/20/some-more-backbone-dot-js-basics/"/>
    <updated>2012-05-20T08:19:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/20/some-more-backbone-dot-js-basics</id>
    <content type="html"><![CDATA[<p>Here are some quick Backbone snippets to help visualize concepts. I'll move around fairly quickly so if you're interested in going more in-depth then checkout the documentation.</p>

<h3>Events</h3>

<p>Backbone events are pretty straightforward. To create a pub/sub relationship you use the <code>on</code> and <code>off</code> methods of <code>Backbone.Events</code>:</p>

<p>In the above example you could make <code>dispatcher</code> into an AMD module and load the dependency with Require.js, something <a href="http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js/">I've covered in a previous post.</a></p>

<p>``` js
var dispatcher = {};
_.extend(dispatcher, Backbone.Events);</p>

<p>var receiver = {</p>

<pre><code>initialize: function() {
    // Start listening for the 'hello' event from the dispatcher.
    // When we hear the 'hello' event we'll run a function
    dispatcher.on('hello', this.sayHello, this);
},
sayHello: function() {
    console.log('hello!');
    // Kill the listener so we only get called once
    dispatcher.off('hello', this.sayHello, this); 
}
</code></pre>

<p>};</p>

<p>receiver.initialize();
dispatcher.trigger('hello');
dispatcher.trigger('hello');
```</p>

<h3>Models</h3>

<p>Backbone models are interesting because they implement explicit <code>get</code> and <code>set</code> methods. When you change a property with the get and set methods it will fire off an event. Here's a fiddle showing how to model a <code>Book</code>. We'll change the author and the DOM will reflect this update.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/robdodson/dC5GD/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If your model implements an <code>initialize</code> function it will be called as soon as the object is created. In other words, its a constructor. If you pass a hash to the model's constructor it will set those attributes on itself. The hash and any additional arguments will also be passed to <code>initialize</code>.</p>

<p>``` js
// Define an initialize function for our book
// Initialize will be called anytime we say new Book()
var Book = Backbone.Model.extend({</p>

<pre><code>initialize: function(foo, bar) {
    console.log(foo);
    console.log(bar);
}
</code></pre>

<p>});</p>

<p>// You can pass in a hash to set initial values on the model
// The hash and any additional arguments will also be passed
// to the initialize function
book = new Book({</p>

<pre><code>author: 'Hunter S. Thompson',
title: 'Fear and Loating in Las Vegas'
</code></pre>

<p>}, 'hello world!');</p>

<p>console.log(book.get('author'));
```</p>

<h4>Poor man's data-binding</h4>

<p>Now that we have a basic understanding of models we can write our own simple binding setup. This example presumes we have an <code>#author</code> and a <code>#title</code> element somewhere on our page.</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>book = new Book({</p>

<pre><code>author: 'Hunter S. Thompson',
title: 'Fear and Loating in Las Vegas'
</code></pre>

<p>});</p>

<p>// Listen for any change event coming from the model.
// When any attribute changes we'll tell our elements to
// automatically update.
book.on('change', function() {</p>

<pre><code>$('#author').html(book.get('author'));
$('#title').html(book.get('title'));
</code></pre>

<p>});</p>

<p>book.set('author', 'Mickey Mouse');
book.set('title', 'Everyone Poops');
```</p>

<h4>Backbone.sync</h4>

<p>To mess around with saving data we'll need to alter <code>Backbone.sync</code>.</p>

<blockquote><p>Backbone.sync is the function that Backbone calls every time it attempts to read or save a model to the server. By default, it uses (jQuery/Zepto).ajax to make a RESTful JSON request and returns a jqXHR. You can override it in order to use a different persistence strategy, such as WebSockets, XML transport, or Local Storage.</p></blockquote>

<p>Backbone will decide whether a save call should perform a create with <code>HTTP POST</code> or an update <code>HTTP PUT</code> based on whether or not our model has an id attribute already.</p>

<p>Here's an example from the Backbone docs which overrides the sync functionality and fakes a request to a server.</p>

<p>``` js
Backbone.sync = function(method, model) {
  console.log(method + ": " + JSON.stringify(model));
  model.id = 1; // This line is crucial!
};</p>

<p>var book = new Backbone.Model({
  title: "The Rough Riders",
  author: "Theodore Roosevelt"
});</p>

<p>book.save();
// create: {"title":"The Rough Riders","author":"Theodore Roosevelt"}</p>

<p>book.save({author: "Teddy"});
// update: {"title":"The Rough Riders","author":"Teddy"}
<code>``
​If we don't give our model an</code>id` on line 3 then Backbone has no way of knowing if the model has been previously saved or not. It will keep doing create/POST until it receives that id.</p>

<h3>Collections</h3>

<p>If you don't want to setup a server but you do want to play around with saving models and collections you can use <a href="https://github.com/jeromegn/Backbone.localStorage">the Backbone LocalStorage adapter written by Jerome Gravel-Niquet</a>. After you've included the js file in your code somewhere you can use it like so:</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var Books = Backbone.Collection.extend({</p>

<pre><code>model: Book,
localStorage: new Backbone.LocalStorage("Books")
</code></pre>

<p>});</p>

<p>var library = new Books();
library.on('sync', function() {</p>

<pre><code>console.log('sync succesful!');
</code></pre>

<p>});</p>

<p>var othello = library.create({
  title: "Othello",
  author: "William Shakespeare"
});
```</p>

<p>To <code>fetch</code> the models in the collection at a later point you can do the following:</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var Books = Backbone.Collection.extend({</p>

<pre><code>model: Book,
localStorage: new Backbone.LocalStorage("Books")
</code></pre>

<p>});</p>

<p>var library = new Books();
library.fetch();
console.log(library);
```</p>

<p>The docs mention that you shouldn't use this to initialize your collections. Instead you should <a href="http://documentcloud.github.com/backbone/#FAQ-bootstrap">bootstrap your app</a> at page load. Here's the passage:</p>

<blockquote><p>Note that fetch should not be used to populate collections on page load — all models needed at load time should already be bootstrapped in to place. fetch is intended for lazily-loading models for interfaces that are not needed immediately: for example, documents with collections of notes that may be toggled open and closed.</p></blockquote>

<h3>Routers</h3>

<p>Routers are used to map URLs to actions. If you're using the Backbone Boilerplate you should see this block of code in your main.js.</p>

<p>``` js
// Defining the application router, you can attach sub routers here.
var Router = Backbone.Router.extend({
  routes: {</p>

<pre><code>"": "index",
":hash": "index"
</code></pre>

<p>  },</p>

<p>  index: function(hash) {</p>

<pre><code>var route = this;
var tutorial = new Example.Views.Tutorial();

// Attach the tutorial to the DOM
tutorial.render(function(el) {
  $("#main").html(el);

  // Fix for hashes in pushState and hash fragment
  if (hash &amp;&amp; !route._alreadyTriggered) {
    // Reset to home, pushState support automatically converts hashes
    Backbone.history.navigate("", false);

    // Trigger the default browser behavior
    location.hash = hash;

    // Set an internal flag to stop recursive looping
    route._alreadyTriggered = true;
  }
});
</code></pre>

<p>  }
});
```</p>

<p>One gotcha is that the definition of <code>":hash": "index"</code> will send any route that follows the base domain to the index function. For instance if you did the following:</p>

<p>``` js
routes: {</p>

<pre><code>"": "index",
":hash": "index"
"search": "search"
</code></pre>

<p>  },</p>

<p>  ...</p>

<p>  search: function() {</p>

<pre><code>console.log('time to search!');
</code></pre>

<p>  }
<code>``
Instead of the search function running what will actually happen is mysite.com/search will be converted into mysite.com/#search and the word</code>search<code>will be sent to the index function to supply the</code>hash<code>argument. To fix this you'll need to remove the</code>":hash": "index"` route.</p>

<h3>Views</h3>

<p>Views can either work with existing DOM elements or create new ones. Here's a very basic fiddle in which a BodyView is created to wrap our <code>body</code> tag and BoxView is appended to it. We add a little jQuery animation to show the process in action.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/robdodson/rJEkv/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>You'll often want to link a view's render method up to a model's change event so the two will stay in sync. Here's a quick and dirty example showing how to bind in this fashion.</p>

<p>``` js
var Book = Backbone.Model.extend({});</p>

<p>var BookView = Backbone.View.extend({</p>

<pre><code>className: 'book-view',
initialize: function() {
    this.model.on('change', this.render, this);
    this.render();        
},
render: function() {
    this.$el.html(this.model.get('title') + ' by ' + this.model.get('author'));
}
</code></pre>

<p>});</p>

<p>var outliers = new Book({</p>

<pre><code>author: 'Malcolm Gladwell',
title: 'Outliers'
</code></pre>

<p>});</p>

<p>var bookView = new BookView({model: outliers});</p>

<p>$('body').append(bookView.el);</p>

<p>outliers.set('author', 'Mickey Mouse');
```
Instead of throwing your HTML into the render method as a String it's advised that you use some kind of templating library. Underscore templates seem like a good place to start but Backbone is designed to be template agnostic so you could easily switch to Mustache/Handelbars or HAML if you want. Tomorrow I'll look into displaying some content using an Underscore template linked up to a model. Till then.. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Boilerplate: Playing with Require.js]]></title>
    <link href="http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js/"/>
    <updated>2012-05-18T08:07:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js</id>
    <content type="html"><![CDATA[<p>I want to keep playing with require.js and AMD modules today so I can really internalize the concepts around them. I'm going to go through the examples in <a href="http://requirejs.org/docs/api.html#jsfiles">the require documentation</a> starting with loading regular scripts and then defining modules and loading those. Here's our boilerplate HTML:</p>

<p>Here is our boilerplate HTML. It's a standard HTML5 file which just includes require.js at the bottom of the page.
``` html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Require.js Sandbox</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script src="http://robdodson.me/assets/js/libs/require.js"></script>
</body>
</html>
```
I'm also going to define a file called foo.js which will just console log "Hello World!". To update our HTML we'll add the following script tag after the call to include require.js</p>

<p>``` html</p>

<script>
    require(["foo"]);
</script>


<p>```</p>

<p>And as expected the console outputs 'Hello World!'. Let's step it up a notch and define a module. Our first module will just return an object literal <a href="http://requirejs.org/docs/api.html#defsimple">like in this example.</a> It will be a <code>Person</code> module with our name and city. We'll place it in an <code>app</code> folder in the root of our project. So our stucture looks like this:</p>

<p>```
index.html
|
|<em> app/
  |
  |</em> person.js
|
|<em> assets/
  |
  |</em> js/</p>

<pre><code>|
|_ libs/
  |
  |_ require.js
</code></pre>

<p>```</p>

<p>The <code>Person</code> module just needs to implement a define function which takes an object as an argument. It looks like this:
``` js app/person.js
define({</p>

<pre><code>name: "Rob Dodson",
city: "San Francisco"
</code></pre>

<p>});
```
And in our updated index.html we're going to require that module.</p>

<p>``` html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Require.js Sandbox</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script src="http://robdodson.me/assets/js/libs/require.js"></script>
  <script></p>

<pre><code>require(["app/person"], function(person) {
  console.log(person.name);
  console.log(person.city);
});
</code></pre>

<p>  </script>
</body>
</html>
```</p>

<p>Opening up that page in the browser should give us the proper output in the console.</p>

<h3>AMD modules for dummies</h3>

<p>Let's stop here for a moment to understand what's going on. In one file we implemented a <code>define</code> function and in another place we implemented a <code>require</code> function. In the most basic sense this is all we really need to do to start using AMD. I think the concept of javascript modules is really weird for most folks but if you're coming from a language like Java or Flash just think of define and require as two different interfaces that have to be implemented in order to recreate the <code>import</code> functionality that you're used to. Require.js is going to make sure everything loads properly so long as we stick to this convention.</p>

<p>If you're coming from more of a design background and you're used to having one big javascript file think of these modules as a way to break off pieces of code which you might otherwise put into separate script files. And I'm not talking one or two script files, I'm talking like 20 or 30. You could try to manage loading all of those dependencies yourself but that will be challenging. If you are building a blog then this probably isn't a big deal for you. In that case a few included js files is fine. But if you're trying to build a responsive web app for mobile then you're going to want to only load the bits of code you absolutely need. If a page doesn't require 90% of your JS then don't waste the time downloading it over a shitty AT&amp;T connection.</p>

<p>Ok let's write a module that's a bit more realistic. We'll use a function to return our object so it's kind of like a constructor.</p>

<p>``` js app/monster.js
"use strict";</p>

<p>define(function () {</p>

<pre><code>var estimated_age = 99 + 1;
var spookySaying = 'I vant to suck your blooood!';

return {
    name: 'Dracula',
    home: 'Florida',
    age: estimated_age,
    saySomethingSpooky: function() {
      console.log(spookySaying);
    }
};
</code></pre>

<p>});
<code>``
This is a simple monster object. Notice that we build a variable called</code>estimated_age<code>right before defining our object literal. We then return this variable. If we ask for the monster's age it will return this value. It's worth noting that this makes the</code>estimated_age<code>variable private since it only lives in the scope of the anonymous function returning our object literal. We've also got a method,</code>saySomethingSpooky<code>which will print out another private variable</code>spookySaying`. Wow it's <em>almost</em> the JavaScript classes I've always dreamed of! Before you go thinking that remember that modules are not instanceable, meaning, when you load in a module it works like a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a> almost. You can't go monster.new() all over the place.. it just doesn't work that way. Don't get disouraged though, this is still pretty cool so let's continue...</p>

<p>Next up is a module with dependencies. We'll make the monster depend on his coffin.</p>

<p>``` js app/coffin.js
"use strict";</p>

<p>define(function () {
  var color = 'Blackest black';</p>

<p>  return {</p>

<pre><code>color: color,
open: function() {
  console.log('*creeeeeek*');
}
</code></pre>

<p>  };
});
```</p>

<p>``` js app/monster.js
"use strict";</p>

<p>define(['./coffin'], function (coffin) {
  var estimated_age = 99 + 1;
  var spookySaying = 'I vant to suck your blooood!';</p>

<p>  return {</p>

<pre><code>name: 'Dracula',
home: 'Florida',
age: estimated_age,
saySomethingSpooky: function() {
  console.log(spookySaying);
},
goToSleep: function() {
  console.log('Time for bed!');
  coffin.open();
}
</code></pre>

<p>  };
});
```</p>

<p>``` html index.html</p>

<script data-main="" src="http://robdodson.me/assets/js/libs/require.js"></script>


<script>
  require(['app/monster'], function(monster) {
    monster.saySomethingSpooky();
    monster.goToSleep();
  });
</script>


<p><code>``
You can see that we've created a dependency for our monster, it has to load the coffin module before it's ready to be loaded itself. Otherwise it won't be able to run</code>goToSleep()<code>properly. Require.js will sort all of this out so long as we declare our dependencies as the first argument to the</code>define` function.</p>

<p>We aren't limited to objects though, we can also return functions (which are objects in their own right). For instance if we wanted to define a helper module that greets people we could do something like this:
``` js app/greet.js
"use strict";</p>

<p>define(function () {
  return function(name) {</p>

<pre><code>return 'Why hello, ' + name;
</code></pre>

<p>  }
});
<code>``
then in our index we'll just use the</code>greet` function as if it were globally available.</p>

<p><code>js index.html
require(['app/greet'], function(greet) {
  console.log(greet('Rob'));
});
</code>  <br/>
bear in mind that each module requires an http request to load it so you don't want to go overboard defining helper function modules. Note the extra http request in the profiler which loads greet.js.
<img class="center" src="/images/module_costs.png" title="'Note the separate http request for greet.js'" ></p>

<p>Ok that's it for today. I'll try to continue on Saturday!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Familiar with Backbone Boilerplate]]></title>
    <link href="http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate/"/>
    <updated>2012-05-17T07:47:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate</id>
    <content type="html"><![CDATA[<p>I have an upcoming project which uses <a href="http://documentcloud.github.com/backbone/">Backbone</a> and <a href="http://nodejs.org/">Node.js</a> so I thought it would be good to blog about the topics (particularly Backbone) for a while to make sure I'm well up to speed.</p>

<p>We're using the <a href="https://github.com/tbranyen/backbone-boilerplate">Backbone Boilerplate</a> to get us started since it includes a bit of file structure and a build process. As they mention in the docs you have to install <a href="https://github.com/cowboy/grunt">Grunt</a> if you want to use the build process they've stubbed out. Grunt is a javascript build tool which uses Node (think Rake in JS).</p>

<p>As a refresher course I'm going to dig into the open-source <a href="http://addyosmani.github.com/backbone-fundamentals/">Backbone Fundamentals book</a> by <a href="http://addyosmani.github.com/backbone-fundamentals/">Addy Osmani</a>.</p>

<p>First thing's first though, after we have nodejs and grunt installed we need to also install the bbb (backbone boilerplate build, I guess?) tool. You can <a href="https://github.com/backbone-boilerplate/grunt-bbb">grab it here.</a></p>

<p>We'll create a new folder for our project and run <code>bbb init</code>. If all goes well it should stub out some project directories and files for us.</p>

<h3>The Backbone Boilerplate templates</h3>

<p>I'll start with the index.html file. It seems like your standard HTML5 doc with the noteable exception that it includes <a href="http://requirejs.org/">require.js</a> at the bottom of the page.</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Backbone Boilerplate</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script data-main="app/config" src="http://robdodson.me/assets/js/libs/require.js"></script>
</body>
</html>
```
Require.js is a module and file loader which will help us manage our AMD modules. AMD (which stands for Asynchronous Module Definition) is a specification which details how to break JS down into modules that are loaded in, as needed, at runtime. <a href="http://addyosmani.com/writing-modular-js/">Again we turn to Addy Osmani for a good explanation.</a></p>

<p>If you notice this block:
```html</p>

<!-- Application source -->


<p>  <script data-main="app/config" src="http://robdodson.me/assets/js/libs/require.js"></script>
<code>``
the</code>data-main<code>attribute in the script tag is telling require.js what to load first. In this case it's the</code>app/config.js<code>file. If you omit the</code>js<code>require will add it for you. If you add the</code>.js` require will respect the path exactly as it was given. This distinction seems kind of trivial here but later on when you start configuring require with baseUrls and whatnot, it becomes more important.</p>

<p>Let's look at that confg file, shall we?</p>

<p>```javascript app/config.js
// Set the require.js configuration for your application.
require.config({
  // Initialize the application with the main application file
  deps: ["main"],</p>

<p>  paths: {</p>

<pre><code>// JavaScript folders
libs: "../assets/js/libs",
plugins: "../assets/js/plugins",

// Libraries
jquery: "../assets/js/libs/jquery",
underscore: "../assets/js/libs/underscore",
backbone: "../assets/js/libs/backbone",

// Shim Plugin
use: "../assets/js/plugins/use"
</code></pre>

<p>  },</p>

<p>  use: {</p>

<pre><code>backbone: {
  deps: ["use!underscore", "jquery"],
  attach: "Backbone"
},

underscore: {
  attach: "_"
}
</code></pre>

<p>  }
});
```</p>

<p>One of the first things you can do with Require is to pass it a configuration object. The config object <a href="http://requirejs.org/docs/api.html#config">can be used for a ton of bootstrap options</a> like setting paths, requiring other scripts, setting timeouts, etc. The first option we see here is <code>deps: ["main"]</code>. We can infer this is telling require to load our main.js file first. But how does it get the path to main.js? From the docs we see that since we haven't defined a <code>baseUrl</code> property require is using the path from our <code>data-main</code> attribute.</p>

<blockquote><p>If no baseUrl is explicitly set in the configuration, the default value will be the location of the HTML page that loads require.js. If a data-main attribute is used, that path will become the baseUrl.</p></blockquote>

<p>So we know that our baseUrl is <code>app/</code> and anything we require will be relative to that.</p>

<p>Next up we have this block:</p>

<p>```js
paths: {</p>

<pre><code>// JavaScript folders
libs: "../assets/js/libs",
plugins: "../assets/js/plugins",

// Libraries
jquery: "../assets/js/libs/jquery",
underscore: "../assets/js/libs/underscore",
backbone: "../assets/js/libs/backbone",

// Shim Plugin
use: "../assets/js/plugins/use"
</code></pre>

<p>  },
```</p>

<p>The paths property defines paths relative to <code>baseUrl</code>. If we say
<code>js
require(["libs/module"])
</code>
require.js will look for this <code>libs</code> path and find it in our config file. Most of these make sense till we hit the last line which creates a path for the <code>use</code> plugin.</p>

<p><a href="http://tbranyen.com/post/amdrequirejs-shim-plugin-for-loading-incompatible-javascript">It seems like <code>use</code> was created by Tim Branyen, the author of the Backbone Boilerplate, to help with loading libraries that are non-AMD compliant.</a> Most of the big libraries are currently not AMD compliant (underscore and backbone itself) so this makes sense. So instead of creating a shim for each of those libraries the <code>use</code> plugin <em>should</em> take care of things for us. We can see how it's used further in the config file:</p>

<p>```js
use: {</p>

<pre><code>backbone: {
  deps: ["use!underscore", "jquery"],
  attach: "Backbone"
},

underscore: {
  attach: "_"
}
</code></pre>

<p>  }
```</p>

<p>Let's start at the bottom so we can see that underscore is defined and mapped to "_". <code>attach</code> is going to take whatever library we're defining and attach it to <code>window</code>. So underscore will be attached as <code>window._</code>. Next we see that backbone is defined and depends on our version of underscore and jquery. Since jquery is AMD compliant we don't need the call to <code>use!</code> but we will need it for underscore. Finally backbone is attached to the window as <code>window.Backbone</code>.</p>

<p>That covers the configuration file. I'll move on to main.js in the next post.</p>

<ul>
<li>Time: 7:49 am</li>
<li>Mood: Awake, Tired, Lazy</li>
<li>Sleep: 7</li>
<li>Hunger: 4</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
