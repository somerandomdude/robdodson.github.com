<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Require.js | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/require-js/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-12-22T10:17:54-08:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Require.js multi-page shimmed site: How-To]]></title>
    <link href="http://robdodson.me/blog/2012/11/18/a-require-dot-js-multipage-shimmed-site-how-to/"/>
    <updated>2012-11-18T13:05:00-08:00</updated>
    <id>http://robdodson.me/blog/2012/11/18/a-require-dot-js-multipage-shimmed-site-how-to</id>
    <content type="html"><![CDATA[<p>I've been working with require.js a lot lately and found it really improves the way I manage my code. I had previous experience with require in the context of some of my Backbone posts but I'd never used it on a more traditional multi-page site before. The workflow to setup require on a multi-page site can be a little confusing at first so I'll try to walk you through the specifics.</p>

<!--more-->


<h2>Overview</h2>

<p><em>Note: This tutorial assumes you're already familiar with require.js and its configuration options. If not I recommend you <a href="http://requirejs.org/">checkout the docs</a> before proceeding -- Rob</em></p>

<h2><a href="https://github.com/robdodson/requirejs-multipage-shim-tutorial">Grab the Example Source</a></h2>

<p>Typically when you work with require.js you're building a single-page app. You usually have one main file which kicks off the app and pulls in dependencies as needed. When you're developing you leave these dependencies in separate files but when you move to production you need to combine them. In a production setting you want to cut down the number of http requests to the bare minimum. To assist you, require.js provides a build tool called r.js which minifies and concatenates all of your dependencies into one file.</p>

<p>When working with a multi-page site compiling everything into one file is probably not a good idea because you have no guarantee that the user will visit every page. Thus the ideal scenario is one in which each page has its own <code>main</code> file that contains page-specific instructions and then a separate (hopefully cached) file which contains all of the commonly used js libs. For example if you have a page called <strong>About</strong> and a page called <strong>Contact</strong> you would have <code>main-about.js</code> and <code>main-contact.js</code>. Let's say <code>main-about.js</code> and <code>main-contact.js</code> both require <code>'jquery'</code> and <code>'underscore'</code>. We wouldn't want to compile <code>jquery</code> and <code>underscore</code> into each <code>main</code> file because then we're creating unnecessary bloat. Instead we should create a <code>common.js</code> file which contains <code>jquery</code> and <code>underscore</code> and we'll make sure that this file loads before any of our <code>main</code> files. Take a look at this diagram to help it sink in:</p>

<p><strong>BEFORE OPTIMIZATION</strong>
```</p>

<h2>About</h2>

<p>js/vendor/jquery.js
js/vendor/underscore.js
js/app/main-about.js</p>

<h2>Contact</h2>

<p>js/vendor/jquery.js
js/vendor/underscore.js
js/app/main-contact.js
```</p>

<p><strong>AFTER OPTIMIZATION</strong>
```</p>

<h2>common.js</h2>

<p>js/vendor/jquery.js
js/vendor/underscore.js</p>

<h2>About</h2>

<p>js/common.js
js/app/main-about.js</p>

<h2>Contact</h2>

<p>js/common.js
js/app/main-contact.js
```</p>

<p>By compiling all of those libaries into <code>common.js</code> we're reducing the number of http requests per page. Also, after the first page has loaded, <code>common.js</code> should be available from the browser's cache. Now that you get the general concept let's take a look at an example.</p>

<h2>Examples!</h2>

<p><a href="https://twitter.com/jrburke">James Burke</a>, author of require.js, has done a great job putting together some example projects which show how to effectively structure your project so it can be run through the r.js optimization tool when you're ready to deploy. The one I typically refer to is the <a href="https://github.com/requirejs/example-multipage-shim">example-multipage-shim.</a> There's also an <a href="https://github.com/requirejs/example-multipage">example-multipage</a> but I tend to use the shim version because it seems like there's always a few non-AMD scripts that end up in a project.</p>

<p>I've put together my own boilerplate which you guys are free to grab <a href="https://github.com/robdodson/requirejs-multipage-shim-tutorial">here.</a> The rest of this post will walk through this boilerplate.</p>

<h2>Learn you a boilerplate!</h2>

<p>If you've worked with require.js on a single page site you're probably used to defining a script tag that looks like this:</p>

<p>```html</p>

<!--This sets the baseUrl to the "scripts" directory, and
    loads a script that will have a module ID of 'main'-->


<script data-main="scripts/main.js" src="scripts/require.js"></script>


<p>```</p>

<p>The <code>data-main</code> attribute is a convenience feature of require.js which sets require's <a href="http://requirejs.org/docs/api.html#config-baseUrl">baseUrl property.</a> You usually put some configuration options in the <code>main</code> file as well, for instance, if you're loading a 3rd party library you might create a <a href="http://requirejs.org/docs/api.html#config-paths">path</a> so you can easily reference it. Since our boilerplate has different <code>main</code> files for each page we're going to put that configuration data into our <code>common.js</code> file instead.</p>

<p><em>Hold on, I thought you said common.js was where we were going to compile all of our libraries?</em></p>

<p>Indeed you are correct astute reader. But since <code>common.js</code> is going to be loaded before any other required modules, why not put our configuration options in it as well? Here's what the <code>common.js</code> file from our boilerplate looks like:</p>

<p>``` js common.js
//The build will inline common dependencies into this file.</p>

<p>requirejs.config({
  baseUrl: './js',
  paths: {</p>

<pre><code>'jquery': 'vendor/require-jquery',
'bootstrap': 'vendor/bootstrap'
</code></pre>

<p>  },
  shim: {</p>

<pre><code>'bootstrap': [ 'jquery' ]
</code></pre>

<p>  }
});
```</p>

<p>To smooth over possible weird module shimming situations I tend to use the combined jQuery-require.js bundle available <a href="http://requirejs.org/docs/jquery.html">here.</a> Then in my paths option I map <code>jquery</code> to this file. The file will already be loaded on the page so it doesn't actually request anything new, it just makes sure that <code>$</code> is available in my modules.</p>

<p>You'll also note that we're using <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> which is not AMD compliant out of the box so we have to shim it. In this case it depends on <code>jquery</code> so we list that as its only dependency and we're good.</p>

<p>Aside from <code>common.js</code> you should probably take a look in the <code>app/models</code> directory. I've created two models which extend a base model in order to illustrate that the <code>common.js</code> file isn't only for 3rd party code, it's really for any code that's going to be used over and over on your site. We'll toss the basicModel into common.js during the build process.</p>

<h2>Just hit build already...</h2>

<p>OK ok. I can tell you're ready to see some fireworks. Before we hit build I want to point out the <code>options.js</code> file. This is where we tell r.js which modules to compile and what each module should include or exclude.</p>

<p>``` js options.js
module.exports = {
  appDir: 'www',
  baseUrl: 'js/',
  mainConfigFile: 'www/js/common.js',
  dir: 'www-release',
  modules: [</p>

<pre><code>{
  name: 'common',
  include: [
    'app/models/basicModel',
    'bootstrap'
  ],
  exclude: ['jquery']
},

{
  name: 'app/main-about',
  exclude: ['common', 'jquery']
},

{
  name: 'app/main-contact',
  exclude: ['common', 'jquery']
}
</code></pre>

<p>  ]
};
```</p>

<p>You'll note that first we put together our common module, then we tell the subsequent modules to exclude it. When you tell r.js to exclude a module it will find all of the nested dependencies in that module and exclude those as well. This is why we don't need to tell about and contact to exclude bootstrap. It sees that bootstrap is already in common so it knows to exclude it.</p>

<p>If you haven't already now is a good time to do an <code>npm install</code>. That should pull down all of the grunt dependencies. Speaking of grunt, you'll need to install that as well if you've never used it <code>npm install -g grunt</code>. You might noticed in our gruntfile, <code>grunt.js</code>, we are using a number of tasks from the <a href="https://github.com/gruntjs/grunt-contrib">grunt-contrib</a> library. Grunt-contrib is a great resource for and I encourage you to spend some time looking through all of the tasks that fall under its umbrella.</p>

<p>OK. Ready to rock. Just type <code>grunt</code> to build, or <code>grunt.cmd</code> if you're on Windows (thanks <a href="http://twitter.com/stevensacks">@stevensacks</a>). When you're finished you should have a new folder called <code>www-release</code>. Take a look at the <code>build.txt</code> file to see where everything ended up.</p>

<p>```</p>

<h2>css/bootstrap-responsive.css</h2>

<p>css/bootstrap-responsive.css</p>

<h2>css/bootstrap.css</h2>

<p>css/bootstrap.css</p>

<h2>css/style.css</h2>

<p>css/style.css</p>

<h2>js/common.js</h2>

<p>js/common.js
js/app/models/basicModel.js
js/vendor/bootstrap.js</p>

<h2>js/app/main-about.js</h2>

<p>js/app/models/aboutModel.js
js/app/main-about.js</p>

<h2>js/app/main-contact.js</h2>

<p>js/app/models/contactModel.js
js/app/main-contact.js
```</p>

<p>If you take a look at the <code>common.js</code> file in <code>www-release</code> it should look like a big blob of minified code. That's what we want to see. In this case it contains our basicModel, twitter bootstrap and our original configuration code. If you refer to about.html you can see how we control the load order:</p>

<p>``` html</p>

<script src="./js/vendor/require-jquery.js"></script>


<script type="text/javascript">
// Load common code that includes config,
// then load the app logic for this page.
require(['./js/common'], function (common) {
  // ./js/common.js sets the baseUrl to be ./js/
  // You can ask for 'app/main-about' here instead
  // of './js/app/main-about'
  require(['app/main-about']);
});
</script>


<p>```</p>

<p>First we bring in our combined require.js/jquery script. Then we load <code>common.js</code> and only <em>after</em> <code>common.js</code> is loaded do we load the page specific code in <code>main-about</code>. If you stick to this structure you should be able to layer your code so it's easy to manage throughout your site.</p>

<h2><a href="https://github.com/robdodson/requirejs-multipage-shim-tutorial">Grab the Example Source</a></h2>

<p>Hope you learned something new today. Feedback and suggestions always welcome in the comments below. Thanks!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Boilerplate: Playing with Require.js]]></title>
    <link href="http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js/"/>
    <updated>2012-05-18T08:07:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/18/backbone-boilerplate-playing-with-require-dot-js</id>
    <content type="html"><![CDATA[<p>I want to keep playing with require.js and AMD modules today so I can really internalize the concepts around them. I'm going to go through the examples in <a href="http://requirejs.org/docs/api.html#jsfiles">the require documentation</a> starting with loading regular scripts and then defining modules and loading those.</p>

<!--more-->


<p>Here is our boilerplate HTML. It's a standard HTML5 file which just includes require.js at the bottom of the page.
``` html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Require.js Sandbox</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script src="http://robdodson.me/assets/js/libs/require.js"></script>
</body>
</html>
```
I'm also going to define a file called foo.js which will just console log "Hello World!". To update our HTML we'll add the following script tag after the call to include require.js</p>

<p>``` html</p>

<script>
    require(["foo"]);
</script>


<p>```</p>

<p>And as expected the console outputs 'Hello World!'. Let's step it up a notch and define a module. Our first module will just return an object literal <a href="http://requirejs.org/docs/api.html#defsimple">like in this example.</a> It will be a <code>Person</code> module with our name and city. We'll place it in an <code>app</code> folder in the root of our project. So our stucture looks like this:</p>

<p>```
index.html
|
|<em> app/
  |
  |</em> person.js
|
|<em> assets/
  |
  |</em> js/</p>

<pre><code>|
|_ libs/
  |
  |_ require.js
</code></pre>

<p>```</p>

<p>The <code>Person</code> module just needs to implement a define function which takes an object as an argument. It looks like this:
``` js app/person.js
define({</p>

<pre><code>name: "Rob Dodson",
city: "San Francisco"
</code></pre>

<p>});
```
And in our updated index.html we're going to require that module.</p>

<p>``` html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Require.js Sandbox</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script src="http://robdodson.me/assets/js/libs/require.js"></script>
  <script></p>

<pre><code>require(["app/person"], function(person) {
  console.log(person.name);
  console.log(person.city);
});
</code></pre>

<p>  </script>
</body>
</html>
```</p>

<p>Opening up that page in the browser should give us the proper output in the console.</p>

<h3>AMD modules for dummies</h3>

<p>Let's stop here for a moment to understand what's going on. In one file we implemented a <code>define</code> function and in another place we implemented a <code>require</code> function. In the most basic sense this is all we really need to do to start using AMD. I think the concept of javascript modules is really weird for most folks but if you're coming from a language like Java or Flash just think of define and require as two different interfaces that have to be implemented in order to recreate the <code>import</code> functionality that you're used to. Require.js is going to make sure everything loads properly so long as we stick to this convention.</p>

<p>If you're coming from more of a design background and you're used to having one big javascript file think of these modules as a way to break off pieces of code which you might otherwise put into separate script files. And I'm not talking one or two script files, I'm talking like 20 or 30. You could try to manage loading all of those dependencies yourself but that will be challenging. If you are building a blog then this probably isn't a big deal for you. In that case a few included js files is fine. But if you're trying to build a responsive web app for mobile then you're going to want to only load the bits of code you absolutely need. If a page doesn't require 90% of your JS then don't waste the time downloading it over a shitty AT&amp;T connection.</p>

<p>Ok let's write a module that's a bit more realistic. We'll use a function to return our object so it's kind of like a constructor.</p>

<p>``` js app/monster.js
"use strict";</p>

<p>define(function () {</p>

<pre><code>var estimated_age = 99 + 1;
var spookySaying = 'I vant to suck your blooood!';

return {
    name: 'Dracula',
    home: 'Florida',
    age: estimated_age,
    saySomethingSpooky: function() {
      console.log(spookySaying);
    }
};
</code></pre>

<p>});
<code>``
This is a simple monster object. Notice that we build a variable called</code>estimated_age<code>right before defining our object literal. We then return this variable. If we ask for the monster's age it will return this value. It's worth noting that this makes the</code>estimated_age<code>variable private since it only lives in the scope of the anonymous function returning our object literal. We've also got a method,</code>saySomethingSpooky<code>which will print out another private variable</code>spookySaying`. Wow it's <em>almost</em> the JavaScript classes I've always dreamed of! Before you go thinking that remember that modules are not instanceable, meaning, when you load in a module it works like a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a> almost. You can't go monster.new() all over the place.. it just doesn't work that way. Don't get disouraged though, this is still pretty cool so let's continue...</p>

<p>Next up is a module with dependencies. We'll make the monster depend on his coffin.</p>

<p>``` js app/coffin.js
"use strict";</p>

<p>define(function () {
  var color = 'Blackest black';</p>

<p>  return {</p>

<pre><code>color: color,
open: function() {
  console.log('*creeeeeek*');
}
</code></pre>

<p>  };
});
```</p>

<p>``` js app/monster.js
"use strict";</p>

<p>define(['./coffin'], function (coffin) {
  var estimated_age = 99 + 1;
  var spookySaying = 'I vant to suck your blooood!';</p>

<p>  return {</p>

<pre><code>name: 'Dracula',
home: 'Florida',
age: estimated_age,
saySomethingSpooky: function() {
  console.log(spookySaying);
},
goToSleep: function() {
  console.log('Time for bed!');
  coffin.open();
}
</code></pre>

<p>  };
});
```</p>

<p>``` html index.html</p>

<script data-main="" src="http://robdodson.me/assets/js/libs/require.js"></script>


<script>
  require(['app/monster'], function(monster) {
    monster.saySomethingSpooky();
    monster.goToSleep();
  });
</script>


<p><code>``
You can see that we've created a dependency for our monster, it has to load the coffin module before it's ready to be loaded itself. Otherwise it won't be able to run</code>goToSleep()<code>properly. Require.js will sort all of this out so long as we declare our dependencies as the first argument to the</code>define` function.</p>

<p>We aren't limited to objects though, we can also return functions (which are objects in their own right). For instance if we wanted to define a helper module that greets people we could do something like this:
``` js app/greet.js
"use strict";</p>

<p>define(function () {
  return function(name) {</p>

<pre><code>return 'Why hello, ' + name;
</code></pre>

<p>  }
});
<code>``
then in our index we'll just use the</code>greet` function as if it were globally available.</p>

<p><code>js index.html
require(['app/greet'], function(greet) {
  console.log(greet('Rob'));
});
</code>  <br/>
bear in mind that each module requires an http request to load it so you don't want to go overboard defining helper function modules. Note the extra http request in the profiler which loads greet.js.
<img class="center" src="/images/module_costs.png" title="'Note the separate http request for greet.js'" ></p>

<p>Ok that's it for today. I'll try to continue on Saturday!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Familiar with Backbone Boilerplate]]></title>
    <link href="http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate/"/>
    <updated>2012-05-17T07:47:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/17/getting-familiar-with-backbone-boilerplate</id>
    <content type="html"><![CDATA[<p>I have an upcoming project which uses <a href="http://documentcloud.github.com/backbone/">Backbone</a> and <a href="http://nodejs.org/">Node.js</a> so I thought it would be good to blog about the topics (particularly Backbone) for a while to make sure I'm well up to speed.</p>

<!--more-->


<p>We're using the <a href="https://github.com/tbranyen/backbone-boilerplate">Backbone Boilerplate</a> to get us started since it includes a bit of file structure and a build process. As they mention in the docs you have to install <a href="https://github.com/cowboy/grunt">Grunt</a> if you want to use the build process they've stubbed out. Grunt is a javascript build tool which uses Node (think Rake in JS).</p>

<p>As a refresher course I'm going to dig into the open-source <a href="http://addyosmani.github.com/backbone-fundamentals/">Backbone Fundamentals book</a> by <a href="http://addyosmani.github.com/backbone-fundamentals/">Addy Osmani</a>.</p>

<p>First thing's first though, after we have nodejs and grunt installed we need to also install the bbb (backbone boilerplate build, I guess?) tool. You can <a href="https://github.com/backbone-boilerplate/grunt-bbb">grab it here.</a></p>

<p>We'll create a new folder for our project and run <code>bbb init</code>. If all goes well it should stub out some project directories and files for us.</p>

<h3>The Backbone Boilerplate templates</h3>

<p>I'll start with the index.html file. It seems like your standard HTML5 doc with the noteable exception that it includes <a href="http://requirejs.org/">require.js</a> at the bottom of the page.</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1"></p>

<p>  <title>Backbone Boilerplate</title></p>

<p>  <!-- Application styles -->
  <link rel="stylesheet" href="http://robdodson.me/assets/css/index.css">
</head></p>

<p><body>
  <!-- Main container -->
  <div role="main" id="main"></div></p>

<p>  <!-- Application source -->
  <script data-main="app/config" src="http://robdodson.me/assets/js/libs/require.js"></script>
</body>
</html>
```
Require.js is a module and file loader which will help us manage our AMD modules. AMD (which stands for Asynchronous Module Definition) is a specification which details how to break JS down into modules that are loaded in, as needed, at runtime. <a href="http://addyosmani.com/writing-modular-js/">Again we turn to Addy Osmani for a good explanation.</a></p>

<p>If you notice this block:
```html</p>

<!-- Application source -->


<p>  <script data-main="app/config" src="http://robdodson.me/assets/js/libs/require.js"></script>
<code>``
the</code>data-main<code>attribute in the script tag is telling require.js what to load first. In this case it's the</code>app/config.js<code>file. If you omit the</code>js<code>require will add it for you. If you add the</code>.js` require will respect the path exactly as it was given. This distinction seems kind of trivial here but later on when you start configuring require with baseUrls and whatnot, it becomes more important.</p>

<p>Let's look at that confg file, shall we?</p>

<p>```javascript app/config.js
// Set the require.js configuration for your application.
require.config({
  // Initialize the application with the main application file
  deps: ["main"],</p>

<p>  paths: {</p>

<pre><code>// JavaScript folders
libs: "../assets/js/libs",
plugins: "../assets/js/plugins",

// Libraries
jquery: "../assets/js/libs/jquery",
underscore: "../assets/js/libs/underscore",
backbone: "../assets/js/libs/backbone",

// Shim Plugin
use: "../assets/js/plugins/use"
</code></pre>

<p>  },</p>

<p>  use: {</p>

<pre><code>backbone: {
  deps: ["use!underscore", "jquery"],
  attach: "Backbone"
},

underscore: {
  attach: "_"
}
</code></pre>

<p>  }
});
```</p>

<p>One of the first things you can do with Require is to pass it a configuration object. The config object <a href="http://requirejs.org/docs/api.html#config">can be used for a ton of bootstrap options</a> like setting paths, requiring other scripts, setting timeouts, etc. The first option we see here is <code>deps: ["main"]</code>. We can infer this is telling require to load our main.js file first. But how does it get the path to main.js? From the docs we see that since we haven't defined a <code>baseUrl</code> property require is using the path from our <code>data-main</code> attribute.</p>

<blockquote><p>If no baseUrl is explicitly set in the configuration, the default value will be the location of the HTML page that loads require.js. If a data-main attribute is used, that path will become the baseUrl.</p></blockquote>

<p>So we know that our baseUrl is <code>app/</code> and anything we require will be relative to that.</p>

<p>Next up we have this block:</p>

<p>```js
paths: {</p>

<pre><code>// JavaScript folders
libs: "../assets/js/libs",
plugins: "../assets/js/plugins",

// Libraries
jquery: "../assets/js/libs/jquery",
underscore: "../assets/js/libs/underscore",
backbone: "../assets/js/libs/backbone",

// Shim Plugin
use: "../assets/js/plugins/use"
</code></pre>

<p>  },
```</p>

<p>The paths property defines paths relative to <code>baseUrl</code>. If we say
<code>js
require(["libs/module"])
</code>
require.js will look for this <code>libs</code> path and find it in our config file. Most of these make sense till we hit the last line which creates a path for the <code>use</code> plugin.</p>

<p><a href="http://tbranyen.com/post/amdrequirejs-shim-plugin-for-loading-incompatible-javascript">It seems like <code>use</code> was created by Tim Branyen, the author of the Backbone Boilerplate, to help with loading libraries that are non-AMD compliant.</a> Most of the big libraries are currently not AMD compliant (underscore and backbone itself) so this makes sense. So instead of creating a shim for each of those libraries the <code>use</code> plugin <em>should</em> take care of things for us. We can see how it's used further in the config file:</p>

<p>```js
use: {</p>

<pre><code>backbone: {
  deps: ["use!underscore", "jquery"],
  attach: "Backbone"
},

underscore: {
  attach: "_"
}
</code></pre>

<p>  }
```</p>

<p>Let's start at the bottom so we can see that underscore is defined and mapped to "_". <code>attach</code> is going to take whatever library we're defining and attach it to <code>window</code>. So underscore will be attached as <code>window._</code>. Next we see that backbone is defined and depends on our version of underscore and jquery. Since jquery is AMD compliant we don't need the call to <code>use!</code> but we will need it for underscore. Finally backbone is attached to the window as <code>window.Backbone</code>.</p>

<p>That covers the configuration file. I'll move on to main.js in the next post.</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Awake, Tired, Lazy</li>
    <li>Sleep: 7</li>
    <li>Hunger: 4</li>
    <li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
