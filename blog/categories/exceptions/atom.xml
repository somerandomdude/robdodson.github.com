<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Exceptions | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/exceptions/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2012-05-30T10:57:52-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed with Tests Pt. 6]]></title>
    <link href="http://robdodson.me/blog/2012/05/13/object-oriented-scraper-backed-with-tests-pt-6/"/>
    <updated>2012-05-13T07:52:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/13/object-oriented-scraper-backed-with-tests-pt-6</id>
    <content type="html"><![CDATA[<p>Yesterday we verified that our <code>Crawler</code> was able to hit a document and, given the right selector, pull down a list of words and their frequency on the page. We also created a custom exception to be used whenever the selector fails to pull down the right content. I'm going to repeat this process today with the <code>get_metadata_by_selector</code>. If there's time we'll try to output another file with our data, otherwise that'll be tomorrow's homeworkd :D</p>

<p>Let's take a moment to look at today's metadata to figure out what we'd like our output to reflect.</p>

<p><code>
- Time: 8:03 am
- Mood: Happy, Drowsy, Peaceful
- Sleep: 5.5
- Hunger: 3
- Coffee: 0
</code></p>

<p>That's the actual markdown that goes into the editor but it gets converted into a <code>ul</code>. I don't <em>think</em> you can pass a CSS class to markdown syntax otherwise I'd use one here. We could go back and wrap everything in regular HTML tags but since we know that our metadata is going to be the last ul per entry we'll just use that knowledge to build our selector. Obviously a more robust solution would use a CSS class so that might be a good refactoring for the future.</p>

<p>I figure for now we'll just parse the metadata into a Hash that'll look something like this:</p>

<p><code>
{
  datetime: 2012-05-13T08:03:00-07:00,
  mood: ['Happy', 'Drowsy', 'Peaceful'],
  sleep: 5.5,
  hunger: 3.0,
  coffee: 0.0
}
</code>
In the final iteration we'll toss all of our Metadata Hashes into an ordered Array so we can visualize them over time.</p>

<h3>Red, Green, Refactor</h3>

<p>Ok, time for a failing test. Let's make sure that our selector pulls something down and if it doesn't we should raise the custom <code>SelectionError</code> we defined yesterday. I'm already seeing some repetitive code in our Crawler so I'm refactoring it. Where we need to get a group of XML nodes from the document via selector I've created a private helper called <code>nodes_by_selector</code>. This is also where we'll raise our exception if nothing came back. I'm also cleaning up some of the word cruff from our public API so instead of <code>get_words_by_selector</code> it's not just <code>words_by_selector</code>. The same goes for our metadata method.</p>

<p>```ruby tentacles/lib/tentacles/crawler_rb
require 'open-uri'
require 'nokogiri'
require_relative 'selection_error'</p>

<p>module Tentacles
  class Crawler</p>

<pre><code>attr_reader :doc

def self.from_uri(uri)
  new(uri)
end

def initialize(uri)
  @uri = uri
  @doc = Nokogiri::HTML(open(@uri))
  @counts = Hash.new(0)
end

def words_by_selector(selector)
  nodes = nodes_by_selector(selector)
  nodes.each do |node|
    words = words_from_string(node.content)
    count_frequency(words)
  end

  sorted = @counts.sort_by { |word, count| count }
  sorted.reverse!
  sorted.map { |word, count| "#{word}: #{count}"}
end

def metadata_by_selector(selector)
  nodes = nodes_by_selector(selector)
end
</code></pre>

<p>  private</p>

<pre><code>def nodes_by_selector(selector)
  nodes = doc.css(selector)
  raise Tentacles::SelectionError, 
    'The selector did not return an results!' if nodes.empty?
  nodes
end 

def words_from_string(string)
  string.downcase.scan(/[\w']+/)
end

def count_frequency(word_list)
  for word in word_list
    @counts[word] += 1
  end
  @counts
end
</code></pre>

<p>  end
end
<code>
Going back to the tests we need to refactor a bit for any place that's been broken. Immediately I saw that my `nodes_by_selector` method was not initially returning the nodes so I added that back in. The tests brought that to my attention before I had to do any potentially painful debugging. Beyond that we just need to fix up our method names:
</code>ruby tentacles/spec/crawler_spec.rb
require_relative '../lib/tentacles/crawler'
require 'fakeweb'</p>

<p>describe Tentacles::Crawler do</p>

<p>  before do</p>

<pre><code># Create a mock options object
@options = {
  uri: 'http://robdodson.me', 
  post_selector: '.entry-content',
  metadata_selector: '.personal-metadata'
}

# Create a mock web request
FakeWeb.register_uri(:get, @options[:uri],
                     :body =&gt; '&lt;div class="' + @options[:post_selector].delete(".") + 
                     '"&gt;Hello Hello Hello World World Foobar!&lt;/div&gt;')
</code></pre>

<p>  end</p>

<p>  describe "constructors" do</p>

<pre><code>describe "#from_uri" do
  it "should respond" do
    Tentacles::Crawler.should respond_to(:from_uri)
  end

  it "should return an instance" do
    crawler = Tentacles::Crawler.from_uri(@options[:uri])
    crawler.should be_an_instance_of(Tentacles::Crawler)
  end
end
</code></pre>

<p>  end</p>

<p>  describe "instances" do</p>

<pre><code>before do
  @crawler = Tentacles::Crawler.from_uri(@options[:uri])
end

subject { @crawler }

it { should respond_to(:words_by_selector) }
it { should respond_to(:metadata_by_selector) }

context "post-construct" do
  it "should have the right document" do
    @crawler.doc.content.should =~ /Hello Hello Hello World World Foobar!/
  end
end

describe "#words_by_selector" do
  it "should produce an Array of keywords" do
    expected_array = ['hello: 3', 'world: 2', 'foobar: 1']
    actual_array = @crawler.words_by_selector(@options[:post_selector])
    actual_array.should eq(expected_array)
  end

  it "should raise an exception if nothing was returned" do
    expect { @crawler.words_by_selector('some-gibberish-selector') }.to raise_error(Tentacles::SelectionError, 'The selector did not return an results!')  
  end
end

describe "#metadata_by_selector" do
  it "should raise an exception if nothing was returned" do
    expect { @crawler.metadata_by_selector('some-gibberish-selector') }.to raise_error(Tentacles::SelectionError, 'The selector did not return an results!')  
  end
end
</code></pre>

<p>  end
end
```</p>

<p>We've got a duplicate test in there where both <code>#words_by_selector</code> and <code>#metadata_by_selector</code> are checking that they both raise an exception if nothing comes down. Let's see if we can refactor those into an RSpec shared example. I'm not sure if this is a best practice or not but here's my implementation:</p>

<p>```ruby tentacles/spec/crawler_spec.rb
shared_examples_for "all selector methods" do
  describe "when selection has no nodes" do</p>

<pre><code>it "should raise an exception" do
  expect { @crawler.send(selector_method, 'some-gibberish-selector') }.to raise_error(Tentacles::SelectionError, 'The selector did not return an results!')  
end
</code></pre>

<p>  end
end</p>

<h3>...</h3>

<p>describe "#words_by_selector" do
  it_behaves_like "all selector methods" do</p>

<pre><code>let(:selector_method) { :words_by_selector }
</code></pre>

<p>  end</p>

<h1>...</h1>

<p>end</p>

<p>describe "#metadata_by_selector" do
  it_behaves_like "all selector methods" do</p>

<pre><code>let(:selector_method) { :metadata_by_selector }
</code></pre>

<p>  end
end
```</p>

<p>Basically we're putting our method name as a symbol into a variable using <code>let</code> and then calling that method in the shared_examples_for block. Notice how we're using <code>@crawler.send(selector_method, ...)</code>? In this case <code>selector_method</code> refers to our method name symbol.</p>

<p>If you run this in RSpec's nested mode it looks pretty cool:</p>

<p>```ruby
Tentacles::Crawler
  constructors</p>

<pre><code>#from_uri
  should respond
  should return an instance
</code></pre>

<p>  instances</p>

<pre><code>should respond to #words_by_selector
should respond to #metadata_by_selector
post-construct
  should have the right document
#words_by_selector
  should produce an Array of keywords
  behaves like all selector methods
    when selection has no nodes
      should raise an exception
#metadata_by_selector
  behaves like all selector methods
    when selection has no nodes
      should raise an exception
</code></pre>

<p>```</p>

<p>Ok, so we know that all of our selector methods raise the proper exception if they are called with a bunk selector. Now let's make sure we can get our metadata downloaded and structured.</p>

<p>Unfortunately I'm realizing that if the <code>ul</code> for our metadata is part of the post then those words get counted along with everything else, which is not what I want. I need to figure out how to exclude that content...</p>

<p>I could either tell my crawler to explicitly ignore that content or wrap my blog entry in an even more specific class and just select that. I guess that'll be an exercise for tomorrow :\</p>

<ul>
<li>Time: 8:03 am</li>
<li>Mood: Happy, Drowsy, Peaceful</li>
<li>Sleep: 5.5</li>
<li>Hunger: 3</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Scraper Backed with Tests Pt. 5]]></title>
    <link href="http://robdodson.me/blog/2012/05/12/object-oriented-scraper-backed-with-tests-pt-5/"/>
    <updated>2012-05-12T07:02:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/05/12/object-oriented-scraper-backed-with-tests-pt-5</id>
    <content type="html"><![CDATA[<p>Last night I got the <code>Crawler</code> passing its test for <code>#get_words_by_selector</code>. This morning I realize that when someone sends in a junk selector I want to raise an exception of some kind. Since I don't know much about Ruby Exceptions I'm doing a little digging...Ruby has both <code>throw</code>/<code>catch</code> and <code>raise</code>/<code>rescue</code> so what's the difference between throw/catch and raise/rescue in Ruby?</p>

<h3>Throwing exceptions for control flow</h3>

<p>There's a great guest post by Avdi Grimm on <a href="http://rubylearning.com/blog/2011/07/12/throw-catch-raise-rescue-im-so-confused/">RubyLearning</a> which covers this topic in depth. To summarize <code>throw</code>/<code>catch</code> is mainly used when doing <em>exceptions as control flow</em>. In other words, if you need to break out of a deeply nested loop or some other expensive operation you can throw an exception symbol which can be caught someone high up the call stack. Initially this rubbed me the wrong way since I know that things like <code>goto</code> and <code>labels</code> are a bad practice. Someone else raised this point in the comments to which Avid responded:</p>

<blockquote><p>There is a fundamental difference between throw/catch and goto. Goto, in languages which support it, pays no attention to the stack. Any resources which were allocated before the goto are simply left dangling unless they are manually cleaned up.</p>

<p>throw/catch, like exception handling, unwinds the stack, triggering ensure blocks along the way. So, for example, if you throw inside an open() {…} block, the open file will be closed on the way up to the catch() block.</p></blockquote>

<h3>Raising exceptions for everything else</h3>

<p>With <code>throw</code>/<code>catch</code> out of the way that leaves <code>raise</code>/<code>rescue</code> to handle everything else. I'm willing to bet that 99% of error code should probably be raising exceptions and throw/catch should only be used in situations where you need the control flow behavior. With that knowledge in hand I need to decide between one of Ruby's built-in Exceptions or defining one of my own. Let's define one of our own so we can get that experience under our belt.</p>

<h3>Creating an exception subclass in Ruby</h3>

<p>One tip I picked up while doing my research into <code>raise</code> and <code>throw</code> is that any exception that doesn't subclass StandardError will not be caught by default. Here's an example to illustrate:</p>

<p>```ruby</p>

<h2>#</h2>

<h1>First we define an exception class which doesn't</h1>

<h1>inherit from StandardError. As a result it won't</h1>

<h1>be caught by a simple rescue. Instead we would</h1>

<h1>need to rescue by its class name</h1>

<h2>#</h2>

<p>class MyBadException &lt; Exception
end</p>

<p>def miss_bad_exception
  raise MyBadException.new
  rescue
  p "I'll never be called :("
end</p>

<p>miss_bad_exception
MyBadException: MyBadException
  from (irb):4:in <code>miss_bad_exception'
  from (irb):8
  from /Users/Rob/.rvm/rubies/ruby-1.9.3-p125/bin/irb:16:in</code><main></p>

<h1>See that calling the method produces an uncaught exception...</h1>

<h2>#</h2>

<h1>Next we'll subclass StandardError. As a result</h1>

<h1>we won't have to explicitly define our class name</h1>

<h1>for a rescue to work.</h1>

<h2>#</h2>

<p>class MyGoodException &lt; StandardError
end</p>

<p>def save_good_exception
  raise MyGoodException.new
  rescue
  p "I'm saved! My hero!"
end</p>

<p>save_good_exception
"I'm saved! My hero!"</p>

<h1>Yay! Our exception was caught!</h1>

<p><code>``
We'll call our Exception</code>SelectorError` to indicate that the provided selector did not return any results. For reference I often refer to <a href="http://rubylearning.com/satishtalim/ruby_exceptions.html">this chart on RubyLearning</a> when I want to see a list of all the available Exception classes. In our case we'll just inherit from StandardError.</p>

<p><code>ruby tentacles/lib/selection_error.rb
module Tentacles
  class SelectionError &lt; StandardError
  end
end
</code>
I don't think we actually need to do much more than that. The ability to pass a payload message should come from the super class so I think we're good to go. Here's our updated spec:</p>

<p>```ruby
it "should raise an exception if nothing was returned" do</p>

<pre><code>    expect { @crawler.get_words_by_selector('some-gibberish-selector') }.to raise_error(Tentacles::SelectionError, 'The selector did not return an results!')  
</code></pre>

<p>end
<code>``      
Initially the test fails so now we need to update our</code>Crawler` to check if nothing was returned and raise the custom exception.</p>

<p>Here's our updated <code>Crawler</code> with additional require and updated method.</p>

<p>```ruby tentacles/lib/crawler.rb
require 'open-uri'
require 'nokogiri'
require_relative 'selection_error'</p>

<p>module Tentacles
  class Crawler</p>

<pre><code>attr_reader :doc

def self.from_uri(uri)
  new(uri)
end

def initialize(uri)
  @uri = uri
  @doc = Nokogiri::HTML(open(@uri))
  @counts = Hash.new(0)
end

def get_words_by_selector(selector)
  entries = doc.css(selector)
  raise Tentacles::SelectionError, 
    'The selector did not return an results!' if entries.empty?
  entries.each do |entry|
    words = words_from_string(entry.content)
    count_frequency(words)
  end

  sorted = @counts.sort_by { |word, count| count }
  sorted.reverse!
  sorted.map { |word, count| "#{word}: #{count}"}
end

def get_metadata_by_selector(selector)
  # TODO
end
</code></pre>

<p>  private</p>

<pre><code>def words_from_string(string)
  string.downcase.scan(/[\w']+/)
end

def count_frequency(word_list)
  for word in word_list
    @counts[word] += 1
  end
  @counts
end
</code></pre>

<p>  end
end
```</p>

<p>All tests passing, we're good to go :)</p>

<ul>
<li>Time: 7:00 am</li>
<li>Mood: Alert, Awake, Anxious</li>
<li>Sleep: 8</li>
<li>Hunger: 3</li>
<li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
</feed>
